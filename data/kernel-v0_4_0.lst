
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass --m65816 -D TARGET=1 -D TARGET_SYS=1 --long-address --flat -b -o kernel_FMX.bin --list kernel_FMX.lst --labels=kernel_FMX.lbl src/kernel.asm
; Wed Jul 14 00:08:30 2021

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=1						TARGET=1
=1						TARGET_SYS=1

;******  Processing input file: src/kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$380000					  START_OF_FLASH := $380000                   ; The Foenix FMX Flash starts at $380000
=$390400					  START_OF_KERNEL := $390400                  ; The kernel itself starts at $390400
=$3a0000					  START_OF_BASIC := $3A0000                   ; The BASIC flash code starts at $3A0000
=$3b0000					  START_OF_CREDITS := $3B0000                 ; The credits screen starts at $3B0000
=$3e0000					  START_OF_SPLASH := $3E0000                  ; SplashScreen Code and Data $3E0000
=$3f0000					  START_OF_FONT := $3F0000                    ; The font starts at $3F0000

;******  Processing file: src/Includes/macros_inc.asm


;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1b						CHAR_ESC = $1B      ; ESC
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$3b						CHAR_F1 = $3B       ; Function key scan codes
=$3c						CHAR_F2 = $3C
=$3d						CHAR_F3 = $3D
=$3e						CHAR_F4 = $3E
=$3f						CHAR_F5 = $3F
=$40						CHAR_F6 = $40
=$41						CHAR_F7 = $41
=$42						CHAR_F8 = $42
=$43						CHAR_F9 = $43
=$44						CHAR_F10 = $44
=$57						CHAR_F11 = $57
=$58						CHAR_F12 = $58
=$39						SCAN_SP = $39
=$1c						SCAN_CR = $1C

;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/simulator_inc.asm


;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					COLORBEGIN       = $000022 ;3 Byte, address of the color screen
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000063					EVID_COLS_VISIBLE     = $000063 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000065					EVID_COLS_PER_LINE    = $000065 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000067					EVID_LINES_VISIBLE    = $000067 ;2 Bytes The number of rows visible on the screen. Default=25
=$000069					EVID_LINES_MAX        = $000069 ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006b					EVID_CURSORPOS        = $00006B ;3 Bytes The next character written to the screen will be written in this location.
=$00006e					EVID_CURSORX          = $00006E ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000070					EVID_CURSORY          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURCOLOR         = $000072 ;1 Byte Color of next character to be printed to the screen.
=$000073					EVID_COLORBEGIN       = $000073 ;
=$000076					EVID_COLORPOS         = $000076 ;3 Byte address of cursor's position in the color matrix
=$000079					EVID_TMPPTR1          = $000079 ; 4 byte temporary pointer
=$00007d					EVID_PRESENT          = $00007D ;1 Byte: is the EVID present?
=$000098					TEXT_SRC_PTR_L   = $000098
=$00009a					TEXT_SRC_PTR_H   = $00009A
=$00009c					TEXT_DST_PTR_L   = $00009C
=$00009e					TEXT_DST_PTR_H   = $00009E
=$0000a0					TEXT_INDEX       = $0000A0
=$0000a0					MOD_SELECT_L     = $0000A0
=$0000a2					MOD_SELECT_H     = $0000A2
=$0000a2					TEXT_CURSOR_X    = $0000A2
=$0000a4					TEXT_CURSOR_Y    = $0000A4
=$0000a6					LINE_INDEX       = $0000A6
=$0000a8					COLOR_DST_PTR_L  = $0000A8
=$0000aa					COLOR_DST_PTR_H  = $0000AA
=$0000b0					MODEL            = $0000B0
=$0000e0					MOUSE_IDX        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000e6					MOUSE_BUTTONS    = $0000E6
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$0000f0					INTERRUPT_STATE  = $0000F0      ; 1 byte: current state of the boot menu color cycler
=$0000f1					INTERRUPT_COUNT  = $0000F1      ; 1 byte: counter for the boot menu color cycler
=$0000f2					IRQ_COLOR_CHOICE = $0000F2      ; 1 byte: index of the color to cycle in the boot menu
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000370					DOS_BLOCK_SIZE   = $000370      ; 4 bytes - the size of a block to load (in bytes)
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KBD_VARS = $000F00
=$000f00					KBD_STATE           = $000F00   ; 1 byte - The state of the keyboard controller state machine
=$000f01					KBD_SC_BUF          = $000F01   ; 16 bytes - Buffer for keyboard scancodes read
=$000f11					KBD_SC_HEAD         = $000F11   ; 1 byte - Index of the first scancode cell to write to
=$000f12					KBD_CHAR_BUF        = $000F12   ; 16 bytes - Character buffer
=$000f22					KBD_CHAR_HEAD       = $000F22   ; 1 byte - Number of characters in the character buffer
=$000f23					KBD_MODIFIERS       = $000F23   ; 1 byte - State of the modifier keys
=$000f24					KBD_LOCKS           = $000F24   ; 1 byte - State of the lock keys: Caps, Num, Scroll
=$000f25					KBD_TBL_UNMOD       = $000F25   ; 4 bytes - Pointer to the scan code translation table for unmodified keys
=$000f29					KBD_TBL_SHIFT       = $000F29   ; 4 bytes - Pointer to the scan code translation table for shifted keys
=$000f2d					KBD_TBL_CTRL        = $000F2D   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL
=$000f31					KBD_TBL_LOCK        = $000F31   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
=$000f35					KBD_TBL_LOCK_SHIFT  = $000F35   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
=$000f39					KBD_TBL_CTRL_SHIFT  = $000F39   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL and SHIFT
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$38ff00					        ISR_BEGIN        = $38FF00 ; Byte  Beginning of CPU vectors in Direct page
=$38ff00					        HRESET           = $38FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$38ff10					        HCOP             = $38FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$38ff20					        HBRK             = $38FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$38ff30					        HABORT           = $38FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$38ff40					        HNMI             = $38FF40 ;32 Bytes Handle NMI
=$38ff60					        HIRQ             = $38FF60 ;32 Bytes Handle IRQ
=$38ff80					        Unused_FF80      = $38FF80 ;End of direct page Interrrupt handlers
=$38ffe0					        VECTORS_BEGIN    = $38FFE0 ;0 Byte  Interrupt vectors
=$38ffe0					        JMP_READY        = $38FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$38ffe4					        VECTOR_COP       = $38FFE4 ;2 Bytes Native COP Interrupt vector
=$38ffe6					        VECTOR_BRK       = $38FFE6 ;2 Bytes Native BRK Interrupt vector
=$38ffe8					        VECTOR_ABORT     = $38FFE8 ;2 Bytes Native ABORT Interrupt vector
=$38ffea					        VECTOR_NMI       = $38FFEA ;2 Bytes Native NMI Interrupt vector
=$38ffec					        VECTOR_RESET     = $38FFEC ;2 Bytes Unused (Native RESET vector)
=$38ffee					        VECTOR_IRQ       = $38FFEE ;2 Bytes Native IRQ Vector
=$38fff0					        RETURN           = $38FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$38fff4					        VECTOR_ECOP      = $38FFF4 ;2 Bytes Emulation mode interrupt handler
=$38fff6					        VECTOR_EBRK      = $38FFF6 ;2 Bytes Emulation mode interrupt handler
=$38fff8					        VECTOR_EABORT    = $38FFF8 ;2 Bytes Emulation mode interrupt handler
=$38fffa					        VECTOR_ENMI      = $38FFFA ;2 Bytes Emulation mode interrupt handler
=$38fffc					        VECTOR_ERESET    = $38FFFC ;2 Bytes Emulation mode interrupt handler
=$38fffe					        VECTOR_EIRQ      = $38FFFE ;2 Bytes Emulation mode interrupt handler
=$400000					        VECTORS_END      = $400000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/page_00_data.asm

>380000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/page_00_code.asm

.38ff00		18		clc		RHRESET         CLC
.38ff01		fb		xce		                XCE
.38ff02		5c 00 10 00	jmp $001000	                JML BOOT
.38ff10						RHCOP
.38ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff12		8b		phb		                PHB
.38ff13		0b		phd		                PHD
.38ff14		48		pha		                PHA
.38ff15		da		phx		                PHX
.38ff16		5a		phy		                PHY
.38ff17		5c 08 10 00	jmp $001008	                JML BREAK
.38ff20						RHBRK
.38ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff22		8b		phb		                PHB
.38ff23		0b		phd		                PHD
.38ff24		48		pha		                PHA
.38ff25		da		phx		                PHX
.38ff26		5a		phy		                PHY
.38ff27		5c 08 10 00	jmp $001008	                JML BREAK
.38ff30						RHABORT
.38ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff32		8b		phb		                PHB
.38ff33		0b		phd		                PHD
.38ff34		48		pha		                PHA
.38ff35		da		phx		                PHX
.38ff36		5a		phy		                PHY
.38ff37		5c 08 10 00	jmp $001008	                JML BREAK
.38ff40						 RHNMI
.38ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff42		8b		phb		                PHB
.38ff43		0b		phd		                PHD
.38ff44		48		pha		                PHA
.38ff45		da		phx		                PHX
.38ff46		5a		phy		                PHY
.38ff47		22 96 19 38	jsl $381996	                JSL NMI_HANDLER
.38ff4b		7a		ply		                PLY
.38ff4c		fa		plx		                PLX
.38ff4d		68		pla		                PLA
.38ff4e		2b		pld		                PLD
.38ff4f		ab		plb		                PLB
.38ff50		40		rti		                RTI
.38ff60						RHIRQ
.38ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.38ff62		8b		phb		                PHB
.38ff63		0b		phd		                PHD
.38ff64		48		pha		                PHA
.38ff65		da		phx		                PHX
.38ff66		5a		phy		                PHY
.38ff67		22 c0 17 38	jsl $3817c0	                JSL IRQ_HANDLER
.38ff6b		7a		ply		                PLY
.38ff6c		fa		plx		                PLX
.38ff6d		68		pla		                PLA
.38ff6e		2b		pld		                PLD
.38ff6f		ab		plb		                PLB
.38ff70		40		rti		                RTI
.38ffe0		5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>38ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>38ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>38ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>38ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>38ffec		00 00				                .word $0000    ; FFEC
>38ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.38fff0		5c 13 07 39	jmp $390713	RRETURN         JML IRETURN
>38fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>38fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>38fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>38fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>38fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>38fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/fdc_inc.asm

=$af13f0					SIO_FDC  = $AF13F0
=$af13f0					SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1					SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2					SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3					SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4					SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4					SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5					SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7					SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7					SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/basic_inc.asm

=$3a0000					    BASIC = $3A0000
=3801092					    MONITOR = BASIC + 4

;******  Return to file: src/kernel.asm


;******  Processing file: src/kernel_jumptable.asm

.381000	1000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	1004	5c a6 05 39	jmp $3905a6	RESTORE         JML IRESTORE
.381008	1008	5c b2 06 39	jmp $3906b2	BREAK           JML IBREAK
.38100c	100c	5c f9 06 39	jmp $3906f9	READY           JML IREADY
.381010	1010	5c 2c 11 39	jmp $39112c	SCINIT          JML ISCINIT
.381014	1014	5c 2d 11 39	jmp $39112d	IOINIT          JML IIOINIT
.381018	1018	5c b5 07 39	jmp $3907b5	PUTC            JML IPUTC
.38101c	101c	5c 9e 07 39	jmp $39079e	PUTS            JML IPUTS
.381020	1020	5c 59 08 39	jmp $390859	PUTB            JML IPUTB
.381024	1024	5c f1 3b 39	jmp $393bf1	PUTBLOCK        JML IPUTBLOCK
.381028	1028	5c 49 6f 39	jmp $396f49	GETSCANCODE     JML KBD_GET_SCANCODE    ; Get the next 8-bit scan code from the keyboard: A = 0 if no scancode present, contains the scancode otherwise
.38102c	102c	5c d9 6f 39	jmp $396fd9	GETLOCKS        JML KBD_GETLOCKS        ; Get the state of the lock keys on the keyboard
.381030	1030	5c 30 11 39	jmp $391130	OPEN            JML IOPEN
.381034	1034	5c 31 11 39	jmp $391131	CLOSE           JML ICLOSE
.381038	1038	5c 14 07 39	jmp $390714	SETIN           JML ISETIN
.38103c	103c	5c 1d 07 39	jmp $39071d	SETOUT          JML ISETOUT
.381040	1040	5c 32 11 39	jmp $391132	GETB            JML IGETB
.381044	1044	5c 8e 3b 39	jmp $393b8e	GETBLOCK        JML IGETBLOCK
.381048	1048	5c 62 07 39	jmp $390762	GETCH           JML IGETCH
.38104c	104c	5c 2f 07 39	jmp $39072f	GETCHW          JML IGETCHW
.381050	1050	5c 26 07 39	jmp $390726	GETCHE          JML IGETCHE
.381054	1054	5c 33 11 39	jmp $391133	GETS            JML IGETS
.381058	1058	5c 34 11 39	jmp $391134	GETLINE         JML IGETLINE
.38105c	105c	5c 35 11 39	jmp $391135	GETFIELD        JML IGETFIELD
.381060	1060	5c 36 11 39	jmp $391136	TRIM            JML ITRIM
.381064	1064	5c 37 11 39	jmp $391137	PRINTC          JML IPRINTC
.381068	1068	5c 38 11 39	jmp $391138	PRINTS          JML IPRINTS
.38106c	106c	5c 5a 08 39	jmp $39085a	PRINTCR         JML IPRINTCR
.381070	1070	5c 39 11 39	jmp $391139	PRINTF          JML IPRINTF
.381074	1074	5c 3a 11 39	jmp $39113a	PRINTI          JML IPRINTI
.381078	1078	5c 0e 09 39	jmp $39090e	PRINTH          JML IPRINTH
.38107c	107c	5c 3b 11 39	jmp $39113b	PRINTAI         JML IPRINTAI
.381080	1080	5c 2b 09 39	jmp $39092b	PRINTAH         JML IPRINTAH
.381084	1084	5c f2 08 39	jmp $3908f2	LOCATE          JML ILOCATE
.381088	1088	5c 3c 11 39	jmp $39113c	PUSHKEY         JML IPUSHKEY
.38108c	108c	5c 3d 11 39	jmp $39113d	PUSHKEYS        JML IPUSHKEYS
.381090	1090	5c ba 08 39	jmp $3908ba	CSRRIGHT        JML ICSRRIGHT
.381094	1094	5c c9 08 39	jmp $3908c9	CSRLEFT         JML ICSRLEFT
.381098	1098	5c d8 08 39	jmp $3908d8	CSRUP           JML ICSRUP
.38109c	109c	5c e7 08 39	jmp $3908e7	CSRDOWN         JML ICSRDOWN
.3810a0	10a0	5c a9 08 39	jmp $3908a9	CSRHOME         JML ICSRHOME
.3810a4	10a4	5c fd 08 39	jmp $3908fd	SCROLLUP        JML ISCROLLUP
.3810a8	10a8	5c 79 09 39	jmp $390979	CLRSCREEN       JML ICLRSCREEN
.3810ac	10ac	5c 24 0a 39	jmp $390a24	INITCHLUT	    JML IINITCHLUT
.3810b0	10b0	5c 4b 0c 39	jmp $390c4b	INITSUPERIO	    JML IINITSUPERIO
.3810b4	10b4	5c 89 6c 39	jmp $396c89	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	10b8	5c 00 77 39	jmp $397700	INITMOUSE       JML IINITMOUSE
.3810bc	10bc	5c 2c 0c 39	jmp $390c2c	INITCURSOR      JML IINITCURSOR
.3810c0	10c0	5c f4 0b 39	jmp $390bf4	INITFONTSET     JML IINITFONTSET
.3810c4	10c4	5c 31 0a 39	jmp $390a31	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	10c8	5c 51 0a 39	jmp $390a51	INITALLLUT      JML IINITALLLUT
.3810cc	10cc	5c 17 0b 39	jmp $390b17	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	10d0	5c 98 0b 39	jmp $390b98	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	10d4	5c f3 0b 39	jmp $390bf3	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810d8	10d8	5c f3 0b 39	jmp $390bf3	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810dc	10dc	5c 65 0d 39	jmp $390d65	INITCODEC       JML IINITCODEC
.3810e0	10e0	5c f4 0d 39	jmp $390df4	RESETCODEC      JML IRESETCODEC
.3810e4	10e4	5c 62 0e 39	jmp $390e62	BMP_PARSER      JML IBMP_PARSER
.3810e8	10e8	5c 17 0e 39	jmp $390e17	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	10ec	5c ba 31 39	jmp $3931ba	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	10f0	5c 62 4c 39	jmp $394c62	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	10f4	5c f5 4c 39	jmp $394cf5	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	10f8	5c 2f 4d 39	jmp $394d2f	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	10fc	5c c8 4d 39	jmp $394dc8	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	1100	5c 63 4d 39	jmp $394d63	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	1104	5c 72 4e 39	jmp $394e72	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	1108	5c 34 4e 39	jmp $394e34	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	110c	5c 6e 4e 39	jmp $394e6e	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	1110	5c 0b 4f 39	jmp $394f0b	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	1114	5c 32 4f 39	jmp $394f32	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	1118	5c 36 4f 39	jmp $394f36	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	111c	5c 26 51 39	jmp $395126	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	1120	5c 64 3b 39	jmp $393b64	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	1124	5c bf 51 39	jmp $3951bf	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	1128	5c 8f 3f 39	jmp $393f8f	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	112c	5c 93 0b 39	jmp $390b93	SETSIZES        JML ISETSIZES       ; Set the size information in the kernel's text screen routines based on the screen configuration
.381130	1130	5c 0e 53 39	jmp $39530e	F_COPY          JML IF_COPY         ; Copy a file
.381134	1134	5c 58 52 39	jmp $395258	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	1138	5c ac 52 39	jmp $3952ac	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.38113c	113c	5c 84 6f 39	jmp $396f84	TESTBREAK       JML KBD_TEST_BREAK  ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
.381140	1140	5c c4 71 39	jmp $3971c4	SETTABLE        JML KBD_SETTABLE    ; Set the keyboard scan code -> character translation tables (B:X points to the new tables)
.381144	1144	5c d0 0b 39	jmp $390bd0	READVRAM        JML IREADVRAM       ; Read a byte from video RAM at B:X
.381148	1148	5c 6c 17 38	jmp $38176c	SETHANDLER      JML ISETHANDLER     ; Set the handler for the interrupt # in A to the FAR routine at Y:X
.38114c	114c	5c 6c 10 39	jmp $39106c	DELAY           JML IDELAY          ; Wait at least Y:X ticks of the system clock.
=$001700					VEC_INT_START = *                           ; Label for the start of the IRQ vectors
.381700	1700	5c 49 5f 39	jmp $395f49	VEC_INT00_SOF   JML FDC_TIME_HANDLE         ; IRQ 0, 0 --- Start Of Frame interrupt
.381704	1704	5c 40 11 39	jmp $391140	VEC_INT01_SOL   JML IRQHANDLESTUB           ; IRQ 0, 1 --- Start Of Line interrupt
.381708	1708	5c 40 11 39	jmp $391140	VEC_INT02_TMR0  JML IRQHANDLESTUB           ; IRQ 0, 2 --- Timer 0 interrupt
.38170c	170c	5c 40 11 39	jmp $391140	VEC_INT03_TMR1  JML IRQHANDLESTUB           ; IRQ 0, 3 --- Timer 1 interrupt
.381710	1710	5c 40 11 39	jmp $391140	VEC_INT04_TMR2  JML IRQHANDLESTUB           ; IRQ 0, 4 --- Timer 2 interrupt
.381714	1714	5c 40 11 39	jmp $391140	VEC_INT05_RTC   JML IRQHANDLESTUB           ; IRQ 0, 5 --- Real Time Clock interrupt
.381718	1718	5c 40 11 39	jmp $391140	VEC_INT06_FDC   JML IRQHANDLESTUB           ; IRQ 0, 6 --- Floppy Drive Controller interrupt
.38171c	171c	5c 1b 78 39	jmp $39781b	VEC_INT07_MOUSE JML MOUSE_INTERRUPT         ; IRQ 0, 7 --- Mouse interrupt
.381720	1720	5c f7 6d 39	jmp $396df7	VEC_INT10_KBD   JML KBD_PROCESS_BYTE        ; IRQ 1, 0 --- Keyboard interrupt
.381724	1724	5c 40 11 39	jmp $391140	VEC_INT11_COL0  JML IRQHANDLESTUB           ; IRQ 1, 1 --- VICKY_II (INT2) Sprite Collision
.381728	1728	5c 40 11 39	jmp $391140	VEC_INT12_COL1  JML IRQHANDLESTUB           ; IRQ 1, 2 --- VICKY_II (INT3) Bitmap Collision
.38172c	172c	5c 40 11 39	jmp $391140	VEC_INT13_COM2  JML IRQHANDLESTUB           ; IRQ 1, 3 --- Serial port #2 interrupt
.381730	1730	5c 40 11 39	jmp $391140	VEC_INT14_COM1  JML IRQHANDLESTUB           ; IRQ 1, 4 --- Serial port #1 interrupt
.381734	1734	5c 40 11 39	jmp $391140	VEC_INT15_MIDI  JML IRQHANDLESTUB           ; IRQ 1, 5 --- MIDI controller interrupt
.381738	1738	5c 40 11 39	jmp $391140	VEC_INT16_LPT   JML IRQHANDLESTUB           ; IRQ 1, 6 --- Parallel port interrupt
.38173c	173c	5c 40 11 39	jmp $391140	VEC_INT17_SDC   JML IRQHANDLESTUB           ; IRQ 1, 7 --- SD Card Controller interrupt (CH376S???)
.381740	1740	5c 40 11 39	jmp $391140	VEC_INT20_OPL   JML IRQHANDLESTUB           ; IRQ 2, 0 --- OPL3
.381744	1744	5c 40 11 39	jmp $391140	VEC_INT21_GABE0 JML IRQHANDLESTUB           ; IRQ 2, 1 --- GABE (INT0) - TBD
.381748	1748	5c 40 11 39	jmp $391140	VEC_INT22_GABE1 JML IRQHANDLESTUB           ; IRQ 2, 2 --- GABE (INT1) - TBD
.38174c	174c	5c 40 11 39	jmp $391140	VEC_INT23_VDMA  JML IRQHANDLESTUB           ; IRQ 2, 3 --- VICKY_II (INT4) - VDMA Interrupt
.381750	1750	5c 40 11 39	jmp $391140	VEC_INT24_COL2  JML IRQHANDLESTUB           ; IRQ 2, 4 --- VICKY_II (INT5) Tile Collision
.381754	1754	5c 40 11 39	jmp $391140	VEC_INT25_GABE2 JML IRQHANDLESTUB           ; IRQ 2, 5 --- GABE (INT2) - TBD
.381758	1758	5c 40 11 39	jmp $391140	VEC_INT26_EXT   JML IRQHANDLESTUB           ; IRQ 2, 6 --- External Expansion
.38175c	175c	5c 40 11 39	jmp $391140	VEC_INT17_SDINS JML IRQHANDLESTUB           ; IRQ 2, 7 --- SDCARD Insertion
.381760	1760	5c 40 11 39	jmp $391140	VEC_INT30_OPN2  JML IRQHANDLESTUB           ; IRQ 3, 0 --- OPN2
.381764	1764	5c 40 11 39	jmp $391140	VEC_INT31_OPM   JML IRQHANDLESTUB           ; IRQ 3, 1 --- OPM
.381768	1768	5c 40 11 39	jmp $391140	VEC_INT32_IDE   JML IRQHANDLESTUB           ; IRQ 3, 2 --- HDD IDE Interrupt

;******  Return to file: src/kernel.asm


;******  Processing file: src/Interrupt_Handler.asm

.38176c						ISETHANDLER
.38176c		8b		phb		                PHB
.38176d		08		php		                PHP
.38176e		48		pha		                PHA             ; begin setdbr macro
.38176f		08		php		                PHP
.381770		e2 20		sep #$20	                SEP #$20        ; set A short
.381772		a9 00		lda #$00	                LDA #0
.381774		48		pha		                PHA
.381775		ab		plb		                PLB
.381776		28		plp		                PLP
.381777		68		pla		                PLA             ; end setdbr macro
.381778		e2 20		sep #$20	                SEP #$20        ; set A short
.38177a		c2 10		rep #$10	                REP #$10        ; set X long
.38177c		48		pha		                PHA                     ; Save the interrupt number
.38177d		5a		phy		                PHY                     ; Save the handler's bank
.38177e		da		phx		                PHX                     ; Save the handler's address
.38177f		f4 00 00	pea #$0000	                PEA #0                  ; Make room for the offset to the vector
.381782						LOCALS
>0001						l_vector        .word ?                 ; Address of vector in bank 0
>0003						l_handler       .dword ?                ; The address of the handler (only 24 bits, really)
>0007						l_number        .byte ?                 ; The interrupt number
.381782		29 30		and #$30	                AND #$30                ; Isolate the block #
.381784		0a		asl a		                ASL A                   ; Multiply by 2 to get the offset to the first vector of the block
.381785		83 01		sta $01,s	                STA l_vector
.381787		a3 07		lda $07,s	                LDA l_number            ; Get the number bank
.381789		29 07		and #$07	                AND #$07                ; Isolate the interrupt number
.38178b		0a		asl a		                ASL A                   ; Multiply by four to get the first byte of that interrupt's vector
.38178c		0a		asl a		                ASL A
.38178d		03 01		ora $01,s	                ORA l_vector            ; Add it to the offset to the block
.38178f		83 01		sta $01,s	                STA l_vector            ; Store back to the vector address
.381791		18		clc		                CLC                     ; Add the address of the start of the interrupt vector table
.381792		a9 00		lda #$00	                LDA #<VEC_INT_START
.381794		63 01		adc $01,s	                ADC l_vector
.381796		83 01		sta $01,s	                STA l_vector
.381798		a9 17		lda #$17	                LDA #>VEC_INT_START
.38179a		63 02		adc $02,s	                ADC l_vector+1
.38179c		83 02		sta $02,s	                STA l_vector+1
.38179e		78		sei		                SEI                     ; Disable the interrupts while we update the vector
.38179f		a0 00 00	ldy #$0000	                LDY #0
.3817a2		a9 5c		lda #$5c	                LDA #$5C                ; Opcode for JML
.3817a4		93 01		sta ($01,s),y	                STA (l_vector),Y        ; Make sure the first byte is a JML instruction
.3817a6		c8		iny		                INY                     ; Move to the low byte of the vector address
.3817a7		a3 03		lda $03,s	                LDA l_handler
.3817a9		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.3817ab		c8		iny		                INY                     ; Move to the high byte of the vector address
.3817ac		a3 04		lda $04,s	                LDA l_handler+1
.3817ae		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.3817b0		c8		iny		                INY                     ; Move to the bank of the vector address
.3817b1		a3 05		lda $05,s	                LDA l_handler+2
.3817b3		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.3817b5		c2 20		rep #$20	                REP #$20        ; set A long
.3817b7		18		clc		                CLC                     ; Clean up the locals off the stack
.3817b8		3b		tsc		                TSC
.3817b9		69 07 00	adc #$0007	                ADC #SIZE(LOCALS)
.3817bc		1b		tcs		                TCS
.3817bd		28		plp		                PLP
.3817be		ab		plb		                PLB
.3817bf		6b		rtl		                RTL
.3817c0						IRQ_HANDLER
.3817c0		08		php		                PHP
.3817c1		e2 20		sep #$20	                SEP #$20        ; set A short
.3817c3		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0     ; Get the block 0 pending interrupts
.3817c7		d0 03		bne $3817cc	                BNE process_reg0
.3817c9		82 80 00	brl $38184c	                BRL CHECK_PENDING_REG1      ; If nothing: skip to block 1
.3817cc						process_reg0
.3817cc		89 01		bit #$01	                BIT #FNX0_INT00_SOF           ; Check to see if the bit is set
.3817ce		f0 0c		beq $3817dc	                BEQ continue            ; If not: skip the rest of this macro
.3817d0		29 01		and #$01	                AND #FNX0_INT00_SOF           ; Mask out all other pending interrupts
.3817d2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.3817d6		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF            ; And call its handler
.3817da		e2 20		sep #$20	                SEP #$20        ; set A short
.3817dc						continue
.3817dc		89 02		bit #$02	                BIT #FNX0_INT01_SOL           ; Check to see if the bit is set
.3817de		f0 0c		beq $3817ec	                BEQ continue            ; If not: skip the rest of this macro
.3817e0		29 02		and #$02	                AND #FNX0_INT01_SOL           ; Mask out all other pending interrupts
.3817e2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.3817e6		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL            ; And call its handler
.3817ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3817ec						continue
.3817ec		89 04		bit #$04	                BIT #FNX0_INT02_TMR0           ; Check to see if the bit is set
.3817ee		f0 0c		beq $3817fc	                BEQ continue            ; If not: skip the rest of this macro
.3817f0		29 04		and #$04	                AND #FNX0_INT02_TMR0           ; Mask out all other pending interrupts
.3817f2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.3817f6		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0            ; And call its handler
.3817fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3817fc						continue
.3817fc		89 08		bit #$08	                BIT #FNX0_INT03_TMR1           ; Check to see if the bit is set
.3817fe		f0 0c		beq $38180c	                BEQ continue            ; If not: skip the rest of this macro
.381800		29 08		and #$08	                AND #FNX0_INT03_TMR1           ; Mask out all other pending interrupts
.381802		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.381806		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1            ; And call its handler
.38180a		e2 20		sep #$20	                SEP #$20        ; set A short
.38180c						continue
.38180c		89 10		bit #$10	                BIT #FNX0_INT04_TMR2           ; Check to see if the bit is set
.38180e		f0 0c		beq $38181c	                BEQ continue            ; If not: skip the rest of this macro
.381810		29 10		and #$10	                AND #FNX0_INT04_TMR2           ; Mask out all other pending interrupts
.381812		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.381816		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2            ; And call its handler
.38181a		e2 20		sep #$20	                SEP #$20        ; set A short
.38181c						continue
.38181c		89 20		bit #$20	                BIT #FNX0_INT05_RTC           ; Check to see if the bit is set
.38181e		f0 0c		beq $38182c	                BEQ continue            ; If not: skip the rest of this macro
.381820		29 20		and #$20	                AND #FNX0_INT05_RTC           ; Mask out all other pending interrupts
.381822		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.381826		22 14 17 00	jsl $001714	                JSL VEC_INT05_RTC            ; And call its handler
.38182a		e2 20		sep #$20	                SEP #$20        ; set A short
.38182c						continue
.38182c		89 40		bit #$40	                BIT #FNX0_INT06_FDC           ; Check to see if the bit is set
.38182e		f0 0c		beq $38183c	                BEQ continue            ; If not: skip the rest of this macro
.381830		29 40		and #$40	                AND #FNX0_INT06_FDC           ; Mask out all other pending interrupts
.381832		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.381836		22 18 17 00	jsl $001718	                JSL VEC_INT06_FDC            ; And call its handler
.38183a		e2 20		sep #$20	                SEP #$20        ; set A short
.38183c						continue
.38183c		89 80		bit #$80	                BIT #FNX0_INT07_MOUSE           ; Check to see if the bit is set
.38183e		f0 0c		beq $38184c	                BEQ continue            ; If not: skip the rest of this macro
.381840		29 80		and #$80	                AND #FNX0_INT07_MOUSE           ; Mask out all other pending interrupts
.381842		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.381846		22 1c 17 00	jsl $00171c	                JSL VEC_INT07_MOUSE            ; And call its handler
.38184a		e2 20		sep #$20	                SEP #$20        ; set A short
.38184c						continue
.38184c						CHECK_PENDING_REG1
.38184c		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1
.381850		d0 03		bne $381855	                BNE process_reg1
.381852		82 80 00	brl $3818d5	                BRL CHECK_PENDING_REG2
.381855						process_reg1
.381855		89 01		bit #$01	                BIT #FNX1_INT00_KBD           ; Check to see if the bit is set
.381857		f0 0c		beq $381865	                BEQ continue            ; If not: skip the rest of this macro
.381859		29 01		and #$01	                AND #FNX1_INT00_KBD           ; Mask out all other pending interrupts
.38185b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38185f		22 20 17 00	jsl $001720	                JSL VEC_INT10_KBD            ; And call its handler
.381863		e2 20		sep #$20	                SEP #$20        ; set A short
.381865						continue
.381865		89 02		bit #$02	                BIT #FNX1_INT01_COL0           ; Check to see if the bit is set
.381867		f0 0c		beq $381875	                BEQ continue            ; If not: skip the rest of this macro
.381869		29 02		and #$02	                AND #FNX1_INT01_COL0           ; Mask out all other pending interrupts
.38186b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38186f		22 24 17 00	jsl $001724	                JSL VEC_INT11_COL0            ; And call its handler
.381873		e2 20		sep #$20	                SEP #$20        ; set A short
.381875						continue
.381875		89 04		bit #$04	                BIT #FNX1_INT02_COL1           ; Check to see if the bit is set
.381877		f0 0c		beq $381885	                BEQ continue            ; If not: skip the rest of this macro
.381879		29 04		and #$04	                AND #FNX1_INT02_COL1           ; Mask out all other pending interrupts
.38187b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38187f		22 28 17 00	jsl $001728	                JSL VEC_INT12_COL1            ; And call its handler
.381883		e2 20		sep #$20	                SEP #$20        ; set A short
.381885						continue
.381885		89 08		bit #$08	                BIT #FNX1_INT03_COM2           ; Check to see if the bit is set
.381887		f0 0c		beq $381895	                BEQ continue            ; If not: skip the rest of this macro
.381889		29 08		and #$08	                AND #FNX1_INT03_COM2           ; Mask out all other pending interrupts
.38188b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38188f		22 2c 17 00	jsl $00172c	                JSL VEC_INT13_COM2            ; And call its handler
.381893		e2 20		sep #$20	                SEP #$20        ; set A short
.381895						continue
.381895		89 10		bit #$10	                BIT #FNX1_INT04_COM1           ; Check to see if the bit is set
.381897		f0 0c		beq $3818a5	                BEQ continue            ; If not: skip the rest of this macro
.381899		29 10		and #$10	                AND #FNX1_INT04_COM1           ; Mask out all other pending interrupts
.38189b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38189f		22 30 17 00	jsl $001730	                JSL VEC_INT14_COM1            ; And call its handler
.3818a3		e2 20		sep #$20	                SEP #$20        ; set A short
.3818a5						continue
.3818a5		89 20		bit #$20	                BIT #FNX1_INT05_MPU401           ; Check to see if the bit is set
.3818a7		f0 0c		beq $3818b5	                BEQ continue            ; If not: skip the rest of this macro
.3818a9		29 20		and #$20	                AND #FNX1_INT05_MPU401           ; Mask out all other pending interrupts
.3818ab		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.3818af		22 34 17 00	jsl $001734	                JSL VEC_INT15_MIDI            ; And call its handler
.3818b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3818b5						continue
.3818b5		89 40		bit #$40	                BIT #FNX1_INT06_LPT           ; Check to see if the bit is set
.3818b7		f0 0c		beq $3818c5	                BEQ continue            ; If not: skip the rest of this macro
.3818b9		29 40		and #$40	                AND #FNX1_INT06_LPT           ; Mask out all other pending interrupts
.3818bb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.3818bf		22 38 17 00	jsl $001738	                JSL VEC_INT16_LPT            ; And call its handler
.3818c3		e2 20		sep #$20	                SEP #$20        ; set A short
.3818c5						continue
.3818c5		89 80		bit #$80	                BIT #FNX1_INT07_SDCARD           ; Check to see if the bit is set
.3818c7		f0 0c		beq $3818d5	                BEQ continue            ; If not: skip the rest of this macro
.3818c9		29 80		and #$80	                AND #FNX1_INT07_SDCARD           ; Mask out all other pending interrupts
.3818cb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.3818cf		22 3c 17 00	jsl $00173c	                JSL VEC_INT17_SDC            ; And call its handler
.3818d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3818d5						continue
.3818d5						CHECK_PENDING_REG2
.3818d5		af 42 01 00	lda $000142	                LDA @l INT_PENDING_REG2
.3818d9		d0 03		bne $3818de	                BNE process_reg2
.3818db		82 80 00	brl $38195e	                BRL CHECK_PENDING_REG3
.3818de						process_reg2
.3818de		89 01		bit #$01	                BIT #FNX2_INT00_OPL3           ; Check to see if the bit is set
.3818e0		f0 0c		beq $3818ee	                BEQ continue            ; If not: skip the rest of this macro
.3818e2		29 01		and #$01	                AND #FNX2_INT00_OPL3           ; Mask out all other pending interrupts
.3818e4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.3818e8		22 40 17 00	jsl $001740	                JSL VEC_INT20_OPL            ; And call its handler
.3818ec		e2 20		sep #$20	                SEP #$20        ; set A short
.3818ee						continue
.3818ee		89 02		bit #$02	                BIT #FNX2_INT01_GABE_INT0           ; Check to see if the bit is set
.3818f0		f0 0c		beq $3818fe	                BEQ continue            ; If not: skip the rest of this macro
.3818f2		29 02		and #$02	                AND #FNX2_INT01_GABE_INT0           ; Mask out all other pending interrupts
.3818f4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.3818f8		22 44 17 00	jsl $001744	                JSL VEC_INT21_GABE0            ; And call its handler
.3818fc		e2 20		sep #$20	                SEP #$20        ; set A short
.3818fe						continue
.3818fe		89 04		bit #$04	                BIT #FNX2_INT02_GABE_INT1           ; Check to see if the bit is set
.381900		f0 0c		beq $38190e	                BEQ continue            ; If not: skip the rest of this macro
.381902		29 04		and #$04	                AND #FNX2_INT02_GABE_INT1           ; Mask out all other pending interrupts
.381904		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381908		22 48 17 00	jsl $001748	                JSL VEC_INT22_GABE1            ; And call its handler
.38190c		e2 20		sep #$20	                SEP #$20        ; set A short
.38190e						continue
.38190e		89 08		bit #$08	                BIT #FNX2_INT03_VDMA           ; Check to see if the bit is set
.381910		f0 0c		beq $38191e	                BEQ continue            ; If not: skip the rest of this macro
.381912		29 08		and #$08	                AND #FNX2_INT03_VDMA           ; Mask out all other pending interrupts
.381914		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381918		22 4c 17 00	jsl $00174c	                JSL VEC_INT23_VDMA            ; And call its handler
.38191c		e2 20		sep #$20	                SEP #$20        ; set A short
.38191e						continue
.38191e		89 10		bit #$10	                BIT #FNX2_INT04_COL2           ; Check to see if the bit is set
.381920		f0 0c		beq $38192e	                BEQ continue            ; If not: skip the rest of this macro
.381922		29 10		and #$10	                AND #FNX2_INT04_COL2           ; Mask out all other pending interrupts
.381924		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381928		22 50 17 00	jsl $001750	                JSL VEC_INT24_COL2            ; And call its handler
.38192c		e2 20		sep #$20	                SEP #$20        ; set A short
.38192e						continue
.38192e		89 20		bit #$20	                BIT #FNX2_INT05_GABE_INT2           ; Check to see if the bit is set
.381930		f0 0c		beq $38193e	                BEQ continue            ; If not: skip the rest of this macro
.381932		29 20		and #$20	                AND #FNX2_INT05_GABE_INT2           ; Mask out all other pending interrupts
.381934		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381938		22 54 17 00	jsl $001754	                JSL VEC_INT25_GABE2            ; And call its handler
.38193c		e2 20		sep #$20	                SEP #$20        ; set A short
.38193e						continue
.38193e		89 40		bit #$40	                BIT #FNX2_INT06_EXT           ; Check to see if the bit is set
.381940		f0 0c		beq $38194e	                BEQ continue            ; If not: skip the rest of this macro
.381942		29 40		and #$40	                AND #FNX2_INT06_EXT           ; Mask out all other pending interrupts
.381944		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381948		22 58 17 00	jsl $001758	                JSL VEC_INT26_EXT            ; And call its handler
.38194c		e2 20		sep #$20	                SEP #$20        ; set A short
.38194e						continue
.38194e		89 80		bit #$80	                BIT #FNX2_INT07_SDCARD_INS           ; Check to see if the bit is set
.381950		f0 0c		beq $38195e	                BEQ continue            ; If not: skip the rest of this macro
.381952		29 80		and #$80	                AND #FNX2_INT07_SDCARD_INS           ; Mask out all other pending interrupts
.381954		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381958		22 5c 17 00	jsl $00175c	                JSL VEC_INT17_SDINS            ; And call its handler
.38195c		e2 20		sep #$20	                SEP #$20        ; set A short
.38195e						continue
.38195e						CHECK_PENDING_REG3
.38195e		af 43 01 00	lda $000143	                LDA @l INT_PENDING_REG3
.381962		f0 30		beq $381994	                BEQ EXIT_IRQ_HANDLE
.381964		89 01		bit #$01	                BIT #FNX3_INT00_OPN2           ; Check to see if the bit is set
.381966		f0 0c		beq $381974	                BEQ continue            ; If not: skip the rest of this macro
.381968		29 01		and #$01	                AND #FNX3_INT00_OPN2           ; Mask out all other pending interrupts
.38196a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38196e		22 60 17 00	jsl $001760	                JSL VEC_INT30_OPN2            ; And call its handler
.381972		e2 20		sep #$20	                SEP #$20        ; set A short
.381974						continue
.381974		89 02		bit #$02	                BIT #FNX3_INT01_OPM           ; Check to see if the bit is set
.381976		f0 0c		beq $381984	                BEQ continue            ; If not: skip the rest of this macro
.381978		29 02		and #$02	                AND #FNX3_INT01_OPM           ; Mask out all other pending interrupts
.38197a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38197e		22 64 17 00	jsl $001764	                JSL VEC_INT31_OPM            ; And call its handler
.381982		e2 20		sep #$20	                SEP #$20        ; set A short
.381984						continue
.381984		89 04		bit #$04	                BIT #FNX3_INT02_IDE           ; Check to see if the bit is set
.381986		f0 0c		beq $381994	                BEQ continue            ; If not: skip the rest of this macro
.381988		29 04		and #$04	                AND #FNX3_INT02_IDE           ; Mask out all other pending interrupts
.38198a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38198e		22 68 17 00	jsl $001768	                JSL VEC_INT32_IDE            ; And call its handler
.381992		e2 20		sep #$20	                SEP #$20        ; set A short
.381994						continue
.381994						EXIT_IRQ_HANDLE
.381994		28		plp		                PLP
.381995		6b		rtl		                RTL
.381996		6b		rtl		NMI_HANDLER     RTL
.381997						HANDLE_TIMER0
.381997		48		pha		                PHA
.381998		08		php		                PHP
.381999		e2 20		sep #$20	                SEP #$20        ; set A short
.38199b		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.38199f		09 80		ora #$80	                ORA #TIMER0TRIGGER
.3819a1		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.3819a5		28		plp		                PLP
.3819a6		68		pla		                PLA
.3819a7		6b		rtl		                RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/keyboard_def.asm

=$af1064					    STATUS_PORT 	= $AF1064
=$af1064					    KBD_STATUS      = $AF1064
=$af1060					    KBD_OUT_BUF 	= $AF1060
=$af1060					    KBD_INPT_BUF	= $AF1060
=$af1064					    KBD_CMD_BUF		= $AF1064
=$af1060					    KBD_DATA_BUF	= $AF1060
=$af1060					    PORT_A		    = $AF1060
=$af1061					    PORT_B			= $AF1061
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=4						CHAN_EVID     = 4           ; ID for the second video port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src/kernel.asm

.390400						IBOOT
.390400		18		clc		                CLC               ; clear the carry flag
.390401		fb		xce		                XCE               ; move carry to emulation flag.
.390402		78		sei		                SEI               ; Disable interrupts
.390403		c2 30		rep #$30	                REP #$30        ; set A&X long
.390405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408		1b		tcs		                TAS
.390409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.390412		54 00 38	mvn #$38,#$00	                MVN $38,$00       ; Or during soft loading of the kernel from the debug port
.390415		48		pha		                PHA             ; begin setdp macro
.390416		08		php		                PHP
.390417		c2 20		rep #$20	                REP #$20        ; set A long
.390419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c		5b		tcd		                TCD
.39041d		28		plp		                PLP
.39041e		68		pla		                PLA             ; end setdp macro
.39041f		e2 20		sep #$20	                SEP #$20        ; set A short
.390421		a2 00 00	ldx #$0000	                LDX #$0000
.390424		a9 00		lda #$00	                LDA #$00
.390426						CLEAR_MEM_LOOP
.390426		95 00		sta $00,x	                STA $0000, X
.390428		e8		inx		                INX
.390429		e0 00 01	cpx #$0100	                CPX #$0100
.39042c		d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e		ea		nop		                NOP
.39042f		a9 ff		lda #$ff	                LDA #$FF
.390431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451		22 4a 0d 39	jsl $390d4a	                JSL INITRTC               ; Initialize the RTC
.390455		e2 20		sep #$20	                SEP #$20        ; set A short
.390457		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.39045b		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.39045d		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.39045f		d0 1e		bne $39047f	                BNE SkipInitExpC100C200
.390461		c2 20		rep #$20	                REP #$20        ; set A long
.390463		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.390467		c9 64 00	cmp #$0064	                CMP #$0064
.39046a		f0 0f		beq $39047b	                BEQ InitC100ESID
.39046c		c9 c8 00	cmp #$00c8	                CMP #$00C8
.39046f		d0 0e		bne $39047f	                BNE SkipInitExpC100C200
.390471		22 ed 61 39	jsl $3961ed	                JSL SIMPLE_INIT_ETHERNET_CTRL
.390475		22 74 62 39	jsl $396274	                JSL INIT_EVID_VID_MODE
.390479		80 04		bra $39047f	                BRA SkipInitExpC100C200
.39047b						InitC100ESID:
.39047b		22 ed 61 39	jsl $3961ed	                JSL SIMPLE_INIT_ETHERNET_CTRL
.39047f						SkipInitExpC100C200:
.39047f		e2 20		sep #$20	                SEP #$20        ; set A short
.390481		c2 10		rep #$10	                REP #$10        ; set X long
.390483		a9 9f		lda #$9f	                LDA #$9F              ; Channel 1 - Full Atteniation
.390485		8f 00 f1 af	sta $aff100	                STA $AFF100
.390489		a9 bf		lda #$bf	                LDA #$BF              ; Channel 2 - Full Atteniation
.39048b		8f 00 f1 af	sta $aff100	                STA $AFF100
.39048f		a9 df		lda #$df	                LDA #$DF              ; Channel 3 - No Atteniation
.390491		8f 00 f1 af	sta $aff100	                STA $AFF100
.390495		a9 ff		lda #$ff	                LDA #$FF              ; Channel 4 - No Atteniation
.390497		8f 00 f1 af	sta $aff100	                STA $AFF100
.39049b		a9 70		lda #$70	                LDA #$70                  ; Set the default text color to dim white on black
.39049d		85 1e		sta $1e		                STA CURCOLOR
.39049f		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.3904a3		29 01		and #$01	                AND #$01
.3904a5		c9 01		cmp #$01	                CMP #$01
.3904a7		d0 14		bne $3904bd	                BNE Alreadyin640480Mode
.3904a9		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904ad		29 fc		and #$fc	                AND #$FC
.3904af		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904b3		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904b7		09 01		ora #$01	                ORA #$01
.3904b9		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904bd						Alreadyin640480Mode
.3904bd		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904c1		29 fc		and #$fc	                AND #$FC
.3904c3		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.3904c7		a9 00		lda #$00	                LDA #0
.3904c9		22 38 10 00	jsl $001038	                JSL SETIN
.3904cd		22 3c 10 00	jsl $00103c	                JSL SETOUT
.3904d1		22 e2 63 39	jsl $3963e2	                JSL ANSI_INIT
.3904d5		22 2c 11 00	jsl $00112c	                JSL SETSIZES
.3904d9		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.3904dd		c2 30		rep #$30	                REP #$30        ; set A&X long
.3904df		22 b0 10 00	jsl $0010b0	                JSL INITSUPERIO
.3904e3		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.3904e7		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.3904eb		22 0d 0c 39	jsl $390c0d	                JSL INITMOUSEPOINTER
.3904ef		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.3904f3		a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904f6		22 26 54 39	jsl $395426	                JSL UART_SELECT
.3904fa		22 92 54 39	jsl $395492	                JSL UART_INIT
.3904fe		a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.390501		22 26 54 39	jsl $395426	                JSL UART_SELECT
.390505		22 92 54 39	jsl $395492	                JSL UART_INIT
.390509		c2 20		rep #$20	                REP #$20        ; set A long
.39050b		48		pha		                PHA             ; begin setdp macro
.39050c		08		php		                PHP
.39050d		c2 20		rep #$20	                REP #$20        ; set A long
.39050f		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390512		5b		tcd		                TCD
.390513		28		plp		                PLP
.390514		68		pla		                PLA             ; end setdp macro
.390515		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD        ; Initialize the keyboard
.390519		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE           ; Initialize the mouse
.39051d		58		cli		                CLI
.39051e		a9 00 00	lda #$0000	                LDA #0
.390521		8d e0 00	sta $00e0	                STA @w MOUSE_IDX
.390524		e2 20		sep #$20	                SEP #$20        ; set A short
.390526		c2 10		rep #$10	                REP #$10        ; set X long
.390528		48		pha		                PHA             ; begin setdbr macro
.390529		08		php		                PHP
.39052a		e2 20		sep #$20	                SEP #$20        ; set A short
.39052c		a9 39		lda #$39	                LDA #`greet_msg
.39052e		48		pha		                PHA
.39052f		ab		plb		                PLB
.390530		28		plp		                PLP
.390531		68		pla		                PLA             ; end setdbr macro
.390532		a2 00 00	ldx #$0000	                LDX #0
.390535		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.390539		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.39053d		e8		inx		                INX
.39053e		e0 00 10	cpx #$1000	                CPX #$1000
.390541		d0 f2		bne $390535	                BNE jmpcopy
.390543						retry_boot
.390543		22 bd 3e 39	jsl $393ebd	                JSL DOS_INIT            ; Initialize the "disc operating system"
.390547		22 66 78 39	jsl $397866	                JSL BOOT_SOUND          ; Play the boot sound
.39054b		22 3a 06 39	jsl $39063a	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.39054f		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN           ; Clear Screen and Set a standard color in Color Memory
.390553		22 a0 10 00	jsl $0010a0	                JSL CSRHOME             ; Move to the home position
.390557						greet
.390557		c2 30		rep #$30	                REP #$30        ; set A&X long
.390559		48		pha		                PHA             ; begin setdbr macro
.39055a		08		php		                PHP
.39055b		e2 20		sep #$20	                SEP #$20        ; set A short
.39055d		a9 39		lda #$39	                LDA #`greet_msg
.39055f		48		pha		                PHA
.390560		ab		plb		                PLB
.390561		28		plp		                PLP
.390562		68		pla		                PLA             ; end setdbr macro
.390563		a2 09 79	ldx #$7909	                LDX #<>greet_msg
.390566		22 95 07 39	jsl $390795	                JSL IPRINT              ; print the first line
.39056a		22 a4 09 39	jsl $3909a4	                JSL ICOLORFLAG          ; This is to set the color memory for the text logo
.39056e		22 54 63 39	jsl $396354	                JSL EVID_GREET          ; Print the EVID greeting, if the EVID card is installed
.390572		c2 30		rep #$30	                REP #$30        ; set A&X long
.390574		a9 ff fe	lda #$feff	                LDA #STACK_END          ; We are the root, let's make sure from now on, that we start clean
.390577		1b		tcs		                TAS
.390578		e2 20		sep #$20	                SEP #$20        ; set A short
.39057a		c2 10		rep #$10	                REP #$10        ; set X long
.39057c		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.390580		c9 39		cmp #$39	                CMP #SCAN_SP          ; Did the user press SPACE?
.390582		f0 10		beq $390594	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.390584		c9 1c		cmp #$1c	                CMP #SCAN_CR          ; Did the user press RETURN?
.390586		f0 1e		beq $3905a6	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.390588		c9 3b		cmp #$3b	                CMP #CHAR_F1          ; Did the user press F1?
.39058a		f0 62		beq $3905ee	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.39058c		c9 3c		cmp #$3c	                CMP #CHAR_F2          ; Did the user press F2?
.39058e		f0 1d		beq $3905ad	                BEQ BOOTSDC           ; Yes: boot via the SDC
.390590		c9 3d		cmp #$3d	                CMP #CHAR_F3          ; Did the user press F3?
.390592		f0 39		beq $3905cd	                BEQ BOOTIDE           ; Yes: boot via the IDE
.390594		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.390598		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.39059a		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.39059c		f0 2f		beq $3905cd	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.39059e		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.3905a0		f0 0b		beq $3905ad	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.3905a2		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.3905a4		f0 48		beq $3905ee	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.3905a6						IRESTORE
.3905a6		5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.3905aa		ea		nop		CREDIT_LOCK     NOP
.3905ab		80 fd		bra $3905aa	                BRA CREDIT_LOCK
.3905ad		a2 a3 7d	ldx #$7da3	BOOTSDC         LDX #<>sdc_boot
.3905b0		22 95 07 39	jsl $390795	                JSL IPRINT
.3905b4		e2 20		sep #$20	                SEP #$20        ; set A short
.3905b6		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905b8		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905bc		22 8f 3f 39	jsl $393f8f	                JSL DOS_MOUNT         ; Mount the SDC
.3905c0		90 06		bcc $3905c8	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905c2		22 4a 41 39	jsl $39414a	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905c6		80 de		bra $3905a6	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905c8		a2 27 7d	ldx #$7d27	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905cb		80 40		bra $39060d	                BRA PR_BOOT_ERROR
.3905cd		a2 ba 7d	ldx #$7dba	BOOTIDE         LDX #<>ide_boot
.3905d0		22 95 07 39	jsl $390795	                JSL IPRINT
.3905d4		e2 20		sep #$20	                SEP #$20        ; set A short
.3905d6		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905d8		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905dc		22 8f 3f 39	jsl $393f8f	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905e0		90 07		bcc $3905e9	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905e2		22 4a 41 39	jsl $39414a	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905e6		82 bd ff	brl $3905a6	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905e9		a2 43 7d	ldx #$7d43	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905ec		80 1f		bra $39060d	                BRA PR_BOOT_ERROR
.3905ee		a2 8c 7d	ldx #$7d8c	BOOTFLOPPY      LDX #<>fdc_boot
.3905f1		22 95 07 39	jsl $390795	                JSL IPRINT
.3905f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3905f7		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905f9		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905fd		22 dc 5d 39	jsl $395ddc	                JSL FDC_MOUNT         ; Mount the floppy drive
.390601		90 07		bcc $39060a	                BCC fdc_error         ; Print an error message if couldn't get anything
.390603		22 4a 41 39	jsl $39414a	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.390607		82 9c ff	brl $3905a6	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.39060a		a2 66 7d	ldx #$7d66	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.39060d		22 95 07 39	jsl $390795	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.390611		a2 02 7d	ldx #$7d02	                LDX #<>boot_retry     ; Print the boot retry prompt
.390614		22 95 07 39	jsl $390795	                JSL IPRINT
.390618		22 2f 07 39	jsl $39072f	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.39061c		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.39061e		d0 03		bne $390623	                BNE chk_r_lc
.390620		82 20 ff	brl $390543	                BRL retry_boot        ; Yes: retry the boot sequence
.390623		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.390625		d0 03		bne $39062a	                BNE chk_b_lc
.390627		82 19 ff	brl $390543	                BRL retry_boot
.39062a		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.39062c		d0 03		bne $390631	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.39062e		82 75 ff	brl $3905a6	                BRL BOOTBASIC
.390631						chk_b_lc_not:
.390631		c9 42		cmp #$42	                CMP #'B'
.390633		d0 03		bne $390638	                BNE chk_b_lc_not0
.390635		82 6e ff	brl $3905a6	                BRL BOOTBASIC
.390638						chk_b_lc_not0:
.390638		80 de		bra $390618	                BRA boot_wait_key     ; No: keep waiting
.39063a						BOOT_MENU
.39063a		8b		phb		                PHB
.39063b		08		php		                PHP
.39063c		e2 20		sep #$20	                SEP #$20        ; set A short
.39063e		c2 10		rep #$10	                REP #$10        ; set X long
.390640		a9 39		lda #$39	                LDA #`bootmenu          ; Point DBR:X to the boot menu
.390642		48		pha		                PHA
.390643		ab		plb		                PLB
.390644		a2 7d 06	ldx #$067d	                LDX #<>bootmenu
.390647		22 1c 10 00	jsl $00101c	                JSL PUTS                ; Display the boot menu
.39064b		c2 10		rep #$10	                REP #$10        ; set X long
.39064d		a0 e8 03	ldy #$03e8	                LDY #1000               ; Number of cycles we'll wait... total wait time is about 30s (ish)
.390650		e2 20		sep #$20	                SEP #$20        ; set A short
.390652		a2 64 00	ldx #$0064	wait_key        LDX #100
.390655		22 5f 10 39	jsl $39105f	                JSL ILOOP_MS            ; Wait ...
.390659		88		dey		                DEY                     ; Count down the tenths of seconds
.39065a		f0 1c		beq $390678	                BEQ timeout             ; If we've got to 0, we're done
.39065c		22 28 10 00	jsl $001028	                JSL GETSCANCODE         ; Try to get a character
.390660		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.390662		f0 ee		beq $390652	                BEQ wait_key            ; No: keep waiting until timeout
.390664		c9 3b		cmp #$3b	                CMP #CHAR_F1            ; Did the user press F1?
.390666		f0 12		beq $39067a	                BEQ return              ; Yes: return it
.390668		c9 3c		cmp #$3c	                CMP #CHAR_F2            ; Did the user press F2?
.39066a		f0 0e		beq $39067a	                BEQ return              ; Yes: return it
.39066c		c9 3d		cmp #$3d	                CMP #CHAR_F3            ; Did the user press F3?
.39066e		f0 0a		beq $39067a	                BEQ return              ; Yes: return it
.390670		c9 1c		cmp #$1c	                CMP #SCAN_CR            ; Did the user press CR?
.390672		f0 06		beq $39067a	                BEQ return              ; Yes: return it
.390674		c9 39		cmp #$39	                CMP #SCAN_SP            ; Did the user press SPACE?
.390676		d0 da		bne $390652	                BNE wait_key            ; No: keep waiting
.390678		a9 00		lda #$00	timeout         LDA #0                  ; Return 0 for a timeout / SPACE
.39067a		28		plp		return          PLP
.39067b		ab		plb		                PLB
.39067c		6b		rtl		                RTL
>39067d		46 31 3d 46 44 43 2c 20		  bootmenu        .null "F1=FDC, F2=SDC, F3=IDE, RETURN=BASIC, SPACE=DEFAULT", CHAR_CR
>390685		46 32 3d 53 44 43 2c 20 46 33 3d 49 44 45 2c 20
>390695		52 45 54 55 52 4e 3d 42 41 53 49 43 2c 20 53 50
>3906a5		41 43 45 3d 44 45 46 41 55 4c 54 0d 00
.3906b2						IBREAK
.3906b2		48		pha		                PHA             ; begin setdp macro
.3906b3		08		php		                PHP
.3906b4		c2 20		rep #$20	                REP #$20        ; set A long
.3906b6		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3906b9		5b		tcd		                TCD
.3906ba		28		plp		                PLP
.3906bb		68		pla		                PLA             ; end setdp macro
.3906bc		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3906bd		8f 48 02 00	sta $000248	                STA CPUY
.3906c1		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3906c2		8f 46 02 00	sta $000246	                STA CPUX
.3906c6		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3906c7		8f 44 02 00	sta $000244	                STA CPUA
.3906cb		68		pla		                PLA
.3906cc		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3906d0		e2 20		sep #$20	                SEP #$20        ; set A short
.3906d2		68		pla		                PLA             ; Pull Data Bank (8 bits)
.3906d3		8f 4e 02 00	sta $00024e	                STA CPUDBR
.3906d7		68		pla		                PLA             ; Pull Flags (8 bits)
.3906d8		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3906dc		c2 20		rep #$20	                REP #$20        ; set A long
.3906de		68		pla		                PLA             ; Pull Program Counter (16 bits)
.3906df		8f 40 02 00	sta $000240	                STA CPUPC
.3906e3		e2 20		sep #$20	                SEP #$20        ; set A short
.3906e5		68		pla		                PLA             ; Pull Program Bank (8 bits)
.3906e6		8f 42 02 00	sta $000242	                STA CPUPBR
.3906ea		c2 20		rep #$20	                REP #$20        ; set A long
.3906ec		3b		tsc		                TSA             ; Get the stack
.3906ed		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3906f1		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3906f4		1b		tcs		                TAS
.3906f5		5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3906f9						IREADY
.3906f9		48		pha		                PHA             ; begin setdbr macro
.3906fa		08		php		                PHP
.3906fb		e2 20		sep #$20	                SEP #$20        ; set A short
.3906fd		a9 39		lda #$39	                LDA #`ready_msg
.3906ff		48		pha		                PHA
.390700		ab		plb		                PLB
.390701		28		plp		                PLP
.390702		68		pla		                PLA             ; end setdbr macro
.390703		e2 20		sep #$20	                SEP #$20        ; set A short
.390705		a2 d5 7d	ldx #$7dd5	                LDX #<>ready_msg
.390708		22 95 07 39	jsl $390795	                JSL IPRINT
.39070c						IREADYWAIT
.39070c		22 26 07 39	jsl $390726	                JSL IGETCHE
.390710		80 fa		bra $39070c	                BRA IREADYWAIT
.390712		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390713		db		stp		IRETURN         STP
.390714		08		php		ISETIN          PHP
.390715		e2 20		sep #$20	                SEP #$20        ; set A short
.390717		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.39071b		28		plp		                PLP
.39071c		6b		rtl		                RTL
.39071d		08		php		ISETOUT         PHP
.39071e		e2 20		sep #$20	                SEP #$20        ; set A short
.390720		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.390724		28		plp		                PLP
.390725		6b		rtl		                RTL
.390726		22 4c 10 00	jsl $00104c	IGETCHE         JSL GETCHW
.39072a		22 18 10 00	jsl $001018	                JSL PUTC
.39072e		6b		rtl		                RTL
.39072f						IGETCHW
.39072f		da		phx		                PHX
.390730		5a		phy		                PHY
.390731		8b		phb		                PHB
.390732		0b		phd		                PHD
.390733		08		php		                PHP
.390734		e2 20		sep #$20	                SEP #$20        ; set A short
.390736		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.39073a		f0 1b		beq $390757	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.39073c		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39073e		f0 0d		beq $39074d	                BEQ getc_uart       ; Yes: handle reading from the UART
.390740		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390742		f0 09		beq $39074d	                BEQ getc_uart       ; Yes: handle reading from the UART
.390744		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390746		28		plp		                PLP
.390747		38		sec		                SEC                 ; And return carry set
.390748		2b		pld		                PLD
.390749		ab		plb		                PLB
.39074a		7a		ply		                PLY
.39074b		fa		plx		                PLX
.39074c		6b		rtl		                RTL
.39074d		22 26 54 39	jsl $395426	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390751		22 b9 54 39	jsl $3954b9	                JSL UART_GETC       ; Get the charater from the COM port
.390755		80 04		bra $39075b	                BRA done
.390757		22 2c 70 39	jsl $39702c	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.39075b		28		plp		done            PLP
.39075c		18		clc		                CLC                 ; Return carry clear for valid data
.39075d		2b		pld		                PLD
.39075e		ab		plb		                PLB
.39075f		7a		ply		                PLY
.390760		fa		plx		                PLX
.390761		6b		rtl		                RTL
.390762						IGETCH
.390762		da		phx		                PHX
.390763		5a		phy		                PHY
.390764		8b		phb		                PHB
.390765		0b		phd		                PHD
.390766		08		php		                PHP
.390767		e2 20		sep #$20	                SEP #$20        ; set A short
.390769		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.39076d		f0 1b		beq $39078a	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.39076f		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390771		f0 0d		beq $390780	                BEQ getc_uart       ; Yes: handle reading from the UART
.390773		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390775		f0 09		beq $390780	                BEQ getc_uart       ; Yes: handle reading from the UART
.390777		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390779		28		plp		                PLP
.39077a		38		sec		                SEC                 ; And return carry set
.39077b		2b		pld		                PLD
.39077c		ab		plb		                PLB
.39077d		7a		ply		                PLY
.39077e		fa		plx		                PLX
.39077f		6b		rtl		                RTL
.390780		22 26 54 39	jsl $395426	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390784		22 b9 54 39	jsl $3954b9	                JSL UART_GETC       ; Get the charater from the COM port
.390788		80 04		bra $39078e	                BRA done
.39078a		22 38 70 39	jsl $397038	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.39078e		28		plp		done            PLP
.39078f		18		clc		                CLC                 ; Return carry clear for valid data
.390790		2b		pld		                PLD
.390791		ab		plb		                PLB
.390792		7a		ply		                PLY
.390793		fa		plx		                PLX
.390794		6b		rtl		                RTL
.390795		22 1c 10 00	jsl $00101c	IPRINT          JSL PUTS
.390799		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.39079d		6b		rtl		                RTL
.39079e		48		pha		IPUTS           PHA
.39079f		08		php		                PHP
.3907a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3907a2		c2 10		rep #$10	                REP #$10        ; set X long
.3907a4		bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.3907a7		f0 08		beq $3907b1	                BEQ iputs_done
.3907a9		22 18 10 00	jsl $001018	iputs2          JSL PUTC
.3907ad		e8		inx		iputs3          INX
.3907ae		4c a4 07	jmp $3907a4	                JMP iputs1
.3907b1		e8		inx		iputs_done      INX
.3907b2		28		plp		                PLP
.3907b3		68		pla		                PLA
.3907b4		6b		rtl		                RTL
.3907b5						IPUTC
.3907b5		da		phx		                PHX
.3907b6		5a		phy		                PHY
.3907b7		0b		phd		                PHD
.3907b8		8b		phb		                PHB
.3907b9		08		php		                PHP                 ; stash the flags (we'll be changing M)
.3907ba		48		pha		                PHA             ; begin setdp macro
.3907bb		08		php		                PHP
.3907bc		c2 20		rep #$20	                REP #$20        ; set A long
.3907be		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907c1		5b		tcd		                TCD
.3907c2		28		plp		                PLP
.3907c3		68		pla		                PLA             ; end setdp macro
.3907c4		48		pha		                PHA             ; begin setdbr macro
.3907c5		08		php		                PHP
.3907c6		e2 20		sep #$20	                SEP #$20        ; set A short
.3907c8		a9 00		lda #$00	                LDA #0
.3907ca		48		pha		                PHA
.3907cb		ab		plb		                PLB
.3907cc		28		plp		                PLP
.3907cd		68		pla		                PLA             ; end setdbr macro
.3907ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3907d0		c2 10		rep #$10	                REP #$10        ; set X long
.3907d2		48		pha		                PHA                 ; Save the character to print
.3907d3		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3907d7		f0 1a		beq $3907f3	                BEQ putc_ansi       ; If it's 0: print to the screen
.3907d9		c9 04		cmp #$04	                CMP #CHAN_EVID      ; Check to see if it's the second video port
.3907db		f0 16		beq $3907f3	                BEQ putc_ansi       ; Yes: handle printing to the second video port
.3907dd		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907df		f0 07		beq $3907e8	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907e1		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907e3		f0 03		beq $3907e8	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907e5		68		pla		                PLA                 ; Otherwise, just exit
.3907e6		80 10		bra $3907f8	                BRA done
.3907e8		22 26 54 39	jsl $395426	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3907ec		68		pla		                PLA                 ; Recover the character to send
.3907ed		22 da 54 39	jsl $3954da	                JSL UART_PUTC       ; Send the character
.3907f1		80 05		bra $3907f8	                BRA done
.3907f3		68		pla		putc_ansi       PLA                 ; Recover the character to send
.3907f4		22 21 66 39	jsl $396621	                JSL ANSI_PUTC       ; Print to the current selected ANSI screen
.3907f8		28		plp		done            PLP
.3907f9		ab		plb		                PLB
.3907fa		2b		pld		                PLD
.3907fb		7a		ply		                PLY
.3907fc		fa		plx		                PLX
.3907fd		6b		rtl		                RTL
.3907fe		da		phx		SCRSHIFTLL      PHX
.3907ff		5a		phy		                PHY
.390800		48		pha		                PHA
.390801		0b		phd		                PHD
.390802		08		php		                PHP
.390803		48		pha		                PHA             ; begin setdp macro
.390804		08		php		                PHP
.390805		c2 20		rep #$20	                REP #$20        ; set A long
.390807		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39080a		5b		tcd		                TCD
.39080b		28		plp		                PLP
.39080c		68		pla		                PLA             ; end setdp macro
.39080d		c2 30		rep #$30	                REP #$30        ; set A&X long
.39080f		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390811		a8		tay		                TAY                 ; Set it as the destination
.390812		aa		tax		                TAX
.390813		e8		inx		                INX                 ; And set the next cell as the source
.390814		18		clc		                CLC                 ; Calculate the length of the block to move
.390815		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.390817		e5 1a		sbc $1a		                SBC CURSORX
.390819		54 af af	mvn #$af,#$af	                MVN $AF, $AF        ; And move the block
.39081c		28		plp		                PLP
.39081d		2b		pld		                PLD
.39081e		68		pla		                PLA
.39081f		7a		ply		                PLY
.390820		fa		plx		                PLX
.390821		6b		rtl		                RTL
.390822		da		phx		SCRSHIFTLR      PHX
.390823		48		pha		                PHA
.390824		0b		phd		                PHD
.390825		08		php		                PHP
.390826		48		pha		                PHA             ; begin setdp macro
.390827		08		php		                PHP
.390828		c2 20		rep #$20	                REP #$20        ; set A long
.39082a		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39082d		5b		tcd		                TCD
.39082e		28		plp		                PLP
.39082f		68		pla		                PLA             ; end setdp macro
.390830		c2 30		rep #$30	                REP #$30        ; set A&X long
.390832		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.390834		1a		inc a		                INC A
.390835		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.390837		b0 1b		bcs $390854	                BGE done            ; Yes: just skip the whole thing
.390839		38		sec		                SEC                 ; Calculate the length of the block to move
.39083a		a5 0f		lda $0f		                LDA COLS_VISIBLE
.39083c		e5 1a		sbc $1a		                SBC CURSORX
.39083e		1a		inc a		                INC A
.39083f		18		clc		                CLC
.390840		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.390842		3a		dec a		                DEC A
.390843		a8		tay		                TAY                 ; Make it the destination
.390844		3a		dec a		                DEC A               ; Move to the previous column
.390845		aa		tax		                TAX                 ; Make it the source
.390846		38		sec		                SEC                 ; Calculate the length of the block to move
.390847		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.390849		e5 1a		sbc $1a		                SBC CURSORX
.39084b		44 af af	mvp #$af,#$af	                MVP $AF, $AF        ; And move the block
.39084e		e2 20		sep #$20	                SEP #$20        ; set A short
.390850		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.390852		87 17		sta [$17]	                STA [CURSORPOS]
.390854		28		plp		done            PLP
.390855		2b		pld		                PLD
.390856		68		pla		                PLA
.390857		fa		plx		                PLX
.390858		6b		rtl		                RTL
.390859						IPUTB
.390859		6b		rtl		                RTL
.39085a						IPRINTCR
.39085a		da		phx		                PHX
.39085b		5a		phy		                PHY
.39085c		8b		phb		                PHB
.39085d		0b		phd		                PHD
.39085e		08		php		                PHP
.39085f		48		pha		                PHA             ; begin setdbr macro
.390860		08		php		                PHP
.390861		e2 20		sep #$20	                SEP #$20        ; set A short
.390863		a9 00		lda #$00	                LDA #0
.390865		48		pha		                PHA
.390866		ab		plb		                PLB
.390867		28		plp		                PLP
.390868		68		pla		                PLA             ; end setdbr macro
.390869		48		pha		                PHA             ; begin setdp macro
.39086a		08		php		                PHP
.39086b		c2 20		rep #$20	                REP #$20        ; set A long
.39086d		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390870		5b		tcd		                TCD
.390871		28		plp		                PLP
.390872		68		pla		                PLA             ; end setdp macro
.390873		e2 20		sep #$20	                SEP #$20        ; set A short
.390875		c2 10		rep #$10	                REP #$10        ; set X long
.390877		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.39087b		f0 1c		beq $390899	                BEQ scr_printcr
.39087d		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39087f		f0 06		beq $390887	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390881		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390883		f0 02		beq $390887	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390885		80 1c		bra $3908a3	                BRA done
.390887		22 26 54 39	jsl $395426	uart_printcr    JSL UART_SELECT
.39088b		a9 0d		lda #$0d	                LDA #CHAR_CR
.39088d		22 18 10 00	jsl $001018	                JSL PUTC
.390891		a9 0a		lda #$0a	                LDA #CHAR_LF
.390893		22 18 10 00	jsl $001018	                JSL PUTC
.390897		80 0a		bra $3908a3	                BRA done
.390899		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.39089c		a4 1c		ldy $1c		                LDY CURSORY
.39089e		c8		iny		                INY
.39089f		22 84 10 00	jsl $001084	                JSL LOCATE
.3908a3		28		plp		done            PLP
.3908a4		2b		pld		                PLD
.3908a5		ab		plb		                PLB
.3908a6		7a		ply		                PLY
.3908a7		fa		plx		                PLX
.3908a8		6b		rtl		                RTL
.3908a9		da		phx		ICSRHOME        PHX
.3908aa		5a		phy		                PHY
.3908ab		08		php		                PHP
.3908ac		a2 00 00	ldx #$0000	                LDX #0
.3908af		a0 00 00	ldy #$0000	                LDY #0
.3908b2		22 84 10 00	jsl $001084	                JSL LOCATE
.3908b6		28		plp		                PLP
.3908b7		7a		ply		                PLY
.3908b8		fa		plx		                PLX
.3908b9		6b		rtl		                RTL
.3908ba		da		phx		ICSRRIGHT       PHX
.3908bb		5a		phy		                PHY
.3908bc		48		pha		                PHA
.3908bd		0b		phd		                PHD
.3908be		08		php		                PHP
.3908bf		22 d9 6a 39	jsl $396ad9	                JSL ANSI_CSRRIGHT
.3908c3		28		plp		                PLP
.3908c4		2b		pld		                PLD
.3908c5		68		pla		                PLA
.3908c6		7a		ply		                PLY
.3908c7		fa		plx		                PLX
.3908c8		6b		rtl		                RTL
.3908c9						ICSRLEFT
.3908c9		da		phx		                PHX
.3908ca		5a		phy		                PHY
.3908cb		48		pha		                PHA
.3908cc		0b		phd		                PHD
.3908cd		08		php		                PHP
.3908ce		22 04 6b 39	jsl $396b04	                JSL ANSI_CSRLEFT
.3908d2		28		plp		                PLP
.3908d3		2b		pld		                PLD
.3908d4		68		pla		                PLA
.3908d5		7a		ply		                PLY
.3908d6		fa		plx		                PLX
.3908d7		6b		rtl		                RTL
.3908d8						ICSRUP
.3908d8		da		phx		                PHX
.3908d9		5a		phy		                PHY
.3908da		48		pha		                PHA
.3908db		0b		phd		                PHD
.3908dc		08		php		                PHP
.3908dd		22 22 6b 39	jsl $396b22	                JSL ANSI_CSRUP
.3908e1		28		plp		                PLP
.3908e2		2b		pld		                PLD
.3908e3		68		pla		                PLA
.3908e4		7a		ply		                PLY
.3908e5		fa		plx		                PLX
.3908e6		6b		rtl		                RTL
.3908e7		da		phx		ICSRDOWN        PHX
.3908e8		5a		phy		                PHY
.3908e9		0b		phd		                PHD
.3908ea		22 40 6b 39	jsl $396b40	                JSL ANSI_CSRDOWN
.3908ee		2b		pld		                PLD
.3908ef		7a		ply		                PLY
.3908f0		fa		plx		                PLX
.3908f1		6b		rtl		                RTL
.3908f2		48		pha		ILOCATE         PHA
.3908f3		0b		phd		                PHD
.3908f4		08		php		                PHP
.3908f5		22 63 6b 39	jsl $396b63	                JSL ANSI_LOCATE
.3908f9		28		plp		ilocate_done    PLP
.3908fa		2b		pld		                PLD
.3908fb		68		pla		                PLA
.3908fc		6b		rtl		                RTL
.3908fd						ISCROLLUP
.3908fd		48		pha		                PHA
.3908fe		da		phx		                PHX
.3908ff		5a		phy		                PHY
.390900		8b		phb		                PHB
.390901		0b		phd		                PHD
.390902		08		php		                PHP
.390903		22 c7 6b 39	jsl $396bc7	                JSL ANSI_SCROLLUP
.390907		28		plp		                PLP
.390908		2b		pld		                PLD
.390909		ab		plb		                PLB
.39090a		7a		ply		                PLY
.39090b		fa		plx		                PLX
.39090c		68		pla		                PLA
.39090d		6b		rtl		                RTL
.39090e		08		php		IPRINTH         PHP
.39090f		48		pha		                PHA
.390910						iprinth1
.390910		e2 20		sep #$20	                SEP #$20        ; set A short
.390912		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390915		4a		lsr a		                LSR
.390916		4a		lsr a		                LSR
.390917		4a		lsr a		                LSR
.390918		4a		lsr a		                LSR
.390919		22 68 09 39	jsl $390968	                JSL iprint_digit
.39091d		bd 00 00	lda $0000,x	                LDA #0,b,x
.390920		22 68 09 39	jsl $390968	                JSL iprint_digit
.390924		ca		dex		                DEX
.390925		88		dey		                DEY
.390926		d0 e8		bne $390910	                BNE iprinth1
.390928		68		pla		                PLA
.390929		28		plp		                PLP
.39092a		6b		rtl		                RTL
.39092b						IPRINTAH
.39092b		48		pha		                PHA
.39092c		08		php		                PHP
.39092d		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390931		08		php		                PHP                   ; Get the processor status into A
.390932		e2 20		sep #$20	                SEP #$20        ; set A short
.390934		c2 10		rep #$10	                REP #$10        ; set X long
.390936		68		pla		                PLA
.390937		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390939		c9 20		cmp #$20	                CMP #%00100000
.39093b		f0 14		beq $390951	                BEQ eight_bit
.39093d		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.390941		4a		lsr a		                LSR A
.390942		4a		lsr a		                LSR A
.390943		4a		lsr a		                LSR A
.390944		4a		lsr a		                LSR A
.390945		22 68 09 39	jsl $390968	                JSL iprint_digit      ; And print it
.390949		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.39094d		22 68 09 39	jsl $390968	                JSL iprint_digit      ; And print it
.390951		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390955		4a		lsr a		                LSR A
.390956		4a		lsr a		                LSR A
.390957		4a		lsr a		                LSR A
.390958		4a		lsr a		                LSR A
.390959		22 68 09 39	jsl $390968	                JSL iprint_digit      ; And print it
.39095d		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390961		22 68 09 39	jsl $390968	                JSL iprint_digit      ; And print it
.390965		28		plp		                PLP
.390966		68		pla		                PLA
.390967		6b		rtl		                RTL
.390968		da		phx		iprint_digit    PHX
.390969		c2 20		rep #$20	                REP #$20        ; set A long
.39096b		29 0f 00	and #$000f	                AND #$0F
.39096e		aa		tax		                TAX
.39096f		bf e9 7d 39	lda $397de9,x	                LDA hex_digits,X
.390973		22 b5 07 39	jsl $3907b5	                JSL IPUTC       ; Print the digit
.390977		fa		plx		                PLX
.390978		6b		rtl		                RTL
.390979		48		pha		ICLRSCREEN	    PHA
.39097a		da		phx		                PHX
.39097b		08		php		                PHP
.39097c		22 5c 6c 39	jsl $396c5c	                JSL ANSI_CLRSCREEN
.390980		28		plp		                PLP
.390981		fa		plx		                PLX
.390982		68		pla		                PLA
.390983		6b		rtl		                RTL
.390984						COPYBYTES42
.390984		08		php		                PHP
.390985		0b		phd		                PHD
.390986		48		pha		                PHA             ; begin setdp macro
.390987		08		php		                PHP
.390988		c2 20		rep #$20	                REP #$20        ; set A long
.39098a		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.39098d		5b		tcd		                TCD
.39098e		28		plp		                PLP
.39098f		68		pla		                PLA             ; end setdp macro
.390990		e2 20		sep #$20	                SEP #$20        ; set A short
.390992		c2 10		rep #$10	                REP #$10        ; set X long
.390994		a0 00 00	ldy #$0000	                LDY #0
.390997		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.390999		97 04		sta [$04],y	                STA [TMPPTR2],Y
.39099b		c8		iny		                INY
.39099c		c0 2a 00	cpy #$002a	                CPY #42
.39099f		d0 f6		bne $390997	                BNE copy_loop
.3909a1		2b		pld		                PLD
.3909a2		28		plp		                PLP
.3909a3		60		rts		                RTS
.3909a4						ICOLORFLAG
.3909a4		48		pha		                PHA
.3909a5		da		phx		                PHX
.3909a6		5a		phy		                PHY
.3909a7		08		php		                PHP
.3909a8		8b		phb		                PHB
.3909a9		0b		phd		                PHD
.3909aa		48		pha		                PHA             ; begin setdp macro
.3909ab		08		php		                PHP
.3909ac		c2 20		rep #$20	                REP #$20        ; set A long
.3909ae		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3909b1		5b		tcd		                TCD
.3909b2		28		plp		                PLP
.3909b3		68		pla		                PLA             ; end setdp macro
.3909b4		c2 30		rep #$30	                REP #$30        ; set A&X long
.3909b6		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.3909b9		85 04		sta $04		                STA TMPPTR2
.3909bb		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.3909be		85 06		sta $06		                STA TMPPTR2+2
.3909c0		a9 46 7a	lda #$7a46	                LDA #<>greet_clr_line1
.3909c3		85 00		sta $00		                STA TMPPTR1
.3909c5		a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.3909c8		85 02		sta $02		                STA TMPPTR1+2
.3909ca		20 84 09	jsr $390984	                JSR COPYBYTES42
.3909cd		18		clc		                CLC
.3909ce		a5 04		lda $04		                LDA TMPPTR2
.3909d0		65 11		adc $11		                ADC COLS_PER_LINE
.3909d2		85 04		sta $04		                STA TMPPTR2
.3909d4		a9 70 7a	lda #$7a70	                LDA #<>greet_clr_line2
.3909d7		85 00		sta $00		                STA TMPPTR1
.3909d9		a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.3909dc		85 02		sta $02		                STA TMPPTR1+2
.3909de		20 84 09	jsr $390984	                JSR COPYBYTES42
.3909e1		18		clc		                CLC
.3909e2		a5 04		lda $04		                LDA TMPPTR2
.3909e4		65 11		adc $11		                ADC COLS_PER_LINE
.3909e6		85 04		sta $04		                STA TMPPTR2
.3909e8		a9 9a 7a	lda #$7a9a	                LDA #<>greet_clr_line3
.3909eb		85 00		sta $00		                STA TMPPTR1
.3909ed		a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.3909f0		85 02		sta $02		                STA TMPPTR1+2
.3909f2		20 84 09	jsr $390984	                JSR COPYBYTES42
.3909f5		18		clc		                CLC
.3909f6		a5 04		lda $04		                LDA TMPPTR2
.3909f8		65 11		adc $11		                ADC COLS_PER_LINE
.3909fa		85 04		sta $04		                STA TMPPTR2
.3909fc		a9 c4 7a	lda #$7ac4	                LDA #<>greet_clr_line4
.3909ff		85 00		sta $00		                STA TMPPTR1
.390a01		a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390a04		85 02		sta $02		                STA TMPPTR1+2
.390a06		20 84 09	jsr $390984	                JSR COPYBYTES42
.390a09		18		clc		                CLC
.390a0a		a5 04		lda $04		                LDA TMPPTR2
.390a0c		65 11		adc $11		                ADC COLS_PER_LINE
.390a0e		85 04		sta $04		                STA TMPPTR2
.390a10		a9 ee 7a	lda #$7aee	                LDA #<>greet_clr_line5
.390a13		85 00		sta $00		                STA TMPPTR1
.390a15		a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390a18		85 02		sta $02		                STA TMPPTR1+2
.390a1a		20 84 09	jsr $390984	                JSR COPYBYTES42
.390a1d		2b		pld		                PLD
.390a1e		ab		plb		                PLB
.390a1f		28		plp		                PLP
.390a20		7a		ply		                PLY
.390a21		fa		plx		                PLX
.390a22		68		pla		                PLA
.390a23		6b		rtl		                RTL
.390a24		0b		phd		IINITCHLUT		  PHD
.390a25		08		php		                PHP
.390a26		48		pha		                PHA
.390a27		da		phx		                PHX
.390a28		22 27 64 39	jsl $396427	                JSL ANSI_INIT_LUTS
.390a2c		fa		plx		                PLX
.390a2d		68		pla		                PLA
.390a2e		28		plp		                PLP
.390a2f		2b		pld		                PLD
.390a30		6b		rtl		                RTL
.390a31						IINITGAMMATABLE
.390a31		e2 20		sep #$20	                SEP #$20        ; set A short
.390a33		c2 10		rep #$10	                REP #$10        ; set X long
.390a35		a2 00 00	ldx #$0000	                ldx #$0000
.390a38		bf 00 82 39	lda $398200,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390a3c		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390a40		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390a44		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390a48		e8		inx		                inx
.390a49		e0 00 01	cpx #$0100	                cpx #$0100
.390a4c		d0 ea		bne $390a38	                bne initgammaloop
.390a4e		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a50		6b		rtl		                RTL
.390a51		48		pha		IINITALLLUT     PHA
.390a52		da		phx		                PHX
.390a53		a2 00 00	ldx #$0000	                LDX #$0000
.390a56		e2 20		sep #$20	                SEP #$20        ; set A short
.390a58		a9 00		lda #$00	                LDA #$00
.390a5a		85 0a		sta $0a		                STA $0A     ; Temp Location
.390a5c						iinit_lut_loop
.390a5c		86 02		stx $02		                STX $02
.390a5e		a6 0a		ldx $0a		                LDX $0A
.390a60		bf 00 81 39	lda $398100,x	                LDA GAMMA_2_2_Tbl, x
.390a64		49 55		eor #$55	                EOR  #$55
.390a66		a6 02		ldx $02		                LDX $02
.390a68		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a6c		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a70		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a74		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a78		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a7c		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a80		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a84		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a88		e8		inx		                inx
.390a89		86 02		stx $02		                STX $02
.390a8b		a6 0a		ldx $0a		                LDX $0A
.390a8d		bf 00 83 39	lda $398300,x	                LDA RANDOM_LUT_Tbl, x
.390a91		a6 02		ldx $02		                LDX $02
.390a93		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a97		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a9b		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a9f		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390aa3		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390aa7		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390aab		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390aaf		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390ab3		e8		inx		                inx
.390ab4		86 02		stx $02		                STX $02
.390ab6		a6 0a		ldx $0a		                LDX $0A
.390ab8		bf 00 82 39	lda $398200,x	                LDA GAMMA_1_8_Tbl, x
.390abc		49 aa		eor #$aa	                EOR  #$AA
.390abe		a6 02		ldx $02		                LDX $02
.390ac0		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390ac4		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390ac8		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390acc		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390ad0		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390ad4		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390ad8		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390adc		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390ae0		e8		inx		                inx
.390ae1		a9 ff		lda #$ff	                LDA #$FF
.390ae3		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390ae7		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390aeb		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390aef		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390af3		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390af7		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390afb		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390aff		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390b03		e6 0a		inc $0a		                inc $0A
.390b05		e8		inx		                inx
.390b06		e0 00 04	cpx #$0400	                cpx #$0400
.390b09		f0 03		beq $390b0e	                beq iinit_lut_exit
.390b0b		82 4e ff	brl $390a5c	                brl iinit_lut_loop
.390b0e						iinit_lut_exit
.390b0e		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b10		fa		plx		                PLX
.390b11		68		pla		                PLA
.390b12		6b		rtl		                RTL
.390b13						INITVKYTXTMODE_BYPASS_DPSW
.390b13		48		pha		                PHA
.390b14		08		php		                PHP
.390b15		80 24		bra $390b3b	                BRA WeNeed640480Here
.390b17						IINITVKYTXTMODE
.390b17		48		pha		                PHA
.390b18		08		php		                PHP
.390b19		e2 20		sep #$20	                SEP #$20        ; set A short
.390b1b		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.390b1f		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.390b21		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.390b23		f0 16		beq $390b3b	                BEQ WeNeed640480Here
.390b25		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390b29		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.390b2b		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.390b2d		f0 33		beq $390b62	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.390b2f		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.390b33		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.390b35		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390b39		80 27		bra $390b62	                BRA INITVICKYMODEHIRES
.390b3b						WeNeed640480Here:
.390b3b		e2 20		sep #$20	                SEP #$20        ; set A short
.390b3d		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390b41		29 01		and #$01	                AND #$01
.390b43		c9 01		cmp #$01	                CMP #$01
.390b45		d0 15		bne $390b5c	                BNE INITVICKYMODE
.390b47		a9 00		lda #$00	                LDA #$00
.390b49		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390b4d		ea		nop		                NOP
.390b4e		ea		nop		                NOP
.390b4f		ea		nop		                NOP
.390b50		ea		nop		                NOP
.390b51		ea		nop		                NOP
.390b52		a9 01		lda #$01	                LDA #$01
.390b54		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390b58		ea		nop		                NOP
.390b59		ea		nop		                NOP
.390b5a		ea		nop		                NOP
.390b5b		ea		nop		                NOP
.390b5c						INITVICKYMODE
.390b5c		a9 00		lda #$00	                LDA #$00
.390b5e		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.390b62						INITVICKYMODEHIRES
.390b62		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390b64		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390b68		e2 20		sep #$20	                SEP #$20        ; set A short
.390b6a		a9 20		lda #$20	                LDA #$20
.390b6c		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390b70		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390b74		a9 00		lda #$00	                LDA #$00
.390b76		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390b7a		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390b7c		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390b80		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390b82		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390b86		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390b8a		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b8c		22 2c 11 00	jsl $00112c	                JSL SETSIZES                      ; Calculate the size of the text screen
.390b90		28		plp		                PLP
.390b91		68		pla		                PLA
.390b92		6b		rtl		                RTL
.390b93						ISETSIZES
.390b93		22 f8 64 39	jsl $3964f8	                JSL ANSI_SETSIZES
.390b97		6b		rtl		                RTL
.390b98						IINITVKYGRPMODE
.390b98		48		pha		                PHA
.390b99		e2 20		sep #$20	                SEP #$20        ; set A short
.390b9b		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390b9d		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390ba1		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390ba3		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390ba7		a9 c0		lda #$c0	                LDA #$C0
.390ba9		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390bad		a9 00		lda #$00	                LDA #$00
.390baf		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390bb3		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390bb5		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390bb9		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390bbb		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390bbf		a9 c0		lda #$c0	                LDA #$C0
.390bc1		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390bc5		a9 00		lda #$00	                LDA #$00
.390bc7		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390bcb		c2 30		rep #$30	                REP #$30        ; set A&X long
.390bcd		68		pla		                PLA
.390bce		6b		rtl		                RTL
.390bcf						IINITTILEMODE
.390bcf		6b		rtl		                RTL
.390bd0						IREADVRAM
.390bd0		08		php		                PHP
.390bd1		e2 20		sep #$20	                SEP #$20        ; set A short
.390bd3		bd 00 00	lda $000000,x	                LDA #0,B,X                      ; Request the byte
.390bd6		c2 20		rep #$20	                REP #$20        ; set A long
.390bd8		a2 64 00	ldx #$0064	                LDX #100
.390bdb		af 02 09 af	lda $af0902	wait_loop       LDA @l VMEM2CPU_Fifo_Count_LO   ; Wait for the FIFO to have data
.390bdf		89 00 80	bit #$8000	                BIT #$8000
.390be2		f0 06		beq $390bea	                BEQ read_byte                   ; If it has data, go read the byte
.390be4		ca		dex		                DEX                             ; Otherwise, decrement timeout counter
.390be5		d0 f4		bne $390bdb	                BNE wait_loop                   ; Keep waiting so long as it's not 0
.390be7		28		plp		ret_failure     PLP                             ; Return failure
.390be8		18		clc		                CLC
.390be9		6b		rtl		                RTL
.390bea						read_byte
.390bea		e2 20		sep #$20	                SEP #$20        ; set A short
.390bec		af 01 09 af	lda $af0901	                LDA @l VMEM2CPU_Data_Port       ; Get the byte from Vicky
.390bf0		28		plp		ret_success     PLP                             ; Return success
.390bf1		18		clc		                CLC
.390bf2		6b		rtl		                RTL
.390bf3		6b		rtl		INOP            RTL
.390bf4						IINITFONTSET
.390bf4		48		pha		                PHA
.390bf5		da		phx		                PHX
.390bf6		5a		phy		                PHY
.390bf7		8b		phb		                PHB
.390bf8		08		php		                PHP
.390bf9		c2 30		rep #$30	                REP #$30        ; set A&X long
.390bfb		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.390bfe		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.390c01		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.390c04		54 af 3f	mvn #$3f,#$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.390c07		28		plp		                PLP
.390c08		ab		plb		                PLB
.390c09		7a		ply		                PLY
.390c0a		fa		plx		                PLX
.390c0b		68		pla		                PLA
.390c0c		6b		rtl		                RTL
.390c0d						INITMOUSEPOINTER
.390c0d		e2 20		sep #$20	                SEP #$20        ; set A short
.390c0f		c2 10		rep #$10	                REP #$10        ; set X long
.390c11		a2 00 00	ldx #$0000	                LDX #$0000
.390c14						FILL_MOUSE_MARKER
.390c14		bf 00 84 39	lda $398400,x	                LDA @lMOUSE_POINTER_PTR,X
.390c18		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390c1c		e8		inx		                INX
.390c1d		e0 00 01	cpx #$0100	                CPX #$0100
.390c20		d0 f2		bne $390c14	                BNE FILL_MOUSE_MARKER
.390c22		ea		nop		                nop
.390c23		a9 01		lda #$01	                LDA #$01
.390c25		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390c29		c2 30		rep #$30	                REP #$30        ; set A&X long
.390c2b		6b		rtl		                RTL
.390c2c						IINITCURSOR
.390c2c		e2 20		sep #$20	                SEP #$20        ; set A short
.390c2e		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390c30		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390c34		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390c36		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390c3a		c2 30		rep #$30	                REP #$30        ; set A&X long
.390c3c		a9 00 00	lda #$0000	                LDA #$0000;
.390c3f		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390c43		a9 06 00	lda #$0006	                LDA #$0006;
.390c46		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390c4a		6b		rtl		                RTL
.390c4b		0b		phd		IINITSUPERIO	  PHD
.390c4c		08		php		                PHP
.390c4d		48		pha		                PHA
.390c4e		e2 20		sep #$20	                SEP #$20        ; set A short
.390c50		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390c52		8f 23 11 af	sta $af1123	                STA GP10_REG
.390c56		af 23 11 af	lda $af1123	                LDA GP10_REG
.390c5a		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390c5c		8f 24 11 af	sta $af1124	                STA GP11_REG
.390c60		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390c62		8f 25 11 af	sta $af1125	                STA GP12_REG
.390c66		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390c68		8f 26 11 af	sta $af1126	                STA GP13_REG
.390c6c		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390c6e		8f 27 11 af	sta $af1127	                STA GP14_REG
.390c72		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390c74		8f 28 11 af	sta $af1128	                STA GP15_REG
.390c78		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390c7a		8f 29 11 af	sta $af1129	                STA GP16_REG
.390c7e		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390c80		8f 2a 11 af	sta $af112a	                STA GP17_REG
.390c84		a9 00		lda #$00	                LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390c86		8f 2b 11 af	sta $af112b	                STA GP20_REG
.390c8a		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390c8c		8f 2f 11 af	sta $af112f	                STA GP24_REG
.390c90		a9 05		lda #$05	                LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390c92		8f 30 11 af	sta $af1130	                STA GP25_REG
.390c96		a9 84		lda #$84	                LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390c98		8f 31 11 af	sta $af1131	                STA GP26_REG
.390c9c		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390c9e		8f 33 11 af	sta $af1133	                STA GP30_REG
.390ca2		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390ca4		8f 34 11 af	sta $af1134	                STA GP31_REG
.390ca8		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390caa		8f 35 11 af	sta $af1135	                STA GP32_REG
.390cae		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390cb0		8f 36 11 af	sta $af1136	                STA GP33_REG
.390cb4		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390cb6		8f 37 11 af	sta $af1137	                STA GP34_REG
.390cba		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390cbc		8f 38 11 af	sta $af1138	                STA GP35_REG
.390cc0		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390cc2		8f 39 11 af	sta $af1139	                STA GP36_REG
.390cc6		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390cc8		8f 3a 11 af	sta $af113a	                STA GP37_REG
.390ccc		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390cce		8f 3d 11 af	sta $af113d	                STA GP42_REG
.390cd2		a9 01		lda #$01	                LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390cd4		8f 3e 11 af	sta $af113e	                STA GP43_REG
.390cd8		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390cda		8f 3f 11 af	sta $af113f	                STA GP50_REG
.390cde		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390ce0		8f 40 11 af	sta $af1140	                STA GP51_REG
.390ce4		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390ce6		8f 41 11 af	sta $af1141	                STA GP52_REG
.390cea		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390cec		8f 42 11 af	sta $af1142	                STA GP53_REG
.390cf0		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390cf2		8f 43 11 af	sta $af1143	                STA GP54_REG
.390cf6		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390cf8		8f 44 11 af	sta $af1144	                STA GP55_REG
.390cfc		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390cfe		8f 45 11 af	sta $af1145	                STA GP56_REG
.390d02		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390d04		8f 46 11 af	sta $af1146	                STA GP57_REG
.390d08		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.390d0a		8f 47 11 af	sta $af1147	                STA GP60_REG
.390d0e		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.390d10		8f 48 11 af	sta $af1148	                STA GP61_REG
.390d14		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390d16		8f 4b 11 af	sta $af114b	                STA GP1_REG
.390d1a		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390d1c		8f 4c 11 af	sta $af114c	                STA GP2_REG
.390d20		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390d22		8f 4d 11 af	sta $af114d	                STA GP3_REG
.390d26		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390d28		8f 4e 11 af	sta $af114e	                STA GP4_REG
.390d2c		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390d2e		8f 4f 11 af	sta $af114f	                STA GP5_REG
.390d32		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390d34		8f 50 11 af	sta $af1150	                STA GP6_REG
.390d38		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390d3a		8f 5d 11 af	sta $af115d	                STA LED1_REG
.390d3e		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390d40		8f 5e 11 af	sta $af115e	                STA LED2_REG
.390d44		c2 20		rep #$20	                REP #$20        ; set A long
.390d46		68		pla		                PLA
.390d47		28		plp			              PLP
.390d48		2b		pld				            PLD
.390d49		6b		rtl		                RTL
.390d4a		48		pha		INITRTC         PHA
.390d4b		08		php		                PHP
.390d4c		e2 20		sep #$20	                SEP #$20        ; set A short
.390d4e		a9 00		lda #$00	                LDA #0
.390d50		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.390d54		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.390d58		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.390d5c		09 04		ora #$04	                ORA #%00000100
.390d5e		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.390d62		28		plp		                PLP
.390d63		68		pla		                PLA
.390d64		6b		rtl		                RTL
.390d65		48		pha		IINITCODEC      PHA
.390d66		08		php		                PHP
.390d67		c2 20		rep #$20	                REP #$20        ; set A long
.390d69		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.390d6c		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d70		a9 01 00	lda #$0001	                LDA #$0001
.390d73		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d77		20 08 0e	jsr $390e08	                JSR CODEC_TRF_FINISHED
.390d7a		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.390d7d		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d81		a9 01 00	lda #$0001	                LDA #$0001
.390d84		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d88		20 08 0e	jsr $390e08	                JSR CODEC_TRF_FINISHED
.390d8b		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.390d8e		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d92		a9 01 00	lda #$0001	                LDA #$0001
.390d95		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d99		20 08 0e	jsr $390e08	                JSR CODEC_TRF_FINISHED
.390d9c		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.390d9f		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390da3		a9 01 00	lda #$0001	                LDA #$0001
.390da6		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390daa		20 08 0e	jsr $390e08	                JSR CODEC_TRF_FINISHED
.390dad		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.390db0		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390db4		a9 01 00	lda #$0001	                LDA #$0001
.390db7		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390dbb		20 08 0e	jsr $390e08	                JSR CODEC_TRF_FINISHED
.390dbe		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.390dc1		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390dc5		a9 01 00	lda #$0001	                LDA #$0001
.390dc8		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390dcc		20 08 0e	jsr $390e08	                JSR CODEC_TRF_FINISHED
.390dcf		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.390dd2		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390dd6		a9 01 00	lda #$0001	                LDA #$0001
.390dd9		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390ddd		20 08 0e	jsr $390e08	                JSR CODEC_TRF_FINISHED
.390de0		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.390de3		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390de7		a9 01 00	lda #$0001	                LDA #$0001
.390dea		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390dee		20 08 0e	jsr $390e08	                JSR CODEC_TRF_FINISHED
.390df1		28		plp		                PLP
.390df2		68		pla		                PLA
.390df3		6b		rtl		                RTL
.390df4						IRESETCODEC
.390df4		c2 20		rep #$20	                REP #$20        ; set A long
.390df6		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.390df9		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390dfd		a9 01 00	lda #$0001	                LDA #$0001
.390e00		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390e04		20 08 0e	jsr $390e08	                JSR CODEC_TRF_FINISHED
.390e07		6b		rtl		                RTL
.390e08						CODEC_TRF_FINISHED
.390e08		e2 20		sep #$20	                SEP #$20        ; set A short
.390e0a		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.390e0e		29 01		and #$01	                AND #$01
.390e10		c9 01		cmp #$01	                CMP #$01
.390e12		f0 f6		beq $390e0a	                BEQ CODEC_LOOP
.390e14		c2 20		rep #$20	                REP #$20        ; set A long
.390e16		60		rts		                RTS
.390e17						IBM_FILL_SCREEN
.390e17		c2 30		rep #$30	                REP #$30        ; set A&X long
.390e19		a9 00 00	lda #$0000	                LDA #$0000
.390e1c		a2 00 00	ldx #$0000	                LDX #$0000
.390e1f						BM_FILL_SCREEN_LOOPY
.390e1f		a0 00 00	ldy #$0000	                LDY #$0000
.390e22		e2 20		sep #$20	                SEP #$20        ; set A short
.390e24						BM_FILL_SCREEN_LOOPX
.390e24		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.390e26		c8		iny		                INY
.390e27		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.390e29		d0 f9		bne $390e24	                BNE BM_FILL_SCREEN_LOOPX
.390e2b		20 36 0e	jsr $390e36	                JSR BM_FILL_COMPUTE_Y_DST
.390e2e		e8		inx		                INX
.390e2f		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.390e31		d0 ec		bne $390e1f	                BNE BM_FILL_SCREEN_LOOPY
.390e33		c2 30		rep #$30	                REP #$30        ; set A&X long
.390e35		6b		rtl		                RTL
.390e36						BM_FILL_COMPUTE_Y_DST
.390e36		c2 20		rep #$20	                REP #$20        ; set A long
.390e38		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.390e3a		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390e3e		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.390e40		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390e44		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.390e47		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390e4b		a9 00 00	lda #$0000	                LDA #$0000
.390e4e		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390e52		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390e56		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.390e58		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390e5c		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.390e5e		a9 00 00	lda #$0000	                LDA #$0000
.390e61		60		rts		                RTS
.390e62						IBMP_PARSER
.390e62		c2 30		rep #$30	                REP #$30        ; set A&X long
.390e64		a0 00 00	ldy #$0000	                LDY #$0000
.390e67		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.390e69		c9 42 4d	cmp #$4d42	                CMP #$4D42
.390e6c		f0 03		beq $390e71	                BEQ IBMP_PARSER_CONT
.390e6e		82 04 01	brl $390f75	                BRL BMP_PARSER_END_WITH_ERROR
.390e71						IBMP_PARSER_CONT
.390e71		a0 02 00	ldy #$0002	                LDY #$0002
.390e74		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.390e76		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390e7a		a0 04 00	ldy #$0004	                LDY #$0004
.390e7d		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.390e7f		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390e83		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.390e86		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390e8a		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390e8e		18		clc		                CLC
.390e8f		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390e93		85 50		sta $50		                STA BMP_FILE_SIZE
.390e95		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390e99		85 52		sta $52		                STA BMP_FILE_SIZE+2
.390e9b		a0 12 00	ldy #$0012	                LDY #$0012
.390e9e		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390ea0		85 40		sta $40		                STA BMP_X_SIZE
.390ea2		a0 16 00	ldy #$0016	                LDY #$0016
.390ea5		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390ea7		85 42		sta $42		                STA BMP_Y_SIZE
.390ea9		a0 2e 00	ldy #$002e	                LDY #$002E
.390eac		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390eae		0a		asl a		                ASL A; Multiply by 2
.390eaf		0a		asl a		                ASL A; Multiply by 2
.390eb0		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.390eb2		e0 00 00	cpx #$0000	                CPX #$0000
.390eb5		d0 05		bne $390ebc	                BNE BMP_LUT1_PICK
.390eb7		20 7d 0f	jsr $390f7d	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.390eba		80 08		bra $390ec4	                BRA DONE_TRANSFER_LUT;
.390ebc						  BMP_LUT1_PICK
.390ebc		e0 01 00	cpx #$0001	                CPX #$0001
.390ebf		d0 03		bne $390ec4	                BNE BMP_LUT2_PICK
.390ec1		20 ad 0f	jsr $390fad	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.390ec4						  BMP_LUT2_PICK
.390ec4						  DONE_TRANSFER_LUT
.390ec4		a5 56		lda $56		                LDA BMP_POSITION_Y
.390ec6		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.390eca		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.390ecc		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.390ed0		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.390ed4		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390ed8		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.390edc		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390ee0		a5 54		lda $54		                LDA BMP_POSITION_X
.390ee2		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.390ee6		a9 00 00	lda #$0000	                LDA #$0000
.390ee9		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390eed		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.390ef1		85 f0		sta $f0		                STA USER_TEMP
.390ef3		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.390ef7		85 f2		sta $f2		                STA USER_TEMP+2
.390ef9		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.390efb		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390eff		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.390f01		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390f05		a5 f0		lda $f0		                LDA USER_TEMP
.390f07		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.390f0b		a5 f2		lda $f2		                LDA USER_TEMP+2
.390f0d		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.390f11		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.390f15		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.390f17		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.390f1b		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.390f1d		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.390f1f		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390f23		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.390f25		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390f29		a5 50		lda $50		                LDA BMP_FILE_SIZE
.390f2b		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390f2f		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.390f31		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390f35		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390f39		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.390f3b		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390f3f		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.390f41		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.390f43		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390f47		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.390f49		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390f4d		18		clc		                CLC
.390f4e		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.390f50		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.390f53		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.390f56		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.390f5a		a9 ff ff	lda #$ffff	                LDA #$FFFF
.390f5d		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.390f61		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390f65		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.390f67		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390f6b		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.390f6d		20 dd 0f	jsr $390fdd	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.390f70		a2 aa 7c	ldx #$7caa	                LDX #<>bmp_parser_msg0
.390f73		80 03		bra $390f78	                BRA BMP_PARSER_END_NO_ERROR
.390f75						BMP_PARSER_END_WITH_ERROR
.390f75		a2 96 7c	ldx #$7c96	                LDX #<>bmp_parser_err0
.390f78						BMP_PARSER_END_NO_ERROR
.390f78		22 95 07 39	jsl $390795	                JSL IPRINT       ; print the first line
.390f7c		6b		rtl		                RTL
.390f7d						BMP_PARSER_UPDATE_LUT0
.390f7d		38		sec		                SEC
.390f7e		a0 7a 00	ldy #$007a	                LDY #$007A
.390f81		a2 00 00	ldx #$0000	                LDX #$0000
.390f84		e2 20		sep #$20	                SEP #$20        ; set A short
.390f86						BMP_PARSER_UPDATE_LOOP
.390f86		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.390f88		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.390f8c		c8		iny		                INY
.390f8d		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.390f8f		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.390f93		c8		iny		                INY
.390f94		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.390f96		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.390f9a		c8		iny		                INY
.390f9b		a9 80		lda #$80	                LDA #$80
.390f9d		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.390fa1		c8		iny		                INY ; For the Alpha Value, nobody cares
.390fa2		e8		inx		                INX
.390fa3		e8		inx		                INX
.390fa4		e8		inx		                INX
.390fa5		e8		inx		                INX
.390fa6		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.390fa8		d0 dc		bne $390f86	                BNE BMP_PARSER_UPDATE_LOOP
.390faa		c2 20		rep #$20	                REP #$20        ; set A long
.390fac		60		rts		                RTS
.390fad						BMP_PARSER_UPDATE_LUT1
.390fad		38		sec		                SEC
.390fae		a0 36 00	ldy #$0036	                LDY #$0036
.390fb1		a2 00 00	ldx #$0000	                LDX #$0000
.390fb4		e2 20		sep #$20	                SEP #$20        ; set A short
.390fb6						PALETTE_LUT1_LOOP
.390fb6		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.390fb8		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.390fbc		c8		iny		                INY
.390fbd		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.390fbf		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.390fc3		c8		iny		                INY
.390fc4		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.390fc6		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.390fca		c8		iny		                INY
.390fcb		a9 80		lda #$80	                LDA #$80
.390fcd		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.390fd1		c8		iny		                INY ; For the Alpha Value, nobody cares
.390fd2		e8		inx		                INX
.390fd3		e8		inx		                INX
.390fd4		e8		inx		                INX
.390fd5		e8		inx		                INX
.390fd6		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.390fd8		d0 dc		bne $390fb6	                BNE PALETTE_LUT1_LOOP
.390fda		c2 20		rep #$20	                REP #$20        ; set A long
.390fdc		60		rts		                RTS
.390fdd						BMP_PARSER_DMA_SHIT_OUT
.390fdd		a2 00 00	ldx #$0000	                LDX #$0000
.390fe0						BMP_PARSER_LOOPY
.390fe0		a0 00 00	ldy #$0000	                LDY #$0000
.390fe3		e2 20		sep #$20	                SEP #$20        ; set A short
.390fe5						BMP_PARSER_LOOPX
.390fe5		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.390fe7		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.390fe9		c8		iny		                INY
.390fea		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.390fec		d0 f7		bne $390fe5	                BNE BMP_PARSER_LOOPX
.390fee		20 fa 0f	jsr $390ffa	                JSR BMP_PARSER_COMPUTE_Y_SRC
.390ff1		20 15 10	jsr $391015	                JSR BMP_PARSER_COMPUTE_Y_DST
.390ff4		e8		inx		                INX
.390ff5		e4 42		cpx $42		                CPX BMP_Y_SIZE
.390ff7		d0 e7		bne $390fe0	                BNE BMP_PARSER_LOOPY
.390ff9		60		rts		                RTS
.390ffa						BMP_PARSER_COMPUTE_Y_SRC
.390ffa		c2 20		rep #$20	                REP #$20        ; set A long
.390ffc		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.390ffe		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391002		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391004		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391008		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39100c		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.39100e		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391012		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391014		60		rts		                RTS
.391015						BMP_PARSER_COMPUTE_Y_DST
.391015		c2 20		rep #$20	                REP #$20        ; set A long
.391017		18		clc		                CLC
.391018		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.39101a		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.39101c		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.39101e		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.391020		69 00 00	adc #$0000	                ADC #$0000
.391023		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391025		60		rts		                RTS
.391026		ea		nop		ILOOP           NOP
.391027		ea		nop		                NOP
.391028		ea		nop		                NOP
.391029		ea		nop		                NOP
.39102a		ea		nop		                NOP
.39102b		ea		nop		                NOP
.39102c		ea		nop		                NOP
.39102d		ea		nop		                NOP
.39102e		ea		nop		                NOP
.39102f		ea		nop		                NOP
.391030		6b		rtl		                RTL
.391031		22 26 10 39	jsl $391026	ILOOP_1         JSL ILOOP
.391035		22 26 10 39	jsl $391026	                JSL ILOOP
.391039		22 26 10 39	jsl $391026	                JSL ILOOP
.39103d		22 26 10 39	jsl $391026	                JSL ILOOP
.391041		22 26 10 39	jsl $391026	                JSL ILOOP
.391045		22 26 10 39	jsl $391026	                JSL ILOOP
.391049		22 26 10 39	jsl $391026	                JSL ILOOP
.39104d		22 26 10 39	jsl $391026	                JSL ILOOP
.391051		22 26 10 39	jsl $391026	                JSL ILOOP
.391055		22 26 10 39	jsl $391026	                JSL ILOOP
.391059		6b		rtl		                RTL
.39105a		22 31 10 39	jsl $391031	ILOOP_1MS       JSL ILOOP_1
.39105e		6b		rtl		                RTL
.39105f		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.391062		f0 07		beq $39106b	                BEQ LOOP_MS_END
.391064		22 5a 10 39	jsl $39105a	                JSL ILOOP_1MS
.391068		ca		dex		                DEX
.391069		80 f4		bra $39105f	                BRA ILOOP_MS
.39106b		6b		rtl		LOOP_MS_END     RTL
.39106c						IDELAY
.39106c		48		pha		                PHA
.39106d		8b		phb		                PHB
.39106e		08		php		                PHP
.39106f		48		pha		                PHA             ; begin setdbr macro
.391070		08		php		                PHP
.391071		e2 20		sep #$20	                SEP #$20        ; set A short
.391073		a9 00		lda #$00	                LDA #0
.391075		48		pha		                PHA
.391076		ab		plb		                PLB
.391077		28		plp		                PLP
.391078		68		pla		                PLA             ; end setdbr macro
.391079		c2 30		rep #$30	                REP #$30        ; set A&X long
.39107b		da		phx		                PHX                         ; Save the delay amount
.39107c		5a		phy		                PHY
.39107d		a9 02 00	lda #$0002	                LDA #$02                    ; Set the handler for TIMER0 interrupts
.391080		a0 38 00	ldy #$0038	                LDY #`HANDLE_TIMER0
.391083		a2 97 19	ldx #$1997	                LDX #<>HANDLE_TIMER0
.391086		22 48 11 00	jsl $001148	                JSL SETHANDLER
.39108a		7a		ply		                PLY                         ; Restore the delay amount
.39108b		fa		plx		                PLX
.39108c		e2 20		sep #$20	                SEP #$20        ; set A short
.39108e		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.391090		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391094		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.391098		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.39109a		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.39109e		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.3910a0		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.3910a3		a9 00		lda #$00	                LDA #0
.3910a5		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.3910a9		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.3910ad		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.3910b1		c2 30		rep #$30	                REP #$30        ; set A&X long
.3910b3		8a		txa		                TXA
.3910b4		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.3910b8		98		tya		                TYA
.3910b9		e2 20		sep #$20	                SEP #$20        ; set A short
.3910bb		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.3910bf		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.3910c1		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.3910c5		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.3910c7		cb		wai		loop            WAI                         ; Wait for an interrupt
.3910c8		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.3910cb		f0 fa		beq $3910c7	                BEQ loop                    ; Keep checking until it's set
.3910cd		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.3910cf		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.3910d3		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.3910d5		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.3910d8		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.3910dc		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.3910de		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.3910e2		28		plp		                PLP
.3910e3		ab		plb		                PLB
.3910e4		68		pla		                PLA
.3910e5		6b		rtl		                RTL
.3910e6						SHOW_CREDITS
.3910e6		48		pha		                PHA
.3910e7		da		phx		                PHX
.3910e8		5a		phy		                PHY
.3910e9		08		php		                PHP
.3910ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3910ec		c2 10		rep #$10	                REP #$10        ; set X long
.3910ee		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.3910f2		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.3910f4		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3910f8		a2 00 00	ldx #$0000	                LDX #0
.3910fb		bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.3910ff		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.391103		bf 00 18 3b	lda $3b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.391107		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.39110b		e8		inx		                INX
.39110c		e0 00 20	cpx #$2000	                CPX #128 * 64
.39110f		d0 ea		bne $3910fb	                BNE credit_loop
.391111		22 2f 07 39	jsl $39072f	                JSL IGETCHW                     ; Wait for a keypress
.391115		22 79 09 39	jsl $390979	                JSL ICLRSCREEN                  ; Then clear the screen and return
.391119		22 a9 08 39	jsl $3908a9	                JSL ICSRHOME                    ; Move cursor to the home position
.39111d		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.391121		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.391123		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391127		28		plp		                PLP
.391128		7a		ply		                PLY
.391129		fa		plx		                PLX
.39112a		68		pla		                PLA
.39112b		6b		rtl		                RTL
.39112c		00		brk #		ISCINIT         BRK ;
.39112d		00		brk #		IIOINIT         BRK ;
.39112e		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.39112f		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.391130		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.391131		00		brk #		ICLOSE          BRK ; Close a channel
.391132		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.391133		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.391134		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.391135		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.391136		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.391137		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.391138		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.391139		00		brk #		IPRINTF         BRK ; Print a float value
.39113a		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.39113b		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.39113c		00		brk #		IPUSHKEY        BRK ;
.39113d		00		brk #		IPUSHKEYS       BRK ;
.39113e		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.39113f		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.391140		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src/Libraries/OPL2_Library.asm


;******  Processing file: src/Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>391141		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>391149		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>391159		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>391161		12
>391162		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>39116a		15
>39116b		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>391171		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>391176		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src/Libraries/OPL2_Library.asm


;******  Processing file: src/Libraries/OPL2_Instruments.asm

>39117c		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>391184		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>391192		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>39119a		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>3911a8		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>3911b0		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>3911be		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>3911c6		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>3911d4		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>3911dc		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>3911ea		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>3911f2		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>391200		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>391208		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>391216		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>39121e		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>39122c		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>391234		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>391242		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>39124a		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>391258		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>391260		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>39126e		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>391276		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>391284		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>39128c		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>39129a		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>3912a2		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>3912b0		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>3912b8		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>3912c6		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>3912ce		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>3912dc		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>3912e4		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>3912f2		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>3912fa		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>391308		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>391310		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>39131e		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>391326		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>391334		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>39133c		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>39134a		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>391352		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>391360		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>391368		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>391376		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>39137e		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>39138c		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>391394		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>3913a2		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>3913aa		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>3913b8		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>3913c0		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>3913ce		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>3913d6		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>3913e4		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>3913ec		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>3913fa		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>391402		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>391410		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>391418		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>391426		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>39142e		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>39143c		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>391444		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>391452		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>39145a		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>391468		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>391470		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>39147e		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>391486		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391494		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>39149c		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>3914aa		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>3914b2		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>3914c0		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>3914c8		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>3914d6		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>3914de		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>3914ec		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>3914f4		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391502		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>39150a		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>391518		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>391520		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>39152e		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>391536		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>391544		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>39154c		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>39155a		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>391562		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>391570		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>391578		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>391586		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>39158e		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>39159c		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>3915a4		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>3915b2		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>3915ba		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>3915c8		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>3915d0		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>3915de		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>3915e6		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>3915f4		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>3915fc		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>39160a		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391612		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>391620		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391628		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391636		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>39163e		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>39164c		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391654		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391662		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>39166a		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391678		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391680		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>39168e		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391696		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>3916a4		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>3916ac		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>3916ba		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>3916c2		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>3916d0		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>3916d8		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>3916e6		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>3916ee		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>3916fc		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391704		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391712		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>39171a		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391728		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391730		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>39173e		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391746		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391754		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>39175c		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>39176a		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391772		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391780		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391788		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391796		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>39179e		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>3917ac		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>3917b4		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>3917c2		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>3917ca		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>3917d8		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>3917e0		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>3917ee		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>3917f6		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391804		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>39180c		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>39181a		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391822		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391830		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391838		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391846		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>39184e		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>39185c		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391864		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391872		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>39187a		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391888		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391890		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>39189e		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>3918a6		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>3918b4		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>3918bc		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>3918ca		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>3918d2		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>3918e0		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>3918e8		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>3918f6		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>3918fe		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>39190c		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391914		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391922		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>39192a		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391938		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391940		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>39194e		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391956		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391964		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>39196c		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>39197a		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391982		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391990		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391998		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>3919a6		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>3919ae		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>3919bc		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>3919c4		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>3919d2		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>3919da		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>3919e8		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>3919f0		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>3919fe		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391a06		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391a14		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391a1c		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391a2a		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391a32		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391a40		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391a48		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391a56		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391a5e		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>391a6c		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>391a74		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>391a82		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>391a8a		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>391a98		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>391aa0		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>391aae		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>391ab6		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>391ac4		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>391acc		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>391ada		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>391ae2		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>391af0		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>391af8		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>391b06		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>391b0e		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>391b1c		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>391b24		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>391b32		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>391b3a		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>391b48		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>391b50		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>391b5e		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>391b66		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>391b74		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>391b7c		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>391b8a		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>391b92		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>391ba0		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>391ba8		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>391bb6		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>391bbe		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>391bcc		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>391bd4		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>391be2		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>391bea		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>391bf8		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>391c00		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>391c0e		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>391c16		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>391c24		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>391c2c		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>391c3a		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>391c42		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>391c50		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>391c58		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>391c66		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>391c6e		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>391c7c		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>391c84		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>391c92		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>391c9a		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>391ca8		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>391cb0		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>391cbe		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>391cc6		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>391cd4		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>391cdc		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>391cea		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>391cf2		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>391d00		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>391d08		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>391d16		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>391d1e		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>391d2c		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>391d34		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>391d42		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>391d4a		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>391d58		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>391d60		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>391d6e		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>391d76		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>391d84		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>391d8c		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>391d9a		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>391da2		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>391db0		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>391db8		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>391dc6		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>391dce		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>391ddc		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>391de4		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src/Libraries/OPL2_Library.asm


;******  Processing file: src/Libraries/OPL2_Midi_Drums.asm

>391df2		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>391dfa		00 87 fa 00
>391dfe		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>391e06		00 88 98 03
>391e0a		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>391e12		00 88 98 03
>391e16		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391e1e		00 f9 69 00
>391e22		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>391e2a		80 e8 4a 00
>391e2e		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>391e36		00 f6 9a 00
>391e3a		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>391e42		1b f2 34 00
>391e46		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>391e4e		00 f7 8a 00
>391e52		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>391e5a		00 f6 47 00
>391e5e		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391e66		00 f9 69 00
>391e6a		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>391e72		00 f7 a9 00
>391e76		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>391e7e		00 87 fa 00
>391e82		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>391e8a		00 f7 a9 00
>391e8e		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391e96		00 f5 f5 00
>391e9a		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>391ea2		06 b8 d8 03
>391ea6		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391eae		00 f5 f5 00
>391eb2		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>391eba		06 b8 d8 03
>391ebe		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391ec6		00 f5 f5 00
>391eca		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>391ed2		10 74 f8 03
>391ed6		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391ede		00 f5 f5 00
>391ee2		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391eea		00 f5 f5 00
>391eee		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391ef6		05 c5 d4 03
>391efa		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391f02		00 f5 f5 00
>391f06		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391f0e		04 f9 44 03
>391f12		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391f1a		05 c5 d4 03
>391f1e		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391f26		04 f9 44 03
>391f2a		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>391f32		03 87 f7 03
>391f36		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391f3e		05 c5 d4 03
>391f42		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>391f4a		00 f6 28 00
>391f4e		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391f56		05 c5 d4 03
>391f5a		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>391f62		00 f5 f7 01
>391f66		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391f6e		04 f9 44 03
>391f72		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>391f7a		00 99 f9 00
>391f7e		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>391f86		00 a8 f7 00
>391f8a		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>391f92		00 99 f9 00
>391f96		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>391f9e		00 a6 f6 00
>391fa2		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>391faa		00 a6 f6 00
>391fae		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>391fb6		00 f6 36 02
>391fba		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>391fc2		00 f6 36 02
>391fc6		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>391fce		00 96 e8 01
>391fd2		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>391fda		00 96 e8 01
>391fde		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>391fe6		02 79 77 03
>391fea		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>391ff2		02 79 77 03
>391ff6		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>391ffe		00 a5 2b 02
>392002		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>39200a		00 93 3b 02
>39200e		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>392016		01 89 3b 03
>39201a		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>392022		0a 53 2b 02
>392026		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>39202e		00 f6 89 00
>392032		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>39203a		00 f6 9a 00
>39203e		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392046		00 f6 9a 00
>39204a		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>392052		00 87 4b 01
>392056		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>39205e		00 78 67 01
>392062		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>39206a		02 f8 fc 00
>39206e		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392076		40 f5 f5 00
>39207a		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392082		02 79 77 03
>392086		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39208e		40 f5 f5 00
>392092		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39209a		40 f5 f5 00
>39209e		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3920a6		00 f9 69 00
>3920aa		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3920b2		00 f9 69 00
>3920b6		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>3920be		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>3920c2		f2 1d 39 00 fe 1d 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>3920ca		0a 1e 39 00 16 1e 39 00
>3920d2		22 1e 39 00 2e 1e 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>3920da		3a 1e 39 00 46 1e 39 00
>3920e2		52 1e 39 00 5e 1e 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>3920ea		6a 1e 39 00 76 1e 39 00
>3920f2		82 1e 39 00 8e 1e 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>3920fa		9a 1e 39 00 a6 1e 39 00
>392102		b2 1e 39 00 be 1e 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>39210a		ca 1e 39 00 d6 1e 39 00
>392112		e2 1e 39 00 ee 1e 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>39211a		fa 1e 39 00 06 1f 39 00
>392122		12 1f 39 00 1e 1f 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>39212a		2a 1f 39 00 36 1f 39 00
>392132		42 1f 39 00 4e 1f 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>39213a		5a 1f 39 00 66 1f 39 00
>392142		72 1f 39 00 7e 1f 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>39214a		8a 1f 39 00 96 1f 39 00
>392152		a2 1f 39 00 ae 1f 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>39215a		ba 1f 39 00 c6 1f 39 00
>392162		d2 1f 39 00 de 1f 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>39216a		ea 1f 39 00 f6 1f 39 00
>392172		02 20 39 00 0e 20 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>39217a		1a 20 39 00 26 20 39 00
>392182		32 20 39 00 3e 20 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>39218a		4a 20 39 00 56 20 39 00
>392192		62 20 39 00 6e 20 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>39219a		7a 20 39 00 86 20 39 00
>3921a2		92 20 39 00 9e 20 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>3921aa		aa 20 39 00 b6 20 39 00

;******  Return to file: src/Libraries/OPL2_Library.asm


;******  Processing file: src/Libraries/OPL2_Midi_Instruments.asm

>3921b2		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>3921ba		00 b1 f5 01
>3921be		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>3921c6		03 f1 f5 00
>3921ca		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>3921d2		03 c1 f5 00
>3921d6		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>3921de		00 92 f5 01
>3921e2		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>3921ea		00 f1 f9 00
>3921ee		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>3921f6		00 f1 f5 00
>3921fa		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>392202		02 81 f6 01
>392206		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>39220e		00 c2 b9 01
>392212		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>39221a		05 b2 35 00
>39221e		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392226		1b f2 34 00
>39222a		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>392232		01 f5 74 00
>392236		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>39223e		00 61 e3 00
>392242		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>39224a		00 a4 64 00
>39224e		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>392256		07 b5 f5 00
>39225a		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>392262		00 f3 74 00
>392266		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>39226e		00 c3 94 01
>392272		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>39227a		00 f4 0d 01
>39227e		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>392286		00 f5 0b 01
>39228a		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>392292		00 bf 07 00
>392296		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>39229e		00 6d 08 01
>3922a2		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>3922aa		00 51 17 01
>3922ae		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>3922b6		00 51 17 01
>3922ba		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>3922c2		00 53 08 01
>3922c6		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>3922ce		00 53 06 01
>3922d2		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>3922da		00 d2 f8 00
>3922de		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>3922e6		00 e2 c7 01
>3922ea		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>3922f2		00 f1 9c 00
>3922f6		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>3922fe		02 f2 c9 01
>392302		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>39230a		03 95 fb 00
>39230e		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>392316		04 a1 59 00
>39231a		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>392322		03 91 fc 03
>392326		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>39232e		02 b4 ec 00
>392332		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>39233a		00 93 f7 00
>39233e		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>392346		04 c1 58 00
>39234a		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>392352		02 c3 6a 00
>392356		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>39235e		00 62 87 00
>392362		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>39236a		00 f3 97 00
>39236e		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>392376		00 b3 97 00
>39237a		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>392382		04 f3 cc 00
>392386		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>39238e		00 93 aa 00
>392392		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>39239a		00 78 08 01
>39239e		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>3923a6		00 78 08 01
>3923aa		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>3923b2		00 54 27 01
>3923b6		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>3923be		00 61 56 00
>3923c2		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>3923ca		00 75 16 01
>3923ce		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>3923d6		00 f5 f6 01
>3923da		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>3923e2		80 f3 e3 00
>3923e6		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>3923ee		00 b5 f5 00
>3923f2		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>3923fa		80 71 16 00
>3923fe		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>392406		00 30 55 01
>39240a		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>392412		00 62 36 01
>392416		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>39241e		02 51 07 00
>392422		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>39242a		00 62 39 00
>39242e		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>392436		00 66 27 00
>39243a		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>392442		00 73 46 00
>392446		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>39244e		00 74 76 01
>392452		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>39245a		81 92 38 00
>39245e		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>392466		02 71 19 00
>39246a		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>392472		01 81 09 00
>392476		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>39247e		00 83 4b 02
>392482		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>39248a		05 71 59 00
>39248e		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392496		03 82 39 00
>39249a		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>3924a2		82 84 17 00
>3924a6		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>3924ae		02 72 16 00
>3924b2		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>3924ba		00 7b 0a 00
>3924be		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>3924c6		00 85 0c 01
>3924ca		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>3924d2		00 7b 0a 01
>3924d6		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>3924de		00 79 18 01
>3924e2		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>3924ea		01 73 08 00
>3924ee		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>3924f6		04 77 0a 00
>3924fa		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392502		00 51 19 00
>392506		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>39250e		01 74 09 00
>392512		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>39251a		01 63 28 00
>39251e		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392526		00 65 0a 00
>39252a		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>392532		00 67 29 00
>392536		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>39253e		00 67 09 00
>392542		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>39254a		01 6a 28 00
>39254e		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>392556		00 55 27 00
>39255a		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>392562		00 6f 08 00
>392566		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>39256e		00 7a 07 00
>392572		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>39257a		06 a2 0d 00
>39257e		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>392586		00 a3 5f 00
>39258a		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392592		00 42 27 00
>392596		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>39259e		05 b2 49 00
>3925a2		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>3925aa		00 b2 79 01
>3925ae		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>3925b6		00 7a 1a 00
>3925ba		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>3925c2		00 82 28 01
>3925c6		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>3925ce		02 c3 5f 00
>3925d2		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>3925da		86 c4 95 01
>3925de		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>3925e6		00 44 15 00
>3925ea		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>3925f2		00 d1 06 00
>3925f6		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>3925fe		00 82 37 00
>392602		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>39260a		00 41 35 00
>39260e		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392616		02 32 f5 01
>39261a		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392622		00 61 26 00
>392626		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>39262e		84 3f 05 01
>392632		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>39263a		01 d1 f6 00
>39263e		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392646		00 41 05 01
>39264a		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392652		05 f3 e4 00
>392656		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>39265e		00 92 f5 01
>392662		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>39266a		04 f2 e4 01
>39266e		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392676		00 45 25 00
>39267a		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392682		01 a3 36 00
>392686		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>39268e		01 98 05 01
>392692		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>39269a		02 a3 f6 01
>39269e		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>3926a6		00 f6 f8 00
>3926aa		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>3926b2		00 f3 f5 00
>3926b6		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>3926be		00 94 e5 01
>3926c2		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>3926ca		00 84 44 00
>3926ce		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>3926d6		03 83 18 01
>3926da		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>3926e2		01 78 08 01
>3926e6		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>3926ee		03 8e 08 01
>3926f2		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>3926fa		09 f2 46 00
>3926fe		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392706		00 96 e8 01
>39270a		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392712		00 f6 f6 01
>392716		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>39271e		00 f6 9a 00
>392722		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>39272a		00 c6 45 00
>39272e		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392736		00 f4 b4 00
>39273a		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392742		00 d5 25 00
>392746		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>39274e		0e 21 2d 00
>392752		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>39275a		00 55 87 02
>39275e		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392766		08 98 87 01
>39276a		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392772		04 17 04 03
>392776		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>39277e		05 77 f9 02
>392782		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>39278a		02 f4 08 00
>39278e		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392796		00 36 05 01
>39279a		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>3927a2		05 32 55 03
>3927a6		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>3927ae		00 f3 df 00
>3927b2		b2 21 39 00 be 21 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>3927ba		ca 21 39 00 d6 21 39 00 e2 21 39 00 ee 21 39 00
>3927ca		fa 21 39 00 06 22 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>3927d2		12 22 39 00 1e 22 39 00 2a 22 39 00 36 22 39 00
>3927e2		42 22 39 00 4e 22 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>3927ea		5a 22 39 00 66 22 39 00 72 22 39 00 7e 22 39 00
>3927fa		8a 22 39 00 96 22 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392802		a2 22 39 00 ae 22 39 00 ba 22 39 00 c6 22 39 00
>392812		d2 22 39 00 de 22 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>39281a		ea 22 39 00 f6 22 39 00 02 23 39 00 0e 23 39 00
>39282a		1a 23 39 00 26 23 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392832		32 23 39 00 3e 23 39 00 4a 23 39 00 56 23 39 00
>392842		62 23 39 00 6e 23 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>39284a		7a 23 39 00 86 23 39 00 92 23 39 00 9e 23 39 00
>39285a		aa 23 39 00 b6 23 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392862		c2 23 39 00 ce 23 39 00 da 23 39 00 e6 23 39 00
>392872		f2 23 39 00 fe 23 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>39287a		0a 24 39 00 16 24 39 00 22 24 39 00 2e 24 39 00
>39288a		3a 24 39 00 46 24 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392892		52 24 39 00 5e 24 39 00 6a 24 39 00 76 24 39 00
>3928a2		82 24 39 00 8e 24 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>3928aa		9a 24 39 00 a6 24 39 00 b2 24 39 00 be 24 39 00
>3928ba		ca 24 39 00 d6 24 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>3928c2		e2 24 39 00 ee 24 39 00 fa 24 39 00 06 25 39 00
>3928d2		12 25 39 00 1e 25 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>3928da		2a 25 39 00 36 25 39 00 42 25 39 00 4e 25 39 00
>3928ea		5a 25 39 00 66 25 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>3928f2		72 25 39 00 7e 25 39 00 8a 25 39 00 96 25 39 00
>392902		a2 25 39 00 ae 25 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>39290a		ba 25 39 00 c6 25 39 00 d2 25 39 00 de 25 39 00
>39291a		ea 25 39 00 f6 25 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392922		02 26 39 00 0e 26 39 00 1a 26 39 00 26 26 39 00
>392932		32 26 39 00 3e 26 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>39293a		4a 26 39 00 56 26 39 00 62 26 39 00 6e 26 39 00
>39294a		7a 26 39 00 86 26 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392952		92 26 39 00 9e 26 39 00 aa 26 39 00 b6 26 39 00
>392962		c2 26 39 00 ce 26 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>39296a		da 26 39 00 e6 26 39 00 f2 26 39 00 fe 26 39 00
>39297a		0a 27 39 00 16 27 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392982		22 27 39 00 2e 27 39 00 3a 27 39 00 46 27 39 00
>392992		52 27 39 00 5e 27 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>39299a		6a 27 39 00 76 27 39 00 82 27 39 00 8e 27 39 00
>3929aa		9a 27 39 00 a6 27 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src/Libraries/OPL2_Library.asm


;******  Processing file: src/Libraries/OPL2_Midi_Instruments_Win31.asm

>3929b2		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>3929ba		0d f2 f7 00
>3929be		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>3929c6		07 f2 f7 00
>3929ca		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>3929d2		07 f2 f6 00
>3929d6		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>3929de		07 f2 f7 00
>3929e2		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>3929ea		07 f2 f7 00
>3929ee		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>3929f6		07 f2 f7 00
>3929fa		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a02		00 00 00 00
>392a06		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a0e		00 00 00 00
>392a12		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a1a		00 00 00 00
>392a1e		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392a26		87 f2 f1 00
>392a2a		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392a32		07 f4 f4 00
>392a36		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392a3e		07 f2 f6 00
>392a42		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392a4a		07 e7 f7 00
>392a4e		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392a56		07 f6 f6 00
>392a5a		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>392a62		87 a3 f3 00
>392a66		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a6e		00 00 00 00
>392a72		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a7a		00 00 00 00
>392a7e		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a86		00 00 00 00
>392a8a		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>392a92		07 8a 08 00
>392a96		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>392a9e		07 55 14 00
>392aa2		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>392aaa		87 55 04 00
>392aae		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>392ab6		07 46 1a 00
>392aba		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>392ac2		07 61 07 00
>392ac6		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>392ace		90 61 07 00
>392ad2		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ada		00 00 00 00
>392ade		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ae6		00 00 00 00
>392aea		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392af2		00 00 00 00
>392af6		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>392afe		87 f3 f8 00
>392b02		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>392b0a		07 f6 3a 00
>392b0e		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>392b16		0c 84 19 00
>392b1a		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>392b22		07 94 19 00
>392b26		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>392b2e		87 d1 f8 00
>392b32		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>392b3a		07 c3 a6 00
>392b3e		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b46		00 00 00 00
>392b4a		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b52		00 00 00 00
>392b56		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b5e		00 00 00 00
>392b62		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>392b6a		47 f2 df 00
>392b6e		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>392b76		0f a1 df 00
>392b7a		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>392b82		07 f1 78 00
>392b86		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>392b8e		07 f1 18 00
>392b92		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>392b9a		07 56 26 00
>392b9e		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>392ba6		07 66 06 00
>392baa		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392bb2		00 00 00 00
>392bb6		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392bbe		00 00 00 00
>392bc2		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392bca		00 00 00 00
>392bce		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>392bd6		87 85 35 00
>392bda		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>392be2		87 f3 f4 00
>392be6		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>392bee		07 f2 c3 00
>392bf2		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>392bfa		08 72 08 00
>392bfe		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>392c06		07 3f 07 01
>392c0a		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>392c12		07 4f 05 00
>392c16		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c1e		00 00 00 00
>392c22		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c2a		00 00 00 00
>392c2e		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c36		00 00 00 00
>392c3a		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>392c42		07 7a 05 00
>392c46		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>392c4e		07 a5 45 00
>392c52		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>392c5a		08 8f 09 00
>392c5e		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>392c66		0c 8f 09 00
>392c6a		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>392c72		07 82 37 00
>392c76		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>392c7e		07 62 2c 01
>392c82		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c8a		00 00 00 00
>392c8e		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c96		00 00 00 00
>392c9a		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ca2		00 00 00 00
>392ca6		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>392cae		07 a6 1c 00
>392cb2		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>392cba		07 72 0b 00
>392cbe		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>392cc6		07 72 09 00
>392cca		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>392cd2		07 82 09 00
>392cd6		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>392cde		07 72 0f 00
>392ce2		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>392cea		07 8f 0a 00
>392cee		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392cf6		00 00 00 00
>392cfa		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d02		00 00 00 00
>392d06		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d0e		00 00 00 00
>392d12		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>392d1a		07 65 1a 00
>392d1e		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>392d26		07 65 1a 00
>392d2a		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>392d32		07 75 0a 00
>392d36		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>392d3e		07 65 1a 00
>392d42		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>392d4a		07 65 26 00
>392d4e		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>392d56		07 55 36 00
>392d5a		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d62		00 00 00 00
>392d66		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d6e		00 00 00 00
>392d72		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d7a		00 00 00 00
>392d7e		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>392d86		07 ff 0f 01
>392d8a		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>392d92		87 64 18 00
>392d96		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>392d9e		07 96 0a 00
>392da2		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>392daa		07 91 2a 00
>392dae		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>392db6		47 6f 07 00
>392dba		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>392dc2		07 8f 06 02
>392dc6		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dce		00 00 00 00
>392dd2		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dda		00 00 00 00
>392dde		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392de6		00 00 00 00
>392dea		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>392df2		07 55 16 00
>392df6		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>392dfe		07 6a 03 00
>392e02		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>392e0a		07 42 35 00
>392e0e		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>392e16		07 31 47 01
>392e1a		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>392e22		0a 42 25 00
>392e26		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>392e2e		07 cf 07 00
>392e32		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e3a		00 00 00 00
>392e3e		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e46		00 00 00 00
>392e4a		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e52		00 00 00 00
>392e56		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>392e5e		8a f2 26 00
>392e62		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>392e6a		07 f2 f5 00
>392e6e		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>392e76		87 11 13 00
>392e7a		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>392e82		87 1d 03 00
>392e86		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>392e8e		07 81 23 00
>392e92		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>392e9a		0a f2 f6 01
>392e9e		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ea6		00 00 00 00
>392eaa		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392eb2		00 00 00 00
>392eb6		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ebe		00 00 00 00
>392ec2		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>392eca		07 c2 05 00
>392ece		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>392ed6		07 6f 0c 01
>392eda		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>392ee2		07 56 16 00
>392ee6		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>392eee		88 8f 0b 00
>392ef2		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>392efa		87 c3 e5 00
>392efe		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>392f06		07 f8 16 00
>392f0a		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f12		00 00 00 00
>392f16		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f1e		00 00 00 00
>392f22		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f2a		00 00 00 00
>392f2e		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>392f36		0a f3 03 00
>392f3a		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>392f42		07 f3 02 00
>392f46		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>392f4e		07 1f ff 03
>392f52		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>392f5a		8f 56 84 02
>392f5e		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>392f66		0c 34 04 03
>392f6a		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>392f72		07 1f 02 03
>392f76		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f7e		00 00 00 00
>392f82		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f8a		00 00 00 00
>392f8e		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f96		00 00 00 00
>392f9a		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>392fa2		07 12 16 01
>392fa6		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>392fae		07 f6 c9 02
>392fb2		b2 29 39 00 be 29 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>392fba		ca 29 39 00 d6 29 39 00 e2 29 39 00 ee 29 39 00
>392fca		fa 29 39 00 06 2a 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>392fd2		12 2a 39 00 1e 2a 39 00 2a 2a 39 00 36 2a 39 00
>392fe2		42 2a 39 00 4e 2a 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>392fea		5a 2a 39 00 66 2a 39 00 72 2a 39 00 7e 2a 39 00
>392ffa		8a 2a 39 00 96 2a 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>393002		a2 2a 39 00 ae 2a 39 00 ba 2a 39 00 c6 2a 39 00
>393012		d2 2a 39 00 de 2a 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>39301a		ea 2a 39 00 f6 2a 39 00 02 2b 39 00 0e 2b 39 00
>39302a		1a 2b 39 00 26 2b 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>393032		32 2b 39 00 3e 2b 39 00 4a 2b 39 00 56 2b 39 00
>393042		62 2b 39 00 6e 2b 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>39304a		7a 2b 39 00 86 2b 39 00 92 2b 39 00 9e 2b 39 00
>39305a		aa 2b 39 00 b6 2b 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>393062		c2 2b 39 00 ce 2b 39 00 da 2b 39 00 e6 2b 39 00
>393072		f2 2b 39 00 fe 2b 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>39307a		0a 2c 39 00 16 2c 39 00 22 2c 39 00 2e 2c 39 00
>39308a		3a 2c 39 00 46 2c 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>393092		52 2c 39 00 5e 2c 39 00 6a 2c 39 00 76 2c 39 00
>3930a2		82 2c 39 00 8e 2c 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>3930aa		9a 2c 39 00 a6 2c 39 00 b2 2c 39 00 be 2c 39 00
>3930ba		ca 2c 39 00 d6 2c 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>3930c2		e2 2c 39 00 ee 2c 39 00 fa 2c 39 00 06 2d 39 00
>3930d2		12 2d 39 00 1e 2d 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>3930da		2a 2d 39 00 36 2d 39 00 42 2d 39 00 4e 2d 39 00
>3930ea		5a 2d 39 00 66 2d 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>3930f2		72 2d 39 00 7e 2d 39 00 8a 2d 39 00 96 2d 39 00
>393102		a2 2d 39 00 ae 2d 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>39310a		ba 2d 39 00 c6 2d 39 00 d2 2d 39 00 de 2d 39 00
>39311a		ea 2d 39 00 f6 2d 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>393122		02 2e 39 00 0e 2e 39 00 1a 2e 39 00 26 2e 39 00
>393132		32 2e 39 00 3e 2e 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>39313a		4a 2e 39 00 56 2e 39 00 62 2e 39 00 6e 2e 39 00
>39314a		7a 2e 39 00 86 2e 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>393152		92 2e 39 00 9e 2e 39 00 aa 2e 39 00 b6 2e 39 00
>393162		c2 2e 39 00 ce 2e 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>39316a		da 2e 39 00 e6 2e 39 00 f2 2e 39 00 fe 2e 39 00
>39317a		0a 2f 39 00 16 2f 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>393182		22 2f 39 00 2e 2f 39 00 3a 2f 39 00 46 2f 39 00
>393192		52 2f 39 00 5e 2f 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>39319a		6a 2f 39 00 76 2f 39 00 82 2f 39 00 8e 2f 39 00
>3931aa		9a 2f 39 00 a6 2f 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src/Libraries/OPL2_Library.asm

>3931b2		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.3931ba						IOPL2_TONE_TEST
.3931ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3931bc		c2 10		rep #$10	                REP #$10        ; set X long
.3931be		a2 00 00	ldx #$0000	                LDX #0
.3931c1						OPL2_TONE_TESTING_L1
.3931c1		bf b2 31 39	lda $3931b2,x	                LDA NOTE_INTRO, X
.3931c5		29 0f		and #$0f	                AND #$F
.3931c7		85 30		sta $30		                STA OPL2_NOTE ; start at C
.3931c9		bf b2 31 39	lda $3931b2,x	                LDA NOTE_INTRO, X
.3931cd		29 70		and #$70	                AND #$70
.3931cf		4a		lsr a		                LSR A
.3931d0		4a		lsr a		                LSR A
.3931d1		4a		lsr a		                LSR A
.3931d2		4a		lsr a		                LSR A
.3931d3		85 31		sta $31		                STA OPL2_OCTAVE
.3931d5		8a		txa		                TXA
.3931d6		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.3931d8		85 27		sta $27		                STA OPL2_CHANNEL
.3931da		22 aa 33 39	jsl $3933aa	                JSL OPL2_PLAYNOTE
.3931de		a0 00 00	ldy #$0000	                LDY #$0000
.3931e1						OPL2_TONE_TESTING_L2
.3931e1		ea		nop		                NOP
.3931e2		ea		nop		                NOP
.3931e3		ea		nop		                NOP
.3931e4		ea		nop		                NOP
.3931e5		c8		iny		                INY
.3931e6		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.3931e9		d0 f6		bne $3931e1	                BNE OPL2_TONE_TESTING_L2
.3931eb		e8		inx		                INX
.3931ec		e0 08 00	cpx #$0008	                CPX #8
.3931ef		d0 d0		bne $3931c1	                BNE OPL2_TONE_TESTING_L1
.3931f1		6b		rtl		                RTL
.3931f2						OPL2_INIT
.3931f2		c2 20		rep #$20	                REP #$20        ; set A long
.3931f4		a9 00 00	lda #$0000	                LDA #$0000
.3931f7		85 28		sta $28		                STA OPL2_REG_REGION
.3931f9		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3931fb		85 30		sta $30		                STA OPL2_NOTE
.3931fd		85 32		sta $32		                STA OPL2_PARAMETER0
.3931ff		85 34		sta $34		                STA OPL2_PARAMETER2
.393201		a9 7c 11	lda #$117c	                LDA #<>INSTRUMENT_ACCORDN
.393204		85 50		sta $50		                STA RAD_ADDR
.393206		a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.393209		85 52		sta $52		                STA RAD_ADDR + 2
.39320b		e2 20		sep #$20	                SEP #$20        ; set A short
.39320d		6b		rtl		                RTL
.39320e						OPL2_Reset
.39320e		6b		rtl		                RTL
.39320f						OPL2_Get_FrequencyBlock
.39320f		6b		rtl		                RTL
.393210						OPL2_GET_REGISTER
.393210		48		pha		                PHA             ; begin setdp macro
.393211		08		php		                PHP
.393212		c2 20		rep #$20	                REP #$20        ; set A long
.393214		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393217		5b		tcd		                TCD
.393218		28		plp		                PLP
.393219		68		pla		                PLA             ; end setdp macro
.39321a		c2 20		rep #$20	                REP #$20        ; set A long
.39321c		18		clc		              CLC
.39321d		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393220		65 32		adc $32		              ADC OPL2_PARAMETER0
.393222		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393224		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393227		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393229		e2 20		sep #$20	                SEP #$20        ; set A short
.39322b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39322d		6b		rtl		              RTL
.39322e						OPL2_GET_WAVEFORM_SELECT
.39322e		48		pha		                PHA             ; begin setdp macro
.39322f		08		php		                PHP
.393230		c2 20		rep #$20	                REP #$20        ; set A long
.393232		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393235		5b		tcd		                TCD
.393236		28		plp		                PLP
.393237		68		pla		                PLA             ; end setdp macro
.393238		c2 20		rep #$20	                REP #$20        ; set A long
.39323a		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39323d		69 01 00	adc #$0001	              ADC #$0001
.393240		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393242		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393245		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393247		e2 20		sep #$20	                SEP #$20        ; set A short
.393249		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39324b		29 20		and #$20	              AND #$20
.39324d		6b		rtl		              RTL
.39324e						OPL2_GET_SCALINGLEVEL
.39324e		48		pha		                PHA             ; begin setdp macro
.39324f		08		php		                PHP
.393250		c2 20		rep #$20	                REP #$20        ; set A long
.393252		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393255		5b		tcd		                TCD
.393256		28		plp		                PLP
.393257		68		pla		                PLA             ; end setdp macro
.393258		c2 20		rep #$20	                REP #$20        ; set A long
.39325a		a9 40 00	lda #$0040	              LDA #$0040  ;
.39325d		85 28		sta $28		              STA OPL2_REG_REGION
.39325f		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.393262		e2 20		sep #$20	                SEP #$20        ; set A short
.393264		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393266		29 c0		and #$c0	              AND #$C0
.393268		4a		lsr a		              LSR A
.393269		4a		lsr a		              LSR A
.39326a		4a		lsr a		              LSR A
.39326b		4a		lsr a		              LSR A
.39326c		4a		lsr a		              LSR A
.39326d		4a		lsr a		              LSR A
.39326e		6b		rtl		              RTL
.39326f						OPL2_GET_BLOCK
.39326f		48		pha		                PHA             ; begin setdp macro
.393270		08		php		                PHP
.393271		c2 20		rep #$20	                REP #$20        ; set A long
.393273		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393276		5b		tcd		                TCD
.393277		28		plp		                PLP
.393278		68		pla		                PLA             ; end setdp macro
.393279		e2 20		sep #$20	                SEP #$20        ; set A short
.39327b		18		clc		              CLC
.39327c		a5 27		lda $27		              LDA OPL2_CHANNEL
.39327e		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393280		69 b0		adc #$b0	              ADC #$B0
.393282		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393284		a9 00		lda #$00	              LDA #$00
.393286		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393288		c2 30		rep #$30	                REP #$30        ; set A&X long
.39328a		18		clc		              CLC
.39328b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39328e		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393290		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393292		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393295		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393297		e2 20		sep #$20	                SEP #$20        ; set A short
.393299		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39329b		29 1c		and #$1c	              AND #$1C
.39329d		4a		lsr a		              LSR A
.39329e		4a		lsr a		              LSR A
.39329f		6b		rtl		              RTL
.3932a0						OPL2_GET_KEYON
.3932a0		48		pha		                PHA             ; begin setdp macro
.3932a1		08		php		                PHP
.3932a2		c2 20		rep #$20	                REP #$20        ; set A long
.3932a4		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3932a7		5b		tcd		                TCD
.3932a8		28		plp		                PLP
.3932a9		68		pla		                PLA             ; end setdp macro
.3932aa		e2 20		sep #$20	                SEP #$20        ; set A short
.3932ac		18		clc		              CLC
.3932ad		a5 27		lda $27		              LDA OPL2_CHANNEL
.3932af		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3932b1		69 b0		adc #$b0	              ADC #$B0
.3932b3		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3932b5		a9 00		lda #$00	              LDA #$00
.3932b7		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3932b9		c2 30		rep #$30	                REP #$30        ; set A&X long
.3932bb		18		clc		              CLC
.3932bc		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3932bf		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3932c1		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3932c3		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3932c6		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3932c8		e2 20		sep #$20	                SEP #$20        ; set A short
.3932ca		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3932cc		29 20		and #$20	              AND #$20
.3932ce		6b		rtl		              RTL
.3932cf						OPL2_GET_FEEDBACK
.3932cf		48		pha		                PHA             ; begin setdp macro
.3932d0		08		php		                PHP
.3932d1		c2 20		rep #$20	                REP #$20        ; set A long
.3932d3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3932d6		5b		tcd		                TCD
.3932d7		28		plp		                PLP
.3932d8		68		pla		                PLA             ; end setdp macro
.3932d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3932db		18		clc		              CLC
.3932dc		a5 27		lda $27		              LDA OPL2_CHANNEL
.3932de		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3932e0		69 c0		adc #$c0	              ADC #$C0
.3932e2		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3932e4		a9 00		lda #$00	              LDA #$00
.3932e6		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3932e8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3932ea		18		clc		              CLC
.3932eb		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3932ee		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3932f0		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3932f2		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3932f5		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3932f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3932f9		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3932fb		29 e0		and #$e0	              AND #$E0
.3932fd		4a		lsr a		              LSR
.3932fe		6b		rtl		              RTL
.3932ff						OPL2_GET_SYNTHMODE
.3932ff		48		pha		                PHA             ; begin setdp macro
.393300		08		php		                PHP
.393301		c2 20		rep #$20	                REP #$20        ; set A long
.393303		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393306		5b		tcd		                TCD
.393307		28		plp		                PLP
.393308		68		pla		                PLA             ; end setdp macro
.393309		e2 20		sep #$20	                SEP #$20        ; set A short
.39330b		18		clc		              CLC
.39330c		a5 27		lda $27		              LDA OPL2_CHANNEL
.39330e		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393310		69 c0		adc #$c0	              ADC #$C0
.393312		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393314		a9 00		lda #$00	              LDA #$00
.393316		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393318		c2 30		rep #$30	                REP #$30        ; set A&X long
.39331a		18		clc		              CLC
.39331b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39331e		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393320		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393322		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393325		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393327		e2 20		sep #$20	                SEP #$20        ; set A short
.393329		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39332b		29 01		and #$01	              AND #$01
.39332d		6b		rtl		              RTL
.39332e						OPL2_GET_DEEPTREMOLO
.39332e		48		pha		                PHA             ; begin setdp macro
.39332f		08		php		                PHP
.393330		c2 20		rep #$20	                REP #$20        ; set A long
.393332		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393335		5b		tcd		                TCD
.393336		28		plp		                PLP
.393337		68		pla		                PLA             ; end setdp macro
.393338		c2 20		rep #$20	                REP #$20        ; set A long
.39333a		a9 bd 00	lda #$00bd	              LDA #$00BD;
.39333d		85 28		sta $28		              STA OPL2_REG_REGION
.39333f		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.393342		e2 20		sep #$20	                SEP #$20        ; set A short
.393344		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393346		29 80		and #$80	              AND #$80
.393348		6b		rtl		              RTL
.393349						OPL2_GET_DEEPVIBRATO
.393349		48		pha		                PHA             ; begin setdp macro
.39334a		08		php		                PHP
.39334b		c2 20		rep #$20	                REP #$20        ; set A long
.39334d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393350		5b		tcd		                TCD
.393351		28		plp		                PLP
.393352		68		pla		                PLA             ; end setdp macro
.393353		c2 20		rep #$20	                REP #$20        ; set A long
.393355		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393358		69 bd 00	adc #$00bd	              ADC #$00BD
.39335b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39335d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393360		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393362		e2 20		sep #$20	                SEP #$20        ; set A short
.393364		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393366		29 40		and #$40	              AND #$40
.393368		6b		rtl		              RTL
.393369						OPL2_GET_PERCUSSION
.393369		48		pha		                PHA             ; begin setdp macro
.39336a		08		php		                PHP
.39336b		c2 20		rep #$20	                REP #$20        ; set A long
.39336d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393370		5b		tcd		                TCD
.393371		28		plp		                PLP
.393372		68		pla		                PLA             ; end setdp macro
.393373		c2 20		rep #$20	                REP #$20        ; set A long
.393375		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393378		69 bd 00	adc #$00bd	              ADC #$00BD
.39337b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39337d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393380		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393382		e2 20		sep #$20	                SEP #$20        ; set A short
.393384		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393386		29 20		and #$20	              AND #$20
.393388		6b		rtl		              RTL
.393389						OPL2_GET_DRUMS
.393389		48		pha		                PHA             ; begin setdp macro
.39338a		08		php		                PHP
.39338b		c2 20		rep #$20	                REP #$20        ; set A long
.39338d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393390		5b		tcd		                TCD
.393391		28		plp		                PLP
.393392		68		pla		                PLA             ; end setdp macro
.393393		c2 20		rep #$20	                REP #$20        ; set A long
.393395		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393398		69 bd 00	adc #$00bd	              ADC #$00BD
.39339b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39339d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3933a0		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3933a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3933a4		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3933a6		29 1f		and #$1f	              AND #$1F
.3933a8		6b		rtl		              RTL
.3933a9						OPL2_Get_WaveForm
.3933a9		6b		rtl		                RTL
.3933aa						OPL2_PLAYNOTE
.3933aa		48		pha		                PHA             ; begin setdp macro
.3933ab		08		php		                PHP
.3933ac		c2 20		rep #$20	                REP #$20        ; set A long
.3933ae		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3933b1		5b		tcd		                TCD
.3933b2		28		plp		                PLP
.3933b3		68		pla		                PLA             ; end setdp macro
.3933b4		e2 20		sep #$20	                SEP #$20        ; set A short
.3933b6		da		phx		                PHX
.3933b7		a9 00		lda #$00	                LDA #$00
.3933b9		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3933bb		20 92 39	jsr $393992	                JSR OPL2_SET_KEYON
.3933be		20 57 39	jsr $393957	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.3933c1		e2 10		sep #$10	                SEP #$10        ; set X short
.3933c3		a5 30		lda $30		                LDA OPL2_NOTE
.3933c5		3a		dec a		                DEC A
.3933c6		0a		asl a		                ASL A
.3933c7		aa		tax		                TAX
.3933c8		bf 41 11 39	lda $391141,x	                LDA @lnoteFNumbers,X
.3933cc		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.3933ce		e8		inx		                INX
.3933cf		bf 41 11 39	lda $391141,x	                LDA @lnoteFNumbers,X
.3933d3		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.3933d5		22 d5 38 39	jsl $3938d5	                JSL OPL2_SET_FNUMBER
.3933d9		a9 01		lda #$01	                LDA #$01
.3933db		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3933dd		20 92 39	jsr $393992	                JSR OPL2_SET_KEYON
.3933e0		c2 10		rep #$10	                REP #$10        ; set X long
.3933e2		fa		plx		                PLX
.3933e3		6b		rtl		                RTL
.3933e4						OPL2_PLAYDRUM
.3933e4		6b		rtl		                RTL
.3933e5						OPL2_SET_INSTRUMENT
.3933e5		48		pha		                PHA             ; begin setdp macro
.3933e6		08		php		                PHP
.3933e7		c2 20		rep #$20	                REP #$20        ; set A long
.3933e9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3933ec		5b		tcd		                TCD
.3933ed		28		plp		                PLP
.3933ee		68		pla		                PLA             ; end setdp macro
.3933ef		38		sec		              SEC ; Set the WaveFormSelect to True
.3933f0		22 d3 35 39	jsl $3935d3	              JSL OPL2_SET_WAVEFORMSELECT;
.3933f4		e2 20		sep #$20	                SEP #$20        ; set A short
.3933f6		c2 10		rep #$10	                REP #$10        ; set X long
.3933f8		a0 00 00	ldy #$0000	              LDY #$0000
.3933fb		a2 00 00	ldx #$0000	              LDX #$0000
.3933fe		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.393400		85 35		sta $35		              STA OPL2_PARAMETER3
.393402		c8		iny		              INY
.393403		c9 06		cmp #$06	              CMP #$06
.393405		d0 03		bne $39340a	              BNE PERCUSSION_NEXT07
.393407		82 70 01	brl $39357a	              BRL Percussion_6
.39340a						PERCUSSION_NEXT07
.39340a		c9 07		cmp #$07	              CMP #$07
.39340c		d0 03		bne $393411	              BNE PERCUSSION_NEXT08
.39340e		82 44 01	brl $393555	              BRL Percussion_7
.393411						PERCUSSION_NEXT08
.393411		c9 08		cmp #$08	              CMP #$08
.393413		d0 03		bne $393418	              BNE PERCUSSION_NEXT09
.393415		82 18 01	brl $393530	              BRL Percussion_8
.393418						PERCUSSION_NEXT09
.393418		c9 09		cmp #$09	              CMP #$09
.39341a		d0 03		bne $39341f	              BNE PERCUSSION_NEXT0A
.39341c		82 ec 00	brl $39350b	              BRL Percussion_9
.39341f						PERCUSSION_NEXT0A
.39341f		c9 0a		cmp #$0a	              CMP #$0A
.393421		d0 03		bne $393426	              BNE Percussion_Default
.393423		82 c0 00	brl $3934e6	              BRL Percussion_A
.393426						Percussion_Default
.393426		a9 00		lda #$00	              LDA #$00
.393428		85 26		sta $26		              STA OPL2_OPERATOR
.39342a		c2 20		rep #$20	                REP #$20        ; set A long
.39342c		a9 20 00	lda #$0020	              LDA #$0020;
.39342f		85 28		sta $28		              STA OPL2_REG_REGION
.393431		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.393434		e2 20		sep #$20	                SEP #$20        ; set A short
.393436		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393438		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39343a		c8		iny		              INY
.39343b		c2 20		rep #$20	                REP #$20        ; set A long
.39343d		a9 40 00	lda #$0040	              LDA #$0040;
.393440		85 28		sta $28		              STA OPL2_REG_REGION
.393442		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.393445		e2 20		sep #$20	                SEP #$20        ; set A short
.393447		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393449		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39344b		c8		iny		              INY
.39344c		c2 20		rep #$20	                REP #$20        ; set A long
.39344e		a9 60 00	lda #$0060	              LDA #$0060;
.393451		85 28		sta $28		              STA OPL2_REG_REGION
.393453		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.393456		e2 20		sep #$20	                SEP #$20        ; set A short
.393458		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39345a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39345c		c8		iny		              INY
.39345d		c2 20		rep #$20	                REP #$20        ; set A long
.39345f		a9 80 00	lda #$0080	              LDA #$0080;
.393462		85 28		sta $28		              STA OPL2_REG_REGION
.393464		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.393467		e2 20		sep #$20	                SEP #$20        ; set A short
.393469		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39346b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39346d		c8		iny		              INY
.39346e		c2 20		rep #$20	                REP #$20        ; set A long
.393470		a9 e0 00	lda #$00e0	              LDA #$00E0;
.393473		85 28		sta $28		              STA OPL2_REG_REGION
.393475		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.393478		e2 20		sep #$20	                SEP #$20        ; set A short
.39347a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39347c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39347e		c8		iny		              INY
.39347f		e2 10		sep #$10	                SEP #$10        ; set X short
.393481		a5 27		lda $27		              LDA OPL2_CHANNEL
.393483		29 0f		and #$0f	              AND #$0F
.393485		aa		tax		              TAX
.393486		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.393488		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.39348c		c8		iny		              INY
.39348d		a9 01		lda #$01	              LDA #$01
.39348f		85 26		sta $26		              STA OPL2_OPERATOR
.393491		c2 20		rep #$20	                REP #$20        ; set A long
.393493		a9 20 00	lda #$0020	              LDA #$0020;
.393496		85 28		sta $28		              STA OPL2_REG_REGION
.393498		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.39349b		e2 20		sep #$20	                SEP #$20        ; set A short
.39349d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.39349f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3934a1		c8		iny		              INY
.3934a2		c2 20		rep #$20	                REP #$20        ; set A long
.3934a4		a9 40 00	lda #$0040	              LDA #$0040;
.3934a7		85 28		sta $28		              STA OPL2_REG_REGION
.3934a9		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.3934ac		e2 20		sep #$20	                SEP #$20        ; set A short
.3934ae		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.3934b0		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3934b2		c8		iny		              INY
.3934b3		c2 20		rep #$20	                REP #$20        ; set A long
.3934b5		a9 60 00	lda #$0060	              LDA #$0060;
.3934b8		85 28		sta $28		              STA OPL2_REG_REGION
.3934ba		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.3934bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3934bf		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.3934c1		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3934c3		c8		iny		              INY
.3934c4		c2 20		rep #$20	                REP #$20        ; set A long
.3934c6		a9 80 00	lda #$0080	              LDA #$0080;
.3934c9		85 28		sta $28		              STA OPL2_REG_REGION
.3934cb		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.3934ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3934d0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.3934d2		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3934d4		c8		iny		              INY
.3934d5		c2 20		rep #$20	                REP #$20        ; set A long
.3934d7		a9 e0 00	lda #$00e0	              LDA #$00E0;
.3934da		85 28		sta $28		              STA OPL2_REG_REGION
.3934dc		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.3934df		e2 20		sep #$20	                SEP #$20        ; set A short
.3934e1		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.3934e3		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3934e5		6b		rtl		                RTL
.3934e6						Percussion_A
.3934e6		e2 20		sep #$20	                SEP #$20        ; set A short
.3934e8		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3934ea		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.3934ee		c8		iny		              INY
.3934ef		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3934f1		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.3934f5		c8		iny		              INY
.3934f6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3934f8		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.3934fc		c8		iny		              INY
.3934fd		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3934ff		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393503		c8		iny		              INY
.393504		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393506		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.39350a		6b		rtl		                RTL
.39350b						Percussion_9
.39350b		e2 20		sep #$20	                SEP #$20        ; set A short
.39350d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39350f		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.393513		c8		iny		              INY
.393514		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393516		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.39351a		c8		iny		              INY
.39351b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39351d		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.393521		c8		iny		              INY
.393522		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393524		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.393528		c8		iny		              INY
.393529		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39352b		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.39352f		6b		rtl		              RTL
.393530						Percussion_8
.393530		e2 20		sep #$20	                SEP #$20        ; set A short
.393532		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393534		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.393538		c8		iny		              INY
.393539		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39353b		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.39353f		c8		iny		              INY
.393540		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393542		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.393546		c8		iny		              INY
.393547		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393549		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.39354d		c8		iny		              INY
.39354e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393550		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.393554		6b		rtl		              RTL
.393555						Percussion_7
.393555		e2 20		sep #$20	                SEP #$20        ; set A short
.393557		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393559		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.39355d		c8		iny		              INY
.39355e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393560		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.393564		c8		iny		              INY
.393565		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393567		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.39356b		c8		iny		              INY
.39356c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39356e		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393572		c8		iny		              INY
.393573		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393575		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.393579		6b		rtl		              RTL
.39357a						Percussion_6
.39357a		e2 20		sep #$20	                SEP #$20        ; set A short
.39357c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39357e		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393582		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.393586		c8		iny		              INY
.393587		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393589		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.39358d		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393591		c8		iny		              INY
.393592		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393594		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393598		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.39359c		c8		iny		              INY
.39359d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39359f		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.3935a3		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.3935a7		c8		iny		              INY
.3935a8		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3935aa		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.3935ae		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.3935b2		6b		rtl		              RTL
.3935b3						OPL2_SET_REGISTER
.3935b3		48		pha		                PHA             ; begin setdp macro
.3935b4		08		php		                PHP
.3935b5		c2 20		rep #$20	                REP #$20        ; set A long
.3935b7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935ba		5b		tcd		                TCD
.3935bb		28		plp		                PLP
.3935bc		68		pla		                PLA             ; end setdp macro
.3935bd		c2 20		rep #$20	                REP #$20        ; set A long
.3935bf		18		clc		              CLC
.3935c0		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3935c3		65 32		adc $32		              ADC OPL2_PARAMETER0
.3935c5		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3935c7		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3935ca		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3935cc		e2 20		sep #$20	                SEP #$20        ; set A short
.3935ce		a5 33		lda $33		              LDA OPL2_PARAMETER1
.3935d0		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3935d2		6b		rtl		              RTL
.3935d3						OPL2_SET_WAVEFORMSELECT
.3935d3		48		pha		                PHA             ; begin setdp macro
.3935d4		08		php		                PHP
.3935d5		c2 20		rep #$20	                REP #$20        ; set A long
.3935d7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935da		5b		tcd		                TCD
.3935db		28		plp		                PLP
.3935dc		68		pla		                PLA             ; end setdp macro
.3935dd		c2 20		rep #$20	                REP #$20        ; set A long
.3935df		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.3935e2		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3935e4		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3935e7		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3935e9		e2 20		sep #$20	                SEP #$20        ; set A short
.3935eb		b0 07		bcs $3935f4	              BCS OPL2_Set_WaveFormSelect_set
.3935ed		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3935ef		29 df		and #$df	              AND #$DF
.3935f1		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3935f3		6b		rtl		              RTL
.3935f4						OPL2_Set_WaveFormSelect_set
.3935f4		48		pha		                PHA             ; begin setdp macro
.3935f5		08		php		                PHP
.3935f6		c2 20		rep #$20	                REP #$20        ; set A long
.3935f8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935fb		5b		tcd		                TCD
.3935fc		28		plp		                PLP
.3935fd		68		pla		                PLA             ; end setdp macro
.3935fe		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393600		09 20 00	ora #$0020	              ORA #$20
.393603		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393605		6b		rtl		                RTL
.393606						OPL2_SET_TREMOLO
.393606		48		pha		                PHA             ; begin setdp macro
.393607		08		php		                PHP
.393608		c2 20		rep #$20	                REP #$20        ; set A long
.39360a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39360d		5b		tcd		                TCD
.39360e		28		plp		                PLP
.39360f		68		pla		                PLA             ; end setdp macro
.393610		08		php		                PHP ; Push the Carry
.393611		c2 20		rep #$20	                REP #$20        ; set A long
.393613		18		clc		                CLC
.393614		a9 20 00	lda #$0020	                LDA #$0020 ;
.393617		85 28		sta $28		                STA OPL2_REG_REGION
.393619		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.39361c		28		plp		                PLP ; Pull the Carry out
.39361d		e2 20		sep #$20	                SEP #$20        ; set A short
.39361f		b0 08		bcs $393629	                BCS OPL2_Set_Tremolo_Set;
.393621		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393623		29 7f		and #$7f	                AND #$7F
.393625		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393627		80 06		bra $39362f	                BRA OPL2_Set_Tremolo_Exit
.393629						OPL2_Set_Tremolo_Set
.393629		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39362b		09 80		ora #$80	                ORA #$80
.39362d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39362f						OPL2_Set_Tremolo_Exit
.39362f		6b		rtl		                RTL
.393630						OPL2_GET_TREMOLO
.393630		48		pha		                PHA             ; begin setdp macro
.393631		08		php		                PHP
.393632		c2 20		rep #$20	                REP #$20        ; set A long
.393634		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393637		5b		tcd		                TCD
.393638		28		plp		                PLP
.393639		68		pla		                PLA             ; end setdp macro
.39363a		c2 20		rep #$20	                REP #$20        ; set A long
.39363c		a9 20 00	lda #$0020	                LDA #$0020;
.39363f		85 28		sta $28		                STA OPL2_REG_REGION
.393641		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.393644		e2 20		sep #$20	                SEP #$20        ; set A short
.393646		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393648		29 80		and #$80	                AND #$80
.39364a		6b		rtl		                RTL
.39364b						OPL2_SET_VIBRATO
.39364b		48		pha		                PHA             ; begin setdp macro
.39364c		08		php		                PHP
.39364d		c2 20		rep #$20	                REP #$20        ; set A long
.39364f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393652		5b		tcd		                TCD
.393653		28		plp		                PLP
.393654		68		pla		                PLA             ; end setdp macro
.393655		08		php		                PHP ; Push the Carry
.393656		c2 20		rep #$20	                REP #$20        ; set A long
.393658		18		clc		                CLC
.393659		a9 20 00	lda #$0020	                LDA #$0020;
.39365c		85 28		sta $28		                STA OPL2_REG_REGION
.39365e		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.393661		28		plp		                PLP ; Pull the Carry out
.393662		e2 20		sep #$20	                SEP #$20        ; set A short
.393664		b0 08		bcs $39366e	                BCS OPL2_Set_Vibrato_Set;
.393666		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393668		29 bf		and #$bf	                AND #$BF
.39366a		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39366c		80 06		bra $393674	                BRA OPL2_Set_Vibrato_Exit
.39366e						OPL2_Set_Vibrato_Set
.39366e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393670		09 40		ora #$40	                ORA #$40
.393672		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393674						OPL2_Set_Vibrato_Exit
.393674		6b		rtl		                RTL
.393675						OPL2_GET_VIBRATO
.393675		48		pha		                PHA             ; begin setdp macro
.393676		08		php		                PHP
.393677		c2 20		rep #$20	                REP #$20        ; set A long
.393679		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39367c		5b		tcd		                TCD
.39367d		28		plp		                PLP
.39367e		68		pla		                PLA             ; end setdp macro
.39367f		c2 20		rep #$20	                REP #$20        ; set A long
.393681		a9 20 00	lda #$0020	                LDA #$0020;
.393684		85 28		sta $28		                STA OPL2_REG_REGION
.393686		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.393689		e2 20		sep #$20	                SEP #$20        ; set A short
.39368b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39368d		29 40		and #$40	                AND #$40
.39368f		6b		rtl		                RTL
.393690						OPL2_SET_MAINTAINSUSTAIN
.393690		48		pha		                PHA             ; begin setdp macro
.393691		08		php		                PHP
.393692		c2 20		rep #$20	                REP #$20        ; set A long
.393694		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393697		5b		tcd		                TCD
.393698		28		plp		                PLP
.393699		68		pla		                PLA             ; end setdp macro
.39369a		08		php		              PHP ; Push the Carry
.39369b		c2 20		rep #$20	                REP #$20        ; set A long
.39369d		18		clc		              CLC
.39369e		a9 20 00	lda #$0020	              LDA #$0020;
.3936a1		85 28		sta $28		              STA OPL2_REG_REGION
.3936a3		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.3936a6		28		plp		              PLP ; Pull the Carry out
.3936a7		e2 20		sep #$20	                SEP #$20        ; set A short
.3936a9		b0 08		bcs $3936b3	              BCS OPL2_Set_MaintainSustain_Set;
.3936ab		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936ad		29 df		and #$df	              AND #$DF
.3936af		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3936b1		80 06		bra $3936b9	              BRA OPL2_Set_MaintainSustain_Exit
.3936b3						OPL2_Set_MaintainSustain_Set
.3936b3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936b5		09 20		ora #$20	              ORA #$20
.3936b7		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3936b9						OPL2_Set_MaintainSustain_Exit
.3936b9		6b		rtl		                RTL
.3936ba						OPL2_GET_MAINTAINSUSTAIN
.3936ba		48		pha		                PHA             ; begin setdp macro
.3936bb		08		php		                PHP
.3936bc		c2 20		rep #$20	                REP #$20        ; set A long
.3936be		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936c1		5b		tcd		                TCD
.3936c2		28		plp		                PLP
.3936c3		68		pla		                PLA             ; end setdp macro
.3936c4		c2 20		rep #$20	                REP #$20        ; set A long
.3936c6		a9 20 00	lda #$0020	              LDA #$0020;
.3936c9		85 28		sta $28		              STA OPL2_REG_REGION
.3936cb		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.3936ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3936d0		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936d2		29 20		and #$20	              AND #$20
.3936d4		6b		rtl		                RTL
.3936d5						OPL2_SET_ENVELOPESCALING
.3936d5		48		pha		                PHA             ; begin setdp macro
.3936d6		08		php		                PHP
.3936d7		c2 20		rep #$20	                REP #$20        ; set A long
.3936d9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936dc		5b		tcd		                TCD
.3936dd		28		plp		                PLP
.3936de		68		pla		                PLA             ; end setdp macro
.3936df		08		php		              PHP ; Push the Carry
.3936e0		c2 20		rep #$20	                REP #$20        ; set A long
.3936e2		18		clc		              CLC
.3936e3		a9 20 00	lda #$0020	              LDA #$0020;
.3936e6		85 28		sta $28		              STA OPL2_REG_REGION
.3936e8		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.3936eb		28		plp		              PLP ; Pull the Carry out
.3936ec		e2 20		sep #$20	                SEP #$20        ; set A short
.3936ee		b0 08		bcs $3936f8	              BCS OPL2_Set_EnvelopeScaling_Set;
.3936f0		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936f2		29 ef		and #$ef	              AND #$EF
.3936f4		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3936f6		80 06		bra $3936fe	              BRA OPL2_Set_EnvelopeScaling_Exit
.3936f8						OPL2_Set_EnvelopeScaling_Set
.3936f8		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936fa		09 10		ora #$10	              ORA #$10
.3936fc		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3936fe						OPL2_Set_EnvelopeScaling_Exit
.3936fe		6b		rtl		                RTL
.3936ff						OPL2_GET_ENVELOPESCALING
.3936ff		48		pha		                PHA             ; begin setdp macro
.393700		08		php		                PHP
.393701		c2 20		rep #$20	                REP #$20        ; set A long
.393703		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393706		5b		tcd		                TCD
.393707		28		plp		                PLP
.393708		68		pla		                PLA             ; end setdp macro
.393709		c2 20		rep #$20	                REP #$20        ; set A long
.39370b		a9 20 00	lda #$0020	              LDA #$0020;
.39370e		85 28		sta $28		              STA OPL2_REG_REGION
.393710		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.393713		e2 20		sep #$20	                SEP #$20        ; set A short
.393715		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393717		29 10		and #$10	              AND #$10
.393719		6b		rtl		                RTL
.39371a						OPL2_GET_MODFREQMULTIPLE
.39371a		48		pha		                PHA             ; begin setdp macro
.39371b		08		php		                PHP
.39371c		c2 20		rep #$20	                REP #$20        ; set A long
.39371e		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393721		5b		tcd		                TCD
.393722		28		plp		                PLP
.393723		68		pla		                PLA             ; end setdp macro
.393724		c2 20		rep #$20	                REP #$20        ; set A long
.393726		a9 20 00	lda #$0020	              LDA #$0020;
.393729		85 28		sta $28		              STA OPL2_REG_REGION
.39372b		20 11 3b	jsr $393b11	              JSR OPL2_GET_REG_OFFSET
.39372e		e2 20		sep #$20	                SEP #$20        ; set A short
.393730		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393732		29 0f		and #$0f	              AND #$0F
.393734		6b		rtl		              RTL
.393735						OPL2_SET_MODFREQMULTIPLE
.393735		48		pha		                PHA             ; begin setdp macro
.393736		08		php		                PHP
.393737		c2 20		rep #$20	                REP #$20        ; set A long
.393739		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39373c		5b		tcd		                TCD
.39373d		28		plp		                PLP
.39373e		68		pla		                PLA             ; end setdp macro
.39373f		c2 20		rep #$20	                REP #$20        ; set A long
.393741		a9 20 00	lda #$0020	                LDA #$0020;
.393744		85 28		sta $28		                STA OPL2_REG_REGION
.393746		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.393749		e2 20		sep #$20	                SEP #$20        ; set A short
.39374b		a5 32		lda $32		                LDA OPL2_PARAMETER0
.39374d		29 0f		and #$0f	                AND #$0F
.39374f		85 32		sta $32		                STA OPL2_PARAMETER0
.393751		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393753		29 f0		and #$f0	                AND #$F0
.393755		05 32		ora $32		                ORA OPL2_PARAMETER0
.393757		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393759		6b		rtl		                RTL
.39375a						OPL2_SET_SCALINGLEVEL
.39375a		48		pha		                PHA             ; begin setdp macro
.39375b		08		php		                PHP
.39375c		c2 20		rep #$20	                REP #$20        ; set A long
.39375e		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393761		5b		tcd		                TCD
.393762		28		plp		                PLP
.393763		68		pla		                PLA             ; end setdp macro
.393764		c2 20		rep #$20	                REP #$20        ; set A long
.393766		a9 40 00	lda #$0040	                LDA #$0040;
.393769		85 28		sta $28		                STA OPL2_REG_REGION
.39376b		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.39376e		e2 20		sep #$20	                SEP #$20        ; set A short
.393770		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393772		29 03		and #$03	                AND #$03
.393774		0a		asl a		                ASL
.393775		0a		asl a		                ASL
.393776		0a		asl a		                ASL
.393777		0a		asl a		                ASL
.393778		0a		asl a		                ASL
.393779		0a		asl a		                ASL
.39377a		85 32		sta $32		                STA OPL2_PARAMETER0
.39377c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39377e		29 3f		and #$3f	                AND #$3F
.393780		05 32		ora $32		                ORA OPL2_PARAMETER0
.393782		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393784		6b		rtl		                RTL
.393785						OPL2_SET_VOLUME
.393785		48		pha		                PHA             ; begin setdp macro
.393786		08		php		                PHP
.393787		c2 20		rep #$20	                REP #$20        ; set A long
.393789		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39378c		5b		tcd		                TCD
.39378d		28		plp		                PLP
.39378e		68		pla		                PLA             ; end setdp macro
.39378f		c2 20		rep #$20	                REP #$20        ; set A long
.393791		a9 40 00	lda #$0040	                LDA #$0040  ;
.393794		85 28		sta $28		                STA OPL2_REG_REGION
.393796		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.393799		e2 20		sep #$20	                SEP #$20        ; set A short
.39379b		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.39379d		29 3f		and #$3f	                AND #$3F
.39379f		85 32		sta $32		                STA OPL2_PARAMETER0
.3937a1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3937a3		29 c0		and #$c0	                AND #$C0
.3937a5		05 32		ora $32		                ORA OPL2_PARAMETER0
.3937a7		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3937a9		6b		rtl		                RTL
.3937aa						OPL2_GET_VOLUME
.3937aa		48		pha		                PHA             ; begin setdp macro
.3937ab		08		php		                PHP
.3937ac		c2 20		rep #$20	                REP #$20        ; set A long
.3937ae		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937b1		5b		tcd		                TCD
.3937b2		28		plp		                PLP
.3937b3		68		pla		                PLA             ; end setdp macro
.3937b4		c2 20		rep #$20	                REP #$20        ; set A long
.3937b6		a9 40 00	lda #$0040	                LDA #$0040  ;
.3937b9		85 28		sta $28		                STA OPL2_REG_REGION
.3937bb		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.3937be		e2 20		sep #$20	                SEP #$20        ; set A short
.3937c0		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3937c2		29 3f		and #$3f	                AND #$3F
.3937c4		6b		rtl		                RTL
.3937c5						OPL2_SET_ATTACK
.3937c5		48		pha		                PHA             ; begin setdp macro
.3937c6		08		php		                PHP
.3937c7		c2 20		rep #$20	                REP #$20        ; set A long
.3937c9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937cc		5b		tcd		                TCD
.3937cd		28		plp		                PLP
.3937ce		68		pla		                PLA             ; end setdp macro
.3937cf		c2 20		rep #$20	                REP #$20        ; set A long
.3937d1		a9 60 00	lda #$0060	                LDA #$0060  ;
.3937d4		85 28		sta $28		                STA OPL2_REG_REGION
.3937d6		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.3937d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3937db		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3937dd		29 0f		and #$0f	                AND #$0F
.3937df		0a		asl a		                ASL
.3937e0		0a		asl a		                ASL
.3937e1		0a		asl a		                ASL
.3937e2		0a		asl a		                ASL
.3937e3		85 32		sta $32		                STA OPL2_PARAMETER0
.3937e5		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3937e7		29 0f		and #$0f	                AND #$0F
.3937e9		05 32		ora $32		                ORA OPL2_PARAMETER0
.3937eb		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3937ed		6b		rtl		                RTL
.3937ee						OPL2_GET_ATTACK
.3937ee		48		pha		                PHA             ; begin setdp macro
.3937ef		08		php		                PHP
.3937f0		c2 20		rep #$20	                REP #$20        ; set A long
.3937f2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937f5		5b		tcd		                TCD
.3937f6		28		plp		                PLP
.3937f7		68		pla		                PLA             ; end setdp macro
.3937f8		c2 20		rep #$20	                REP #$20        ; set A long
.3937fa		a9 60 00	lda #$0060	                LDA #$0060
.3937fd		85 28		sta $28		                STA OPL2_REG_REGION
.3937ff		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.393802		e2 20		sep #$20	                SEP #$20        ; set A short
.393804		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393806		29 f0		and #$f0	                AND #$F0
.393808		4a		lsr a		                LSR
.393809		4a		lsr a		                LSR
.39380a		4a		lsr a		                LSR
.39380b		4a		lsr a		                LSR
.39380c		6b		rtl		                RTL
.39380d						OPL2_SET_DECAY
.39380d		48		pha		                PHA             ; begin setdp macro
.39380e		08		php		                PHP
.39380f		c2 20		rep #$20	                REP #$20        ; set A long
.393811		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393814		5b		tcd		                TCD
.393815		28		plp		                PLP
.393816		68		pla		                PLA             ; end setdp macro
.393817		c2 20		rep #$20	                REP #$20        ; set A long
.393819		a9 60 00	lda #$0060	                LDA #$0060;
.39381c		85 28		sta $28		                STA OPL2_REG_REGION
.39381e		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.393821		e2 20		sep #$20	                SEP #$20        ; set A short
.393823		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393825		29 0f		and #$0f	                AND #$0F
.393827		85 32		sta $32		                STA OPL2_PARAMETER0
.393829		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39382b		29 f0		and #$f0	                AND #$F0
.39382d		05 32		ora $32		                ORA OPL2_PARAMETER0
.39382f		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393831		6b		rtl		                RTL
.393832						OPL2_GET_DECAY
.393832		48		pha		                PHA             ; begin setdp macro
.393833		08		php		                PHP
.393834		c2 20		rep #$20	                REP #$20        ; set A long
.393836		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393839		5b		tcd		                TCD
.39383a		28		plp		                PLP
.39383b		68		pla		                PLA             ; end setdp macro
.39383c		c2 20		rep #$20	                REP #$20        ; set A long
.39383e		a9 60 00	lda #$0060	                LDA #$0060
.393841		85 28		sta $28		                STA OPL2_REG_REGION
.393843		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.393846		e2 20		sep #$20	                SEP #$20        ; set A short
.393848		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39384a		29 0f		and #$0f	                AND #$0F
.39384c		6b		rtl		                RTL
.39384d						OPL2_SET_SUSTAIN
.39384d		48		pha		                PHA             ; begin setdp macro
.39384e		08		php		                PHP
.39384f		c2 20		rep #$20	                REP #$20        ; set A long
.393851		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393854		5b		tcd		                TCD
.393855		28		plp		                PLP
.393856		68		pla		                PLA             ; end setdp macro
.393857		c2 20		rep #$20	                REP #$20        ; set A long
.393859		a9 80 00	lda #$0080	                LDA #$0080;
.39385c		85 28		sta $28		                STA OPL2_REG_REGION
.39385e		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.393861		e2 20		sep #$20	                SEP #$20        ; set A short
.393863		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393865		29 0f		and #$0f	                AND #$0F
.393867		0a		asl a		                ASL
.393868		0a		asl a		                ASL
.393869		0a		asl a		                ASL
.39386a		0a		asl a		                ASL
.39386b		85 32		sta $32		                STA OPL2_PARAMETER0
.39386d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39386f		29 0f		and #$0f	                AND #$0F
.393871		05 32		ora $32		                ORA OPL2_PARAMETER0
.393873		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393875		6b		rtl		                RTL
.393876						OPL2_GET_SUSTAIN
.393876		48		pha		                PHA             ; begin setdp macro
.393877		08		php		                PHP
.393878		c2 20		rep #$20	                REP #$20        ; set A long
.39387a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39387d		5b		tcd		                TCD
.39387e		28		plp		                PLP
.39387f		68		pla		                PLA             ; end setdp macro
.393880		c2 20		rep #$20	                REP #$20        ; set A long
.393882		a9 80 00	lda #$0080	                LDA #$0080
.393885		85 28		sta $28		                STA OPL2_REG_REGION
.393887		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.39388a		e2 20		sep #$20	                SEP #$20        ; set A short
.39388c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39388e		29 f0		and #$f0	                AND #$F0
.393890		4a		lsr a		                LSR
.393891		4a		lsr a		                LSR
.393892		4a		lsr a		                LSR
.393893		4a		lsr a		                LSR
.393894		6b		rtl		                RTL
.393895						OPL2_SET_RELEASE
.393895		48		pha		                PHA             ; begin setdp macro
.393896		08		php		                PHP
.393897		c2 20		rep #$20	                REP #$20        ; set A long
.393899		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39389c		5b		tcd		                TCD
.39389d		28		plp		                PLP
.39389e		68		pla		                PLA             ; end setdp macro
.39389f		c2 20		rep #$20	                REP #$20        ; set A long
.3938a1		a9 80 00	lda #$0080	                LDA #$0080;
.3938a4		85 28		sta $28		                STA OPL2_REG_REGION
.3938a6		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.3938a9		e2 20		sep #$20	                SEP #$20        ; set A short
.3938ab		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3938ad		29 0f		and #$0f	                AND #$0F
.3938af		85 32		sta $32		                STA OPL2_PARAMETER0
.3938b1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938b3		29 f0		and #$f0	                AND #$F0
.3938b5		05 32		ora $32		                ORA OPL2_PARAMETER0
.3938b7		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3938b9		6b		rtl		                RTL
.3938ba						OPL2_GET_RELEASE
.3938ba		48		pha		                PHA             ; begin setdp macro
.3938bb		08		php		                PHP
.3938bc		c2 20		rep #$20	                REP #$20        ; set A long
.3938be		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938c1		5b		tcd		                TCD
.3938c2		28		plp		                PLP
.3938c3		68		pla		                PLA             ; end setdp macro
.3938c4		c2 20		rep #$20	                REP #$20        ; set A long
.3938c6		a9 80 00	lda #$0080	                LDA #$0080
.3938c9		85 28		sta $28		                STA OPL2_REG_REGION
.3938cb		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.3938ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3938d0		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938d2		29 0f		and #$0f	                AND #$0F
.3938d4		6b		rtl		                RTL
.3938d5						OPL2_SET_FNUMBER
.3938d5		48		pha		                PHA             ; begin setdp macro
.3938d6		08		php		                PHP
.3938d7		c2 20		rep #$20	                REP #$20        ; set A long
.3938d9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938dc		5b		tcd		                TCD
.3938dd		28		plp		                PLP
.3938de		68		pla		                PLA             ; end setdp macro
.3938df		e2 20		sep #$20	                SEP #$20        ; set A short
.3938e1		18		clc		                CLC
.3938e2		a5 27		lda $27		                LDA OPL2_CHANNEL
.3938e4		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.3938e6		69 a0		adc #$a0	                ADC #$A0
.3938e8		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3938ea		a9 00		lda #$00	                LDA #$00
.3938ec		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3938ee		c2 30		rep #$30	                REP #$30        ; set A&X long
.3938f0		18		clc		                CLC
.3938f1		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.3938f4		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3938f6		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3938f8		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3938fb		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3938fd		e2 20		sep #$20	                SEP #$20        ; set A short
.3938ff		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393901		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393903		18		clc		                CLC
.393904		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393906		69 10		adc #$10	                ADC #$10
.393908		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39390a		a5 33		lda $33		                LDA OPL2_PARAMETER1
.39390c		29 03		and #$03	                AND #$03
.39390e		85 33		sta $33		                STA OPL2_PARAMETER1
.393910		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393912		29 fc		and #$fc	                AND #$FC
.393914		05 33		ora $33		                ORA OPL2_PARAMETER1
.393916		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393918		6b		rtl		                RTL
.393919						OPL2_GET_FNUMBER
.393919		48		pha		                PHA             ; begin setdp macro
.39391a		08		php		                PHP
.39391b		c2 20		rep #$20	                REP #$20        ; set A long
.39391d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393920		5b		tcd		                TCD
.393921		28		plp		                PLP
.393922		68		pla		                PLA             ; end setdp macro
.393923		e2 20		sep #$20	                SEP #$20        ; set A short
.393925		18		clc		                CLC
.393926		a5 27		lda $27		                LDA OPL2_CHANNEL
.393928		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.39392a		69 a0		adc #$a0	                ADC #$A0
.39392c		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39392e		a9 00		lda #$00	                LDA #$00
.393930		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393932		c2 30		rep #$30	                REP #$30        ; set A&X long
.393934		18		clc		                CLC
.393935		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393938		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.39393a		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39393c		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.39393f		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393941		e2 20		sep #$20	                SEP #$20        ; set A short
.393943		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393945		85 32		sta $32		                STA OPL2_PARAMETER0
.393947		18		clc		                CLC
.393948		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.39394a		69 10		adc #$10	                ADC #$10
.39394c		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39394e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393950		29 03		and #$03	                AND #$03
.393952		85 33		sta $33		                STA OPL2_PARAMETER1
.393954		6b		rtl		                RTL
.393955						OPL2_Set_Frequency
.393955		6b		rtl		                RTL
.393956						OPL2_Get_Frequency
.393956		6b		rtl		                RTL
.393957						OPL2_SET_BLOCK
.393957		48		pha		                PHA             ; begin setdp macro
.393958		08		php		                PHP
.393959		c2 20		rep #$20	                REP #$20        ; set A long
.39395b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39395e		5b		tcd		                TCD
.39395f		28		plp		                PLP
.393960		68		pla		                PLA             ; end setdp macro
.393961		e2 20		sep #$20	                SEP #$20        ; set A short
.393963		18		clc		                CLC
.393964		a5 27		lda $27		                LDA OPL2_CHANNEL
.393966		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393968		69 b0		adc #$b0	                ADC #$B0
.39396a		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39396c		a9 00		lda #$00	                LDA #$00
.39396e		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393970		c2 30		rep #$30	                REP #$30        ; set A&X long
.393972		18		clc		                CLC
.393973		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393976		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393978		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39397a		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.39397d		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39397f		e2 20		sep #$20	                SEP #$20        ; set A short
.393981		a5 31		lda $31		                LDA OPL2_OCTAVE
.393983		29 07		and #$07	                AND #$07
.393985		0a		asl a		                ASL
.393986		0a		asl a		                ASL
.393987		85 31		sta $31		                STA OPL2_OCTAVE
.393989		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39398b		29 e3		and #$e3	                AND #$E3
.39398d		05 31		ora $31		                ORA OPL2_OCTAVE
.39398f		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393991		60		rts		                RTS
.393992						OPL2_SET_KEYON
.393992		48		pha		                PHA             ; begin setdp macro
.393993		08		php		                PHP
.393994		c2 20		rep #$20	                REP #$20        ; set A long
.393996		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393999		5b		tcd		                TCD
.39399a		28		plp		                PLP
.39399b		68		pla		                PLA             ; end setdp macro
.39399c		e2 20		sep #$20	                SEP #$20        ; set A short
.39399e		18		clc		                CLC
.39399f		a5 27		lda $27		                LDA OPL2_CHANNEL
.3939a1		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.3939a3		69 b0		adc #$b0	                ADC #$B0
.3939a5		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3939a7		a9 00		lda #$00	                LDA #$00
.3939a9		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3939ab		c2 30		rep #$30	                REP #$30        ; set A&X long
.3939ad		18		clc		                CLC
.3939ae		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.3939b1		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3939b3		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3939b5		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3939b8		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3939ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3939bc		a5 32		lda $32		                LDA OPL2_PARAMETER0
.3939be		29 01		and #$01	                AND #$01
.3939c0		f0 02		beq $3939c4	                BEQ SET_KEYON_OFF
.3939c2		a9 20		lda #$20	                LDA #$20
.3939c4						    SET_KEYON_OFF
.3939c4		85 32		sta $32		                STA OPL2_PARAMETER0
.3939c6		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3939c8		29 df		and #$df	                AND #$DF
.3939ca		05 32		ora $32		                ORA OPL2_PARAMETER0
.3939cc		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3939ce		60		rts		                RTS
.3939cf						OPL2_SET_FEEDBACK
.3939cf		48		pha		                PHA             ; begin setdp macro
.3939d0		08		php		                PHP
.3939d1		c2 20		rep #$20	                REP #$20        ; set A long
.3939d3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939d6		5b		tcd		                TCD
.3939d7		28		plp		                PLP
.3939d8		68		pla		                PLA             ; end setdp macro
.3939d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3939db		18		clc		              CLC
.3939dc		a5 27		lda $27		              LDA OPL2_CHANNEL
.3939de		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3939e0		69 c0		adc #$c0	              ADC #$C0
.3939e2		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3939e4		a9 00		lda #$00	              LDA #$00
.3939e6		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3939e8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3939ea		18		clc		              CLC
.3939eb		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3939ee		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3939f0		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3939f2		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3939f5		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3939f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3939f9		a5 32		lda $32		              LDA OPL2_PARAMETER0
.3939fb		29 07		and #$07	              AND #$07
.3939fd		0a		asl a		              ASL
.3939fe		85 32		sta $32		              STA OPL2_PARAMETER0
.393a00		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a02		29 01		and #$01	              AND #$01
.393a04		05 32		ora $32		              ORA OPL2_PARAMETER0
.393a06		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a08		6b		rtl		                RTL
.393a09						OPL2_SET_SYNTHMODE
.393a09		48		pha		                PHA             ; begin setdp macro
.393a0a		08		php		                PHP
.393a0b		c2 20		rep #$20	                REP #$20        ; set A long
.393a0d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a10		5b		tcd		                TCD
.393a11		28		plp		                PLP
.393a12		68		pla		                PLA             ; end setdp macro
.393a13		08		php		              PHP ; Push the Carry
.393a14		e2 20		sep #$20	                SEP #$20        ; set A short
.393a16		18		clc		              CLC
.393a17		a5 27		lda $27		              LDA OPL2_CHANNEL
.393a19		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393a1b		69 c0		adc #$c0	              ADC #$C0
.393a1d		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393a1f		a9 00		lda #$00	              LDA #$00
.393a21		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393a23		c2 30		rep #$30	                REP #$30        ; set A&X long
.393a25		18		clc		              CLC
.393a26		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393a29		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393a2b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393a2d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393a30		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393a32		28		plp		              PLP ; Pull the Carry out
.393a33		e2 20		sep #$20	                SEP #$20        ; set A short
.393a35		b0 08		bcs $393a3f	              BCS OPL2_Set_Synthmode_Set;
.393a37		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a39		29 fe		and #$fe	              AND #$FE
.393a3b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a3d		80 06		bra $393a45	              BRA OPL2_Set_Synthmode_Exit
.393a3f						OPL2_Set_Synthmode_Set
.393a3f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a41		09 01		ora #$01	              ORA #$01
.393a43		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a45						OPL2_Set_Synthmode_Exit
.393a45		6b		rtl		                RTL
.393a46						OPL2_SET_DEEPTREMOLO
.393a46		48		pha		                PHA             ; begin setdp macro
.393a47		08		php		                PHP
.393a48		c2 20		rep #$20	                REP #$20        ; set A long
.393a4a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a4d		5b		tcd		                TCD
.393a4e		28		plp		                PLP
.393a4f		68		pla		                PLA             ; end setdp macro
.393a50		c2 20		rep #$20	                REP #$20        ; set A long
.393a52		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393a55		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393a57		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393a5a		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393a5c		e2 20		sep #$20	                SEP #$20        ; set A short
.393a5e		b0 08		bcs $393a68	              BCS OPL2_Set_DeepTremolo_Set;
.393a60		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a62		29 7f		and #$7f	              AND #$7F
.393a64		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a66		80 06		bra $393a6e	              BRA OPL2_Set_DeepTremolo_Exit
.393a68						OPL2_Set_DeepTremolo_Set
.393a68		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a6a		09 80		ora #$80	              ORA #$80
.393a6c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a6e						OPL2_Set_DeepTremolo_Exit
.393a6e		6b		rtl		                RTL
.393a6f						OPL2_SET_DEEPVIBRATO
.393a6f		48		pha		                PHA             ; begin setdp macro
.393a70		08		php		                PHP
.393a71		c2 20		rep #$20	                REP #$20        ; set A long
.393a73		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a76		5b		tcd		                TCD
.393a77		28		plp		                PLP
.393a78		68		pla		                PLA             ; end setdp macro
.393a79		c2 20		rep #$20	                REP #$20        ; set A long
.393a7b		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393a7e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393a80		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393a83		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393a85		e2 20		sep #$20	                SEP #$20        ; set A short
.393a87		b0 08		bcs $393a91	              BCS OPL2_Set_DeepVibrato_Set;
.393a89		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a8b		29 bf		and #$bf	              AND #$BF
.393a8d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a8f		80 06		bra $393a97	              BRA OPL2_Set_DeepVibrato_Exit
.393a91						OPL2_Set_DeepVibrato_Set
.393a91		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a93		09 40		ora #$40	              ORA #$40
.393a95		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a97						OPL2_Set_DeepVibrato_Exit
.393a97		6b		rtl		                RTL
.393a98						OPL2_SET_PERCUSSION
.393a98		48		pha		                PHA             ; begin setdp macro
.393a99		08		php		                PHP
.393a9a		c2 20		rep #$20	                REP #$20        ; set A long
.393a9c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a9f		5b		tcd		                TCD
.393aa0		28		plp		                PLP
.393aa1		68		pla		                PLA             ; end setdp macro
.393aa2		c2 20		rep #$20	                REP #$20        ; set A long
.393aa4		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393aa7		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393aa9		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393aac		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393aae		e2 20		sep #$20	                SEP #$20        ; set A short
.393ab0		b0 08		bcs $393aba	                BCS OPL2_Set_Percussion_Set;
.393ab2		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ab4		29 df		and #$df	                AND #$DF
.393ab6		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ab8		80 06		bra $393ac0	                BRA OPL2_Set_Percussion_Exit
.393aba						OPL2_Set_Percussion_Set
.393aba		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393abc		09 20		ora #$20	                ORA #$20
.393abe		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ac0						OPL2_Set_Percussion_Exit
.393ac0		6b		rtl		                RTL
.393ac1						OPL2_SET_DRUMS
.393ac1		48		pha		                PHA             ; begin setdp macro
.393ac2		08		php		                PHP
.393ac3		c2 20		rep #$20	                REP #$20        ; set A long
.393ac5		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ac8		5b		tcd		                TCD
.393ac9		28		plp		                PLP
.393aca		68		pla		                PLA             ; end setdp macro
.393acb		c2 20		rep #$20	                REP #$20        ; set A long
.393acd		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393ad0		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ad2		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393ad5		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393ad7		e2 20		sep #$20	                SEP #$20        ; set A short
.393ad9		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393adb		29 1f		and #$1f	                AND #$1F
.393add		85 32		sta $32		                STA OPL2_PARAMETER0
.393adf		49 ff		eor #$ff	                EOR #$FF
.393ae1		85 33		sta $33		                STA OPL2_PARAMETER1
.393ae3		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ae5		25 33		and $33		                AND OPL2_PARAMETER1
.393ae7		05 32		ora $32		                ORA OPL2_PARAMETER0
.393ae9		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393aeb		6b		rtl		                RTL
.393aec						OPL2_SET_WAVEFORM
.393aec		48		pha		                PHA             ; begin setdp macro
.393aed		08		php		                PHP
.393aee		c2 20		rep #$20	                REP #$20        ; set A long
.393af0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393af3		5b		tcd		                TCD
.393af4		28		plp		                PLP
.393af5		68		pla		                PLA             ; end setdp macro
.393af6		c2 20		rep #$20	                REP #$20        ; set A long
.393af8		a9 e0 00	lda #$00e0	                LDA #$00E0;
.393afb		85 28		sta $28		                STA OPL2_REG_REGION
.393afd		20 11 3b	jsr $393b11	                JSR OPL2_GET_REG_OFFSET
.393b00		e2 20		sep #$20	                SEP #$20        ; set A short
.393b02		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393b04		29 03		and #$03	                AND #$03
.393b06		85 32		sta $32		                STA OPL2_PARAMETER0
.393b08		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b0a		29 fc		and #$fc	                AND #$FC
.393b0c		05 32		ora $32		                ORA OPL2_PARAMETER0
.393b0e		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b10		6b		rtl		                RTL
.393b11						OPL2_GET_REG_OFFSET
.393b11		e2 30		sep #$30	                SEP #$30        ; set A&X short
.393b13		a5 27		lda $27		                LDA OPL2_CHANNEL
.393b15		29 0f		and #$0f	                AND #$0F
.393b17		aa		tax		                TAX
.393b18		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.393b1a		d0 06		bne $393b22	                BNE OPL2_Get_Register_Offset_l0
.393b1c		bf 59 11 39	lda $391159,x	                LDA @lregisterOffsets_operator0, X
.393b20		80 04		bra $393b26	                BRA OPL2_Get_Register_Offset_exit
.393b22						OPL2_Get_Register_Offset_l0
.393b22		bf 62 11 39	lda $391162,x	                LDA @lregisterOffsets_operator1, X
.393b26						OPL2_Get_Register_Offset_exit
.393b26		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393b28		a9 00		lda #$00	                LDA #$00
.393b2a		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393b2c		c2 30		rep #$30	                REP #$30        ; set A&X long
.393b2e		18		clc		                CLC
.393b2f		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393b32		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393b34		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.393b36		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393b38		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393b3b		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393b3d		60		rts		                RTS

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/sdcard_controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src/kernel.asm


;******  Processing file: src/sdos.asm


;******  Processing file: src/sdos_fat.asm


;******  Processing file: src/sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.393b3e						ISETTIMEOUT
.393b3e		8b		phb		                PHB
.393b3f		0b		phd		                PHD
.393b40		08		php		                PHP
.393b41		48		pha		                PHA             ; begin setdbr macro
.393b42		08		php		                PHP
.393b43		e2 20		sep #$20	                SEP #$20        ; set A short
.393b45		a9 00		lda #$00	                LDA #0
.393b47		48		pha		                PHA
.393b48		ab		plb		                PLB
.393b49		28		plp		                PLP
.393b4a		68		pla		                PLA             ; end setdbr macro
.393b4b		48		pha		                PHA             ; begin setdp macro
.393b4c		08		php		                PHP
.393b4d		c2 20		rep #$20	                REP #$20        ; set A long
.393b4f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393b52		5b		tcd		                TCD
.393b53		28		plp		                PLP
.393b54		68		pla		                PLA             ; end setdp macro
.393b55		78		sei		                SEI                             ; We don't want to be interrupted
.393b56		e2 20		sep #$20	                SEP #$20        ; set A short
.393b58		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.393b5a		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.393b5c		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.393b5e		85 0c		sta $032c	                STA @b BIOS_FLAGS
.393b60		28		plp		done            PLP
.393b61		2b		pld		                PLD
.393b62		ab		plb		                PLB
.393b63		6b		rtl		                RTL
.393b64						ICMDBLOCK
.393b64		0b		phd		                PHD
.393b65		08		php		                PHP
.393b66		48		pha		                PHA             ; begin setdp macro
.393b67		08		php		                PHP
.393b68		c2 20		rep #$20	                REP #$20        ; set A long
.393b6a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393b6d		5b		tcd		                TCD
.393b6e		28		plp		                PLP
.393b6f		68		pla		                PLA             ; end setdp macro
.393b70		e2 20		sep #$20	                SEP #$20        ; set A short
.393b72		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.393b74		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.393b76		d0 06		bne $393b7e	                BNE ret_success             ; No: just return
.393b78		22 06 5f 39	jsl $395f06	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.393b7c		90 0c		bcc $393b8a	                BCC pass_failure
.393b7e						ret_success
.393b7e		e2 20		sep #$20	                SEP #$20        ; set A short
.393b80		64 00		stz $0320	                STZ BIOS_STATUS
.393b82		28		plp		                PLP
.393b83		2b		pld		                PLD
.393b84		38		sec		                SEC
.393b85		6b		rtl		                RTL
.393b86						ret_failure
.393b86		e2 20		sep #$20	                SEP #$20        ; set A short
.393b88		85 00		sta $0320	                STA BIOS_STATUS
.393b8a		28		plp		pass_failure    PLP
.393b8b		2b		pld		                PLD
.393b8c		18		clc		                CLC
.393b8d		6b		rtl		                RTL
.393b8e						IGETBLOCK
.393b8e		5a		phy		                PHY
.393b8f		0b		phd		                PHD
.393b90		8b		phb		                PHB
.393b91		08		php		                PHP
.393b92		48		pha		                PHA             ; begin setdbr macro
.393b93		08		php		                PHP
.393b94		e2 20		sep #$20	                SEP #$20        ; set A short
.393b96		a9 00		lda #$00	                LDA #0
.393b98		48		pha		                PHA
.393b99		ab		plb		                PLB
.393b9a		28		plp		                PLP
.393b9b		68		pla		                PLA             ; end setdbr macro
.393b9c		48		pha		                PHA             ; begin setdp macro
.393b9d		08		php		                PHP
.393b9e		c2 20		rep #$20	                REP #$20        ; set A long
.393ba0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393ba3		5b		tcd		                TCD
.393ba4		28		plp		                PLP
.393ba5		68		pla		                PLA             ; end setdp macro
.393ba6		e2 20		sep #$20	                SEP #$20        ; set A short
.393ba8		a0 00 00	ldy #$0000	                LDY #0
.393bab		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.393bad		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.393baf		c8		iny		                INY
.393bb0		c0 00 02	cpy #$0200	                CPY #512
.393bb3		d0 f8		bne $393bad	                BNE clr_loop
.393bb5		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393bb7		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393bb9		f0 14		beq $393bcf	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.393bbb		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.393bbd		f0 18		beq $393bd7	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.393bbf		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393bc1		f0 1c		beq $393bdf	                BEQ hd_getblock
.393bc3		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393bc5						ret_failure
.393bc5		e2 20		sep #$20	                SEP #$20        ; set A short
.393bc7		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393bc9		28		plp		                PLP
.393bca		ab		plb		                PLB
.393bcb		2b		pld		                PLD
.393bcc		7a		ply		                PLY
.393bcd		38		sec		                SEC                                 ; Return failure
.393bce		6b		rtl		                RTL
.393bcf		22 cf 55 39	jsl $3955cf	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.393bd3		b0 12		bcs $393be7	                BCS ret_success
.393bd5		80 ee		bra $393bc5	                BRA ret_failure
.393bd7		22 0b 5d 39	jsl $395d0b	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.393bdb		b0 0a		bcs $393be7	                BCS ret_success
.393bdd		80 e6		bra $393bc5	                BRA ret_failure
.393bdf		22 b2 60 39	jsl $3960b2	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.393be3		b0 02		bcs $393be7	                BCS ret_success
.393be5		80 de		bra $393bc5	                BRA ret_failure
.393be7						ret_success
.393be7		e2 20		sep #$20	                SEP #$20        ; set A short
.393be9		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393beb		28		plp		                PLP
.393bec		ab		plb		                PLB
.393bed		2b		pld		                PLD
.393bee		7a		ply		                PLY
.393bef		38		sec		                SEC                                 ; Return success
.393bf0		6b		rtl		                RTL
.393bf1						IPUTBLOCK
.393bf1		0b		phd		                PHD
.393bf2		8b		phb		                PHB
.393bf3		08		php		                PHP
.393bf4		48		pha		                PHA             ; begin setdbr macro
.393bf5		08		php		                PHP
.393bf6		e2 20		sep #$20	                SEP #$20        ; set A short
.393bf8		a9 00		lda #$00	                LDA #0
.393bfa		48		pha		                PHA
.393bfb		ab		plb		                PLB
.393bfc		28		plp		                PLP
.393bfd		68		pla		                PLA             ; end setdbr macro
.393bfe		48		pha		                PHA             ; begin setdp macro
.393bff		08		php		                PHP
.393c00		c2 20		rep #$20	                REP #$20        ; set A long
.393c02		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393c05		5b		tcd		                TCD
.393c06		28		plp		                PLP
.393c07		68		pla		                PLA             ; end setdp macro
.393c08		e2 20		sep #$20	                SEP #$20        ; set A short
.393c0a		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393c0c		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393c0e		f0 13		beq $393c23	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.393c10		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.393c12		f0 17		beq $393c2b	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.393c14		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393c16		f0 1b		beq $393c33	                BEQ hd_putblock
.393c18		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393c1a						ret_failure
.393c1a		e2 20		sep #$20	                SEP #$20        ; set A short
.393c1c		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393c1e		28		plp		                PLP
.393c1f		ab		plb		                PLB
.393c20		2b		pld		                PLD
.393c21		18		clc		                CLC                                 ; Return failure
.393c22		6b		rtl		                RTL
.393c23		22 76 56 39	jsl $395676	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.393c27		90 f1		bcc $393c1a	                BCC ret_failure
.393c29		80 10		bra $393c3b	                BRA ret_success
.393c2b		22 70 5d 39	jsl $395d70	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.393c2f		90 e9		bcc $393c1a	                BCC ret_failure
.393c31		80 08		bra $393c3b	                BRA ret_success
.393c33		22 42 61 39	jsl $396142	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.393c37		90 e1		bcc $393c1a	                BCC ret_failure
.393c39		80 00		bra $393c3b	                BRA ret_success
.393c3b						ret_success
.393c3b		e2 20		sep #$20	                SEP #$20        ; set A short
.393c3d		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393c3f		28		plp		                PLP
.393c40		ab		plb		                PLB
.393c41		2b		pld		                PLD
.393c42		38		sec		                SEC                                 ; Return success
.393c43		6b		rtl		                RTL

;******  Return to file: src/sdos_fat.asm


;******  Processing file: src/sdos_dir.asm

.393c44						DOS_DIROPEN
.393c44		da		phx		                PHX
.393c45		5a		phy		                PHY
.393c46		0b		phd		                PHD
.393c47		8b		phb		                PHB
.393c48		08		php		                PHP
.393c49		48		pha		                PHA             ; begin setdbr macro
.393c4a		08		php		                PHP
.393c4b		e2 20		sep #$20	                SEP #$20        ; set A short
.393c4d		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393c4f		48		pha		                PHA
.393c50		ab		plb		                PLB
.393c51		28		plp		                PLP
.393c52		68		pla		                PLA             ; end setdbr macro
.393c53		48		pha		                PHA             ; begin setdp macro
.393c54		08		php		                PHP
.393c55		c2 20		rep #$20	                REP #$20        ; set A long
.393c57		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393c5a		5b		tcd		                TCD
.393c5b		28		plp		                PLP
.393c5c		68		pla		                PLA             ; end setdp macro
.393c5d		ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.393c60		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.393c63		ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.393c66		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393c69		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.393c6c		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393c6e		85 18		sta $0338	                STA DOS_DIR_PTR
.393c70		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393c73		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393c75		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393c77		e2 20		sep #$20	                SEP #$20        ; set A short
.393c79		ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.393c7c		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.393c7e		d0 24		bne $393ca4	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.393c80						fetch_fat12
.393c80		e2 20		sep #$20	                SEP #$20        ; set A short
.393c82		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.393c84		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.393c87		c2 20		rep #$20	                REP #$20        ; set A long
.393c89		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.393c8b		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393c8d		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.393c8f		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393c91		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.393c94		85 02		sta $0322	                STA BIOS_LBA
.393c96		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393c99		85 04		sta $0324	                STA BIOS_LBA+2
.393c9b		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.393c9f		b0 1f		bcs $393cc0	                BCS do_success              ; If sucessful, set the directory cursor
.393ca1		82 07 15	brl $3951ab	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393ca4						fetch_fat32
.393ca4		e2 20		sep #$20	                SEP #$20        ; set A short
.393ca6		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.393ca8		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.393cab		c2 20		rep #$20	                REP #$20        ; set A long
.393cad		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.393cb0		85 10		sta $0330	                STA DOS_CLUS_ID
.393cb2		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393cb5		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393cb7		22 27 42 39	jsl $394227	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.393cbb		b0 03		bcs $393cc0	                BCS do_success              ; If successful: set the directory cursor
.393cbd		82 eb 14	brl $3951ab	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393cc0		82 ef 14	brl $3951b2	do_success      BRL IF_SUCCESS
.393cc3						DOS_DIRFIRST
.393cc3		0b		phd		                PHD
.393cc4		08		php		                PHP
.393cc5		48		pha		                PHA             ; begin setdp macro
.393cc6		08		php		                PHP
.393cc7		c2 20		rep #$20	                REP #$20        ; set A long
.393cc9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393ccc		5b		tcd		                TCD
.393ccd		28		plp		                PLP
.393cce		68		pla		                PLA             ; end setdp macro
.393ccf		c2 20		rep #$20	                REP #$20        ; set A long
.393cd1		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.393cd4		85 18		sta $0338	                STA DOS_DIR_PTR
.393cd6		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393cd9		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393cdb		28		plp		                PLP
.393cdc		2b		pld		                PLD
.393cdd		6b		rtl		                RTL
.393cde						DOS_DIRNEXT
.393cde		da		phx		                PHX
.393cdf		5a		phy		                PHY
.393ce0		0b		phd		                PHD
.393ce1		8b		phb		                PHB
.393ce2		08		php		                PHP
.393ce3		48		pha		                PHA             ; begin setdbr macro
.393ce4		08		php		                PHP
.393ce5		e2 20		sep #$20	                SEP #$20        ; set A short
.393ce7		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393ce9		48		pha		                PHA
.393cea		ab		plb		                PLB
.393ceb		28		plp		                PLP
.393cec		68		pla		                PLA             ; end setdbr macro
.393ced		48		pha		                PHA             ; begin setdp macro
.393cee		08		php		                PHP
.393cef		c2 20		rep #$20	                REP #$20        ; set A long
.393cf1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393cf4		5b		tcd		                TCD
.393cf5		28		plp		                PLP
.393cf6		68		pla		                PLA             ; end setdp macro
.393cf7		c2 20		rep #$20	                REP #$20        ; set A long
.393cf9		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.393cfa		a5 18		lda $0338	                LDA DOS_DIR_PTR
.393cfc		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.393cff		85 18		sta $0338	                STA DOS_DIR_PTR
.393d01		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.393d03		69 00 00	adc #$0000	                ADC #0
.393d06		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393d08		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.393d09		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.393d0c		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.393d0e		85 28		sta $0348	                STA DOS_TEMP
.393d10		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.393d13		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.393d15		85 2a		sta $034a	                STA DOS_TEMP+2
.393d17		30 0c		bmi $393d25	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.393d19		f0 03		beq $393d1e	                BEQ check_lower
.393d1b		82 94 14	brl $3951b2	                BRL IF_SUCCESS
.393d1e		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.393d20		f0 03		beq $393d25	                BEQ get_next_block
.393d22		82 8d 14	brl $3951b2	                BRL IF_SUCCESS
.393d25						get_next_block
.393d25		e2 20		sep #$20	                SEP #$20        ; set A short
.393d27		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.393d2a		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.393d2c		f0 38		beq $393d66	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.393d2e						next_sector
.393d2e		c2 20		rep #$20	                REP #$20        ; set A long
.393d30		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.393d33		1a		inc a		                INC A
.393d34		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.393d37		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.393d3a		d0 07		bne $393d43	                BNE read_sector
.393d3c		e2 20		sep #$20	                SEP #$20        ; set A short
.393d3e		a9 00		lda #$00	                LDA #0
.393d40		82 64 14	brl $3951a7	                BRL IF_FAILURE
.393d43						read_sector
.393d43		c2 20		rep #$20	                REP #$20        ; set A long
.393d45		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.393d48		85 02		sta $0322	                STA BIOS_LBA
.393d4a		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393d4d		85 04		sta $0324	                STA BIOS_LBA+2
.393d4f		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.393d52		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393d54		85 18		sta $0338	                STA DOS_DIR_PTR
.393d56		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393d59		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393d5b		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393d5d		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.393d61		b0 39		bcs $393d9c	                BCS do_success              ; If successful: set the directory cursor
.393d63		82 45 14	brl $3951ab	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393d66						next_cluster
.393d66		c2 20		rep #$20	                REP #$20        ; set A long
.393d68		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.393d6b		85 10		sta $0330	                STA DOS_CLUS_ID
.393d6d		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393d70		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393d72		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.393d75		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393d77		85 18		sta $0338	                STA DOS_DIR_PTR
.393d79		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393d7c		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393d7e		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393d80		22 fc 45 39	jsl $3945fc	                JSL NEXTCLUSTER             ; Try to find the next cluster
.393d84		b0 03		bcs $393d89	                BCS set_next
.393d86		82 22 14	brl $3951ab	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.393d89		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.393d8b		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.393d8e		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.393d90		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393d93		22 27 42 39	jsl $394227	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.393d97		b0 03		bcs $393d9c	                BCS do_success              ; If successful: set the directory cursor
.393d99		82 0f 14	brl $3951ab	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393d9c		82 13 14	brl $3951b2	do_success      BRL IF_SUCCESS
.393d9f						DOS_DIRFINDFREE
.393d9f		da		phx		                PHX
.393da0		5a		phy		                PHY
.393da1		0b		phd		                PHD
.393da2		8b		phb		                PHB
.393da3		08		php		                PHP
.393da4		48		pha		                PHA             ; begin setdbr macro
.393da5		08		php		                PHP
.393da6		e2 20		sep #$20	                SEP #$20        ; set A short
.393da8		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393daa		48		pha		                PHA
.393dab		ab		plb		                PLB
.393dac		28		plp		                PLP
.393dad		68		pla		                PLA             ; end setdbr macro
.393dae		48		pha		                PHA             ; begin setdp macro
.393daf		08		php		                PHP
.393db0		c2 20		rep #$20	                REP #$20        ; set A long
.393db2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393db5		5b		tcd		                TCD
.393db6		28		plp		                PLP
.393db7		68		pla		                PLA             ; end setdp macro
.393db8		22 34 4e 39	jsl $394e34	                JSL IF_DIROPEN
.393dbc		b0 06		bcs $393dc4	                BCS start_walk
.393dbe		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.393dc1		82 28 00	brl $393dec	                BRL ret_failure
.393dc4		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.393dc7						chk_entry
.393dc7		e2 20		sep #$20	                SEP #$20        ; set A short
.393dc9		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.393dcb		f0 1c		beq $393de9	                BEQ ret_success             ; If 0: we have a blank... return it
.393dcd		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.393dcf		f0 18		beq $393de9	                BEQ ret_success             ; Yes: return it
.393dd1		22 6e 4e 39	jsl $394e6e	                JSL IF_DIRNEXT              ; Go to the next directory entry
.393dd5		b0 ed		bcs $393dc4	                BCS start_walk              ; If we got one, start walking it
.393dd7		22 ef 3d 39	jsl $393def	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.393ddb		90 0f		bcc $393dec	                BCC ret_failure             ; If that didn't work, return the failure
.393ddd		c2 20		rep #$20	                REP #$20        ; set A long
.393ddf		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.393de2		85 18		sta $0338	                STA DOS_DIR_PTR
.393de4		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393de7		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393de9		82 c6 13	brl $3951b2	ret_success     BRL IF_SUCCESS
.393dec		82 b8 13	brl $3951a7	ret_failure     BRL IF_FAILURE
.393def						DOS_DIRAPPEND
.393def		da		phx		                PHX
.393df0		8b		phb		                PHB
.393df1		0b		phd		                PHD
.393df2		08		php		                PHP
.393df3		48		pha		                PHA             ; begin setdbr macro
.393df4		08		php		                PHP
.393df5		e2 20		sep #$20	                SEP #$20        ; set A short
.393df7		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393df9		48		pha		                PHA
.393dfa		ab		plb		                PLB
.393dfb		28		plp		                PLP
.393dfc		68		pla		                PLA             ; end setdbr macro
.393dfd		48		pha		                PHA             ; begin setdp macro
.393dfe		08		php		                PHP
.393dff		c2 20		rep #$20	                REP #$20        ; set A long
.393e01		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393e04		5b		tcd		                TCD
.393e05		28		plp		                PLP
.393e06		68		pla		                PLA             ; end setdp macro
.393e07		e2 20		sep #$20	                SEP #$20        ; set A short
.393e09		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.393e0c		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.393e0e		f0 09		beq $393e19	                BEQ clr_sector                  ; Yes: clear out the directory data
.393e10						ret_failure
.393e10		e2 20		sep #$20	                SEP #$20        ; set A short
.393e12		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.393e14		85 0e		sta $032e	                STA DOS_STATUS
.393e16		82 3e 00	brl $393e57	                BRL pass_failure
.393e19						clr_sector
.393e19		c2 20		rep #$20	                REP #$20        ; set A long
.393e1b		a9 00 00	lda #$0000	                LDA #0
.393e1e		a2 00 00	ldx #$0000	                LDX #0
.393e21		9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.393e24		e8		inx		                INX
.393e25		e8		inx		                INX
.393e26		e0 00 02	cpx #$0200	                CPX #512
.393e29		d0 f6		bne $393e21	                BNE clr_loop
.393e2b		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.393e2e		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393e30		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393e33		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393e35		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.393e38		85 10		sta $0330	                STA DOS_CLUS_ID
.393e3a		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393e3d		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393e3f		22 1d 4a 39	jsl $394a1d	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.393e43		90 12		bcc $393e57	                BCC pass_failure                ; If there was an error, pass it up the chain
.393e45		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.393e48		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.393e4b		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.393e4e		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393e51		28		plp		ret_success     PLP
.393e52		2b		pld		                PLD
.393e53		ab		plb		                PLB
.393e54		fa		plx		                PLX
.393e55		38		sec		                SEC
.393e56		6b		rtl		                RTL
.393e57		28		plp		pass_failure    PLP
.393e58		2b		pld		                PLD
.393e59		ab		plb		                PLB
.393e5a		fa		plx		                PLX
.393e5b		18		clc		                CLC
.393e5c		6b		rtl		                RTL
.393e5d						DOS_DIRWRITE
.393e5d		da		phx		                PHX
.393e5e		5a		phy		                PHY
.393e5f		0b		phd		                PHD
.393e60		8b		phb		                PHB
.393e61		08		php		                PHP
.393e62		48		pha		                PHA             ; begin setdbr macro
.393e63		08		php		                PHP
.393e64		e2 20		sep #$20	                SEP #$20        ; set A short
.393e66		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393e68		48		pha		                PHA
.393e69		ab		plb		                PLB
.393e6a		28		plp		                PLP
.393e6b		68		pla		                PLA             ; end setdbr macro
.393e6c		48		pha		                PHA             ; begin setdp macro
.393e6d		08		php		                PHP
.393e6e		c2 20		rep #$20	                REP #$20        ; set A long
.393e70		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393e73		5b		tcd		                TCD
.393e74		28		plp		                PLP
.393e75		68		pla		                PLA             ; end setdp macro
.393e76		e2 20		sep #$20	                SEP #$20        ; set A short
.393e78		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.393e7b		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.393e7d		f0 1f		beq $393e9e	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.393e7f						write_sector
.393e7f		c2 20		rep #$20	                REP #$20        ; set A long
.393e81		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.393e84		85 02		sta $0322	                STA BIOS_LBA
.393e86		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393e89		85 04		sta $0324	                STA BIOS_LBA+2
.393e8b		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.393e8e		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393e90		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393e93		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393e95		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.393e99		b0 1f		bcs $393eba	                BCS ret_success
.393e9b		82 09 13	brl $3951a7	ret_failure     BRL IF_FAILURE
.393e9e						write_cluster
.393e9e		c2 20		rep #$20	                REP #$20        ; set A long
.393ea0		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.393ea3		85 10		sta $0330	                STA DOS_CLUS_ID
.393ea5		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393ea8		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393eaa		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.393ead		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393eaf		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393eb2		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393eb4		22 64 42 39	jsl $394264	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.393eb8		90 e1		bcc $393e9b	                BCC ret_failure
.393eba		82 f5 12	brl $3951b2	ret_success     BRL IF_SUCCESS

;******  Return to file: src/sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=24						DOS_ERR_EOF = 24                        ; At end of file
=25						DOS_ERR_PGZSIG = 25                     ; File does not have the PGZ signature
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src/Includes/sdos_fat_vars_fmx_inc.asm

=$38a000					DOS_HIGH_VARIABLES      = $38A000
=$38a000					DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001					FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002					PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003					SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004					FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008					SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c					NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e					CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010					SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014					FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018					FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c					CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020					ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024					ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026					VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a					DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e					DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032					DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036					DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a					DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045					DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046					DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a					DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e					FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050					DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100					DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300					DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300					DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500					DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500					DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900					DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900					DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00					DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00					DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00					DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00					DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000					    DOS_FILE_BUFFS          = $38B000
=3719168					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src/sdos_fat.asm

.393ebd						DOS_INIT
.393ebd		8b		phb		                PHB
.393ebe		0b		phd		                PHD
.393ebf		08		php		                PHP
.393ec0		48		pha		                PHA             ; begin setdbr macro
.393ec1		08		php		                PHP
.393ec2		e2 20		sep #$20	                SEP #$20        ; set A short
.393ec4		a9 00		lda #$00	                LDA #0
.393ec6		48		pha		                PHA
.393ec7		ab		plb		                PLB
.393ec8		28		plp		                PLP
.393ec9		68		pla		                PLA             ; end setdbr macro
.393eca		48		pha		                PHA             ; begin setdp macro
.393ecb		08		php		                PHP
.393ecc		c2 20		rep #$20	                REP #$20        ; set A long
.393ece		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393ed1		5b		tcd		                TCD
.393ed2		28		plp		                PLP
.393ed3		68		pla		                PLA             ; end setdp macro
.393ed4		e2 20		sep #$20	                SEP #$20        ; set A short
.393ed6		c2 10		rep #$10	                REP #$10        ; set X long
.393ed8		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.393edb		a9 00		lda #$00	                LDA #0
.393edd		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.393ee0		e8		inx		                INX
.393ee1		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.393ee4		d0 f7		bne $393edd	                BNE b0_clr_loop
.393ee6		48		pha		                PHA             ; begin setdbr macro
.393ee7		08		php		                PHP
.393ee8		e2 20		sep #$20	                SEP #$20        ; set A short
.393eea		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393eec		48		pha		                PHA
.393eed		ab		plb		                PLB
.393eee		28		plp		                PLP
.393eef		68		pla		                PLA             ; end setdbr macro
.393ef0		48		pha		                PHA             ; begin setdp macro
.393ef1		08		php		                PHP
.393ef2		c2 20		rep #$20	                REP #$20        ; set A long
.393ef4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393ef7		5b		tcd		                TCD
.393ef8		28		plp		                PLP
.393ef9		68		pla		                PLA             ; end setdp macro
.393efa		e2 20		sep #$20	                SEP #$20        ; set A short
.393efc		c2 10		rep #$10	                REP #$10        ; set X long
.393efe		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.393f01		a9 00		lda #$00	                LDA #0
.393f03		9d 00 a0	sta $38a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.393f06		e8		inx		                INX
.393f07		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.393f0a		d0 f7		bne $393f03	                BNE b38_clr_loop
.393f0c		c2 20		rep #$20	                REP #$20        ; set A long
.393f0e		a9 bc 42	lda #$42bc	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.393f11		8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.393f15		a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.393f18		8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.393f1c		e2 20		sep #$20	                SEP #$20        ; set A short
.393f1e		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.393f20		85 01		sta $0321	                STA BIOS_DEV
.393f22		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.393f24		8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.393f28		a9 00		lda #$00	                LDA #0
.393f2a		a2 00 00	ldx #$0000	                LDX #0
.393f2d		9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.393f30		e8		inx		                INX
.393f31		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.393f34		d0 f7		bne $393f2d	                BNE fd_zero_loop
.393f36		a9 00		lda #$00	                LDA #0
.393f38		a2 00 00	ldx #$0000	                LDX #0
.393f3b		9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.393f3e		e8		inx		                INX
.393f3f		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.393f42		d0 f7		bne $393f3b	                BNE sect_zero_loop
.393f44		c2 20		rep #$20	                REP #$20        ; set A long
.393f46		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.393f49		85 20		sta $0340	                STA @b DOS_FD_PTR
.393f4b		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.393f4e		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.393f50		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.393f53		85 28		sta $0348	                STA @b DOS_TEMP
.393f55		a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.393f58		85 2a		sta $034a	                STA @b DOS_TEMP+2
.393f5a		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.393f5d		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.393f60		a5 28		lda $0348	                LDA @b DOS_TEMP
.393f62		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.393f64		c8		iny		                INY
.393f65		c8		iny		                INY
.393f66		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.393f68		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.393f6a		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.393f6b		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.393f6d		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.393f70		85 20		sta $0340	                STA @b DOS_FD_PTR
.393f72		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.393f74		69 00 00	adc #$0000	                ADC #0
.393f77		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.393f79		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.393f7a		a5 28		lda $0348	                LDA @b DOS_TEMP
.393f7c		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.393f7f		85 28		sta $0348	                STA @b DOS_TEMP
.393f81		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.393f83		69 00 00	adc #$0000	                ADC #0
.393f86		85 2a		sta $034a	                STA @b DOS_TEMP+2
.393f88		ca		dex		                DEX                     ; Count down the descriptors...
.393f89		d0 d2		bne $393f5d	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.393f8b		28		plp		                PLP
.393f8c		2b		pld		                PLD
.393f8d		ab		plb		                PLB
.393f8e		6b		rtl		                RTL
.393f8f						DOS_MOUNT
.393f8f		8b		phb		                PHB
.393f90		0b		phd		                PHD
.393f91		08		php		                PHP
.393f92		48		pha		                PHA             ; begin setdbr macro
.393f93		08		php		                PHP
.393f94		e2 20		sep #$20	                SEP #$20        ; set A short
.393f96		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393f98		48		pha		                PHA
.393f99		ab		plb		                PLB
.393f9a		28		plp		                PLP
.393f9b		68		pla		                PLA             ; end setdbr macro
.393f9c		48		pha		                PHA             ; begin setdp macro
.393f9d		08		php		                PHP
.393f9e		c2 20		rep #$20	                REP #$20        ; set A long
.393fa0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393fa3		5b		tcd		                TCD
.393fa4		28		plp		                PLP
.393fa5		68		pla		                PLA             ; end setdp macro
.393fa6		e2 20		sep #$20	                SEP #$20        ; set A short
.393fa8		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.393faa		8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.393fae		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.393fb0		f0 1f		beq $393fd1	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.393fb2		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.393fb4		f0 26		beq $393fdc	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.393fb6		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.393fb8		f0 0b		beq $393fc5	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.393fba		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.393fbc		85 0e		sta $032e	                STA DOS_STATUS
.393fbe		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.393fc0		85 00		sta $0320	                STA BIOS_STATUS
.393fc2		82 7c 01	brl $394141	                BRL ret_failure
.393fc5		22 dc 5d 39	jsl $395ddc	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.393fc9		b0 03		bcs $393fce	                BCS fdc_success
.393fcb		82 73 01	brl $394141	                BRL ret_failure
.393fce		82 67 01	brl $394138	fdc_success     BRL ret_success
.393fd1		22 81 55 39	jsl $395581	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.393fd5		b0 10		bcs $393fe7	                BCS get_mbr             ; Continue if success
.393fd7		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.393fd9		82 65 01	brl $394141	                BRL ret_failure
.393fdc		22 63 60 39	jsl $396063	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.393fe0		b0 05		bcs $393fe7	                BCS get_mbr             ; Continue if success
.393fe2		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.393fe4		82 5a 01	brl $394141	                BRL ret_failure
.393fe7						get_mbr
.393fe7		c2 30		rep #$30	                REP #$30        ; set A&X long
.393fe9		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.393feb		64 04		stz $0324	                STZ BIOS_LBA+2
.393fed		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.393ff0		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393ff2		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.393ff5		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393ff7		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.393ffb		b0 07		bcs $394004	                BCS chk_signature       ; If success, check the signature bytes
.393ffd		e2 20		sep #$20	                SEP #$20        ; set A short
.393fff		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.394001		82 3d 01	brl $394141	                BRL ret_failure
.394004						chk_signature
.394004		e2 20		sep #$20	                SEP #$20        ; set A short
.394006		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.394009		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.39400b		d0 07		bne $394014	                BNE not_mbr             ; No: signal we could find the MBR
.39400d		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.394010		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394012		f0 05		beq $394019	                BEQ chk_part_type       ; Yes: we have an MBR
.394014		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.394016		82 28 01	brl $394141	                BRL ret_failure
.394019		ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.39401c		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.39401e		f0 05		beq $394025	                BEQ get_LBA             ; Is FAT32 with LBA?
.394020		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.394022		82 1c 01	brl $394141	                BRL ret_failure
.394025		8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.394028		c2 20		rep #$20	                REP #$20        ; set A long
.39402a		ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.39402d		8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.394030		ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.394033		8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.394036		ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.394039		8d 08 a0	sta $38a008	                STA SECTORCOUNT
.39403c		ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.39403f		8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.394042		e2 20		sep #$20	                SEP #$20        ; set A short
.394044		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.394046		8d 00 a0	sta $38a000	                STA DEVICE
.394049		a9 00		lda #$00	                LDA #0
.39404b		8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.39404e		c2 20		rep #$20	                REP #$20        ; set A long
.394050		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.394053		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394055		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394058		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39405a		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.39405d		85 02		sta $0322	                STA BIOS_LBA
.39405f		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.394062		85 04		sta $0324	                STA BIOS_LBA+2
.394064		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.394068		b0 1c		bcs $394086	                BCS get_first_sec       ; Got it? Start parsing it
.39406a		e2 20		sep #$20	                SEP #$20        ; set A short
.39406c		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.39406e		82 d0 00	brl $394141	                BRL ret_failure
.394071						chk_bpb_sig
.394071		e2 20		sep #$20	                SEP #$20        ; set A short
.394073		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.394076		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.394078		d0 07		bne $394081	                BNE not_bpb             ; No: signal we could find the volume ID
.39407a		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.39407d		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.39407f		f0 05		beq $394086	                BEQ get_first_sec       ; Yes: we have an volume ID
.394081		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.394083		82 bb 00	brl $394141	                BRL ret_failure
.394086						get_first_sec
.394086		c2 20		rep #$20	                REP #$20        ; set A long
.394088		ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.39408b		8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.39408e		ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.394091		8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.394094		ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.394097		8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.39409a		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.39409b		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.39409e		6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.3940a1		8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.3940a4		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.3940a7		69 00 00	adc #$0000	                ADC #0
.3940aa		8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.3940ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3940af		a2 00 00	ldx #$0000	                LDX #0
.3940b2		bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.3940b6		9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.3940ba		e8		inx		                INX
.3940bb		e0 04 00	cpx #$0004	                CPX #4
.3940be		d0 f2		bne $3940b2	                BNE cpy_secperfat
.3940c0		ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.3940c3		0a		asl a		                ASL A
.3940c4		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.3940c7		ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.3940ca		2a		rol a		                ROL A
.3940cb		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.3940ce		ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.3940d1		2a		rol a		                ROL A
.3940d2		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.3940d5		ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.3940d8		2a		rol a		                ROL A
.3940d9		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.3940dc		18		clc		                CLC
.3940dd		ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.3940e0		6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.3940e3		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.3940e6		ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.3940e9		6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.3940ec		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.3940ef		ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.3940f2		6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.3940f5		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.3940f8		ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.3940fb		6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.3940fe		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.394101		e2 20		sep #$20	                SEP #$20        ; set A short
.394103		ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.394106		8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.394109		18		clc		                CLC
.39410a		ad 14 a0	lda $38a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.39410d		6d 10 a0	adc $38a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.394110		8d 18 a0	sta $38a018	                STA FAT2_BEGIN_LBA
.394113		ad 15 a0	lda $38a015	                LDA FAT_BEGIN_LBA+1
.394116		6d 11 a0	adc $38a011	                ADC SEC_PER_FAT+1
.394119		8d 19 a0	sta $38a019	                STA FAT2_BEGIN_LBA+1
.39411c		ad 16 a0	lda $38a016	                LDA FAT_BEGIN_LBA+2
.39411f		6d 12 a0	adc $38a012	                ADC SEC_PER_FAT+2
.394122		8d 1a a0	sta $38a01a	                STA FAT2_BEGIN_LBA+2
.394125		ad 17 a0	lda $38a017	                LDA FAT_BEGIN_LBA+3
.394128		6d 13 a0	adc $38a013	                ADC SEC_PER_FAT+3
.39412b		8d 1b a0	sta $38a01b	                STA FAT2_BEGIN_LBA+3
.39412e		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.394130		8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.394133		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.394135		8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.394138						ret_success
.394138		e2 20		sep #$20	                SEP #$20        ; set A short
.39413a		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.39413c		28		plp		                PLP
.39413d		2b		pld		                PLD
.39413e		ab		plb		                PLB
.39413f		38		sec		                SEC
.394140		6b		rtl		                RTL
.394141						ret_failure
.394141		e2 20		sep #$20	                SEP #$20        ; set A short
.394143		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.394145		28		plp		                PLP
.394146		2b		pld		                PLD
.394147		ab		plb		                PLB
.394148		18		clc		                CLC
.394149		6b		rtl		                RTL
.39414a						DOS_TESTBOOT
.39414a		8b		phb		                PHB
.39414b		0b		phd		                PHD
.39414c		da		phx		                PHX
.39414d		08		php		                PHP
.39414e		48		pha		                PHA             ; begin setdbr macro
.39414f		08		php		                PHP
.394150		e2 20		sep #$20	                SEP #$20        ; set A short
.394152		a9 00		lda #$00	                LDA #0
.394154		48		pha		                PHA
.394155		ab		plb		                PLB
.394156		28		plp		                PLP
.394157		68		pla		                PLA             ; end setdbr macro
.394158		48		pha		                PHA             ; begin setdp macro
.394159		08		php		                PHP
.39415a		c2 20		rep #$20	                REP #$20        ; set A long
.39415c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39415f		5b		tcd		                TCD
.394160		28		plp		                PLP
.394161		68		pla		                PLA             ; end setdp macro
.394162		c2 10		rep #$10	                REP #$10        ; set X long
.394164						chk_dev
.394164		e2 20		sep #$20	                SEP #$20        ; set A short
.394166		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.394168		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.39416a		f0 24		beq $394190	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.39416c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39416e		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.394171		85 02		sta $0322	                STA @b BIOS_LBA
.394173		85 04		sta $0324	                STA @b BIOS_LBA+2
.394175		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.394178		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.39417a		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39417d		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.39417f		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.394183		b0 03		bcs $394188	                BCS chk_mbr_brl
.394185		82 47 00	brl $3941cf	                BRL done                    ; If failed... just return
.394188						chk_mbr_brl
.394188		e2 20		sep #$20	                SEP #$20        ; set A short
.39418a		af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.39418e		80 04		bra $394194	                BRA chk_brl
.394190		af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.394194		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.394196		f0 06		beq $39419e	                BEQ chk_magic               ; Yes: check for the magic text
.394198		c9 82		cmp #$82	                CMP #$82
.39419a		f0 02		beq $39419e	                BEQ chk_magic
.39419c		80 31		bra $3941cf	                BRA done                    ; No: just return
.39419e		a2 00 00	ldx #$0000	chk_magic       LDX #0
.3941a1		bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.3941a5		df d4 41 39	cmp $3941d4,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.3941a9		d0 24		bne $3941cf	                BNE done                    ; If it's not equal, just return
.3941ab		e8		inx		                INX                         ; Otherwise, check the next one
.3941ac		e0 08 00	cpx #$0008	                CPX #8
.3941af		d0 f0		bne $3941a1	                BNE magic_loop              ; Until we've checked all 8 bytes
.3941b1		c2 30		rep #$30	                REP #$30        ; set A&X long
.3941b3		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.3941b6		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.3941b9		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.3941bc		44 38 38	mvp #$38,#$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.3941bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3941c1		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.3941c3		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.3941c5		f0 04		beq $3941cb	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.3941c7		5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.3941cb		5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.3941cf		28		plp		done            PLP
.3941d0		2b		pld		                PLD
.3941d1		ab		plb		                PLB
.3941d2		fa		plx		                PLX
.3941d3		6b		rtl		                RTL
>3941d4		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.3941dc						DOS_CALC_LBA
.3941dc		8b		phb		                PHB
.3941dd		0b		phd		                PHD
.3941de		08		php		                PHP
.3941df		48		pha		                PHA             ; begin setdbr macro
.3941e0		08		php		                PHP
.3941e1		e2 20		sep #$20	                SEP #$20        ; set A short
.3941e3		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3941e5		48		pha		                PHA
.3941e6		ab		plb		                PLB
.3941e7		28		plp		                PLP
.3941e8		68		pla		                PLA             ; end setdbr macro
.3941e9		48		pha		                PHA             ; begin setdp macro
.3941ea		08		php		                PHP
.3941eb		c2 20		rep #$20	                REP #$20        ; set A long
.3941ed		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941f0		5b		tcd		                TCD
.3941f1		28		plp		                PLP
.3941f2		68		pla		                PLA             ; end setdp macro
.3941f3		c2 20		rep #$20	                REP #$20        ; set A long
.3941f5		38		sec		                SEC
.3941f6		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.3941f8		e9 02 00	sbc #$0002	                SBC #2
.3941fb		85 28		sta $0348	                STA DOS_TEMP
.3941fd		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3941ff		e9 00 00	sbc #$0000	                SBC #0
.394202		85 2a		sta $034a	                STA DOS_TEMP+2
.394204		e2 10		sep #$10	                SEP #$10        ; set X short
.394206		ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.394209		e0 01		cpx #$01	mult_loop       CPX #1
.39420b		f0 07		beq $394214	                BEQ add_offset
.39420d		06 28		asl $0348	                ASL DOS_TEMP
.39420f		26 28		rol $0348	                ROL DOS_TEMP
.394211		ca		dex		                DEX
.394212		80 f5		bra $394209	                BRA mult_loop
.394214		18		clc		add_offset      CLC
.394215		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.394217		6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.39421a		85 02		sta $0322	                STA BIOS_LBA
.39421c		a5 2a		lda $034a	                LDA DOS_TEMP+2
.39421e		6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.394221		85 04		sta $0324	                STA BIOS_LBA+2
.394223		28		plp		                PLP
.394224		2b		pld		                PLD
.394225		ab		plb		                PLB
.394226		6b		rtl		                RTL
.394227						DOS_GETCLUSTER
.394227		8b		phb		                PHB
.394228		0b		phd		                PHD
.394229		08		php		                PHP
.39422a		48		pha		                PHA             ; begin setdbr macro
.39422b		08		php		                PHP
.39422c		e2 20		sep #$20	                SEP #$20        ; set A short
.39422e		a9 00		lda #$00	                LDA #0
.394230		48		pha		                PHA
.394231		ab		plb		                PLB
.394232		28		plp		                PLP
.394233		68		pla		                PLA             ; end setdbr macro
.394234		48		pha		                PHA             ; begin setdp macro
.394235		08		php		                PHP
.394236		c2 20		rep #$20	                REP #$20        ; set A long
.394238		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39423b		5b		tcd		                TCD
.39423c		28		plp		                PLP
.39423d		68		pla		                PLA             ; end setdp macro
.39423e		c2 20		rep #$20	                REP #$20        ; set A long
.394240		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394242		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394244		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394246		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394248		22 dc 41 39	jsl $3941dc	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.39424c		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.394250		90 09		bcc $39425b	                BCC ret_failure
.394252						ret_success
.394252		e2 20		sep #$20	                SEP #$20        ; set A short
.394254		64 0e		stz $032e	                STZ DOS_STATUS
.394256		28		plp		                PLP
.394257		2b		pld		                PLD
.394258		ab		plb		                PLB
.394259		38		sec		                SEC
.39425a		6b		rtl		                RTL
.39425b						ret_failure
.39425b		e2 20		sep #$20	                SEP #$20        ; set A short
.39425d		85 0e		sta $032e	                STA DOS_STATUS
.39425f		28		plp		                PLP
.394260		2b		pld		                PLD
.394261		ab		plb		                PLB
.394262		18		clc		                CLC
.394263		6b		rtl		                RTL
.394264						DOS_PUTCLUSTER
.394264		8b		phb		                PHB
.394265		0b		phd		                PHD
.394266		08		php		                PHP
.394267		48		pha		                PHA             ; begin setdbr macro
.394268		08		php		                PHP
.394269		e2 20		sep #$20	                SEP #$20        ; set A short
.39426b		a9 00		lda #$00	                LDA #0
.39426d		48		pha		                PHA
.39426e		ab		plb		                PLB
.39426f		28		plp		                PLP
.394270		68		pla		                PLA             ; end setdbr macro
.394271		48		pha		                PHA             ; begin setdp macro
.394272		08		php		                PHP
.394273		c2 20		rep #$20	                REP #$20        ; set A long
.394275		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394278		5b		tcd		                TCD
.394279		28		plp		                PLP
.39427a		68		pla		                PLA             ; end setdp macro
.39427b		c2 20		rep #$20	                REP #$20        ; set A long
.39427d		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.39427f		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394281		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394283		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394285		22 dc 41 39	jsl $3941dc	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394289		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.39428d		90 09		bcc $394298	                BCC ret_failure
.39428f						ret_success
.39428f		e2 20		sep #$20	                SEP #$20        ; set A short
.394291		64 0e		stz $032e	                STZ DOS_STATUS
.394293		28		plp		                PLP
.394294		2b		pld		                PLD
.394295		ab		plb		                PLB
.394296		38		sec		                SEC
.394297		6b		rtl		                RTL
.394298						ret_failure
.394298		e2 20		sep #$20	                SEP #$20        ; set A short
.39429a		85 0e		sta $032e	                STA DOS_STATUS
.39429c		28		plp		                PLP
.39429d		2b		pld		                PLD
.39429e		ab		plb		                PLB
.39429f		18		clc		                CLC
.3942a0		6b		rtl		                RTL
>3942a1		40 46 00			DOS_FDC_NAME    .null "@F"
.3942a4						DOS_FDC_DESC
>3942a4		a1 42 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>3942a8		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>3942a9		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>3942ad		40 53 00			DOS_SDC_NAME    .null "@S"
.3942b0						DOS_SDC_DESC
>3942b0		ad 42 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>3942b4		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>3942b5		a4 42 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>3942b9		40 48 00			DOS_HDC_NAME    .null "@H"
.3942bc						DOS_HD_DESC
>3942bc		b9 42 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>3942c0		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>3942c1		b0 42 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.3942c5						DOS_PARSE_DEV
.3942c5		8b		phb		                PHB
.3942c6		0b		phd		                PHD
.3942c7		08		php		                PHP
.3942c8		48		pha		                PHA             ; begin setdbr macro
.3942c9		08		php		                PHP
.3942ca		e2 20		sep #$20	                SEP #$20        ; set A short
.3942cc		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3942ce		48		pha		                PHA
.3942cf		ab		plb		                PLB
.3942d0		28		plp		                PLP
.3942d1		68		pla		                PLA             ; end setdbr macro
.3942d2		48		pha		                PHA             ; begin setdp macro
.3942d3		08		php		                PHP
.3942d4		c2 20		rep #$20	                REP #$20        ; set A long
.3942d6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942d9		5b		tcd		                TCD
.3942da		28		plp		                PLP
.3942db		68		pla		                PLA             ; end setdp macro
.3942dc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3942de		af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.3942e2		85 28		sta $0348	                STA DOS_TEMP
.3942e4		af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.3942e8		85 2a		sta $034a	                STA DOS_TEMP+2
.3942ea		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.3942ed		85 48		sta $0368	                STA DOS_STR2_PTR
.3942ef		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.3942f2		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.3942f4		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.3942f7		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3942f9		85 44		sta $0364	                STA DOS_STR1_PTR
.3942fb		c8		iny		                INY
.3942fc		c8		iny		                INY
.3942fd		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3942ff		85 46		sta $0366	                STA DOS_STR1_PTR+2
.394301		e2 20		sep #$20	                SEP #$20        ; set A short
.394303		a0 00 00	ldy #$0000	                LDY #0
.394306		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.394308		f0 24		beq $39432e	                BEQ found                   ; If it's NULL, we found a match
.39430a		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.39430c		d0 03		bne $394311	                BNE next_device             ; If no match, try to load the next device
.39430e		c8		iny		                INY                         ; Go to the next character
.39430f		80 f5		bra $394306	                BRA cmp_loop
.394311						next_device
.394311		c2 20		rep #$20	                REP #$20        ; set A long
.394313		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.394316		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394318		48		pha		                PHA
.394319		c8		iny		                INY
.39431a		c8		iny		                INY
.39431b		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39431d		85 2a		sta $034a	                STA DOS_TEMP+2
.39431f		68		pla		                PLA
.394320		85 28		sta $0348	                STA DOS_TEMP
.394322		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.394324		d0 ce		bne $3942f4	                BNE dev_loop                ; No: check this device
.394326		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394328		d0 ca		bne $3942f4	                BNE dev_loop
.39432a		28		plp		done            PLP                         ; Otherwise, return having not found a match
.39432b		2b		pld		                PLD
.39432c		ab		plb		                PLB
.39432d		6b		rtl		                RTL
.39432e		22 3f 43 39	jsl $39433f	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.394332		e2 20		sep #$20	                SEP #$20        ; set A short
.394334		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.394337		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394339		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.39433d		80 eb		bra $39432a	                BRA done
.39433f						DOS_ADJUSTPATH
.39433f		da		phx		                PHX
.394340		5a		phy		                PHY
.394341		8b		phb		                PHB
.394342		0b		phd		                PHD
.394343		08		php		                PHP
.394344		48		pha		                PHA             ; begin setdbr macro
.394345		08		php		                PHP
.394346		e2 20		sep #$20	                SEP #$20        ; set A short
.394348		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39434a		48		pha		                PHA
.39434b		ab		plb		                PLB
.39434c		28		plp		                PLP
.39434d		68		pla		                PLA             ; end setdbr macro
.39434e		48		pha		                PHA             ; begin setdp macro
.39434f		08		php		                PHP
.394350		c2 20		rep #$20	                REP #$20        ; set A long
.394352		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394355		5b		tcd		                TCD
.394356		28		plp		                PLP
.394357		68		pla		                PLA             ; end setdp macro
.394358		c2 30		rep #$30	                REP #$30        ; set A&X long
.39435a		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.39435c		98		tya		                TYA                             ; Compute the address of the first source byte
.39435d		18		clc		                CLC
.39435e		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.394361		aa		tax		                TAX
.394362		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.394365		a8		tay		                TAY
.394366		38		sec		                SEC                             ; Compute the number of bytes to copy
.394367		a9 00 01	lda #$0100	                LDA #256
.39436a		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.39436c		54 00 00	mvn #$00,#$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.39436f		28		plp		                PLP
.394370		2b		pld		                PLD
.394371		ab		plb		                PLB
.394372		7a		ply		                PLY
.394373		fa		plx		                PLX
.394374		6b		rtl		                RTL
.394375						DOS_PARSE_PATH
.394375		8b		phb		                PHB
.394376		0b		phd		                PHD
.394377		08		php		                PHP
.394378		48		pha		                PHA             ; begin setdbr macro
.394379		08		php		                PHP
.39437a		e2 20		sep #$20	                SEP #$20        ; set A short
.39437c		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39437e		48		pha		                PHA
.39437f		ab		plb		                PLB
.394380		28		plp		                PLP
.394381		68		pla		                PLA             ; end setdbr macro
.394382		48		pha		                PHA             ; begin setdp macro
.394383		08		php		                PHP
.394384		c2 20		rep #$20	                REP #$20        ; set A long
.394386		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394389		5b		tcd		                TCD
.39438a		28		plp		                PLP
.39438b		68		pla		                PLA             ; end setdp macro
.39438c		c2 10		rep #$10	                REP #$10        ; set X long
.39438e		e2 20		sep #$20	                SEP #$20        ; set A short
.394390		a2 00 00	ldx #$0000	                LDX #0
.394393		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.394395		f0 1b		beq $3943b2	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.394397		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.394399		b0 05		bcs $3943a0	                BGE check_case          ; No: check the case
.39439b		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.39439d		82 64 00	brl $394404	                BRL ret_failure
.3943a0		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.3943a2		90 08		bcc $3943ac	                BLT next_char
.3943a4		c9 7b		cmp #$7b	                CMP #'z'+1
.3943a6		b0 04		bcs $3943ac	                BGE next_char
.3943a8		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.3943aa		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3943ac		e8		inx		next_char       INX                     ; Move to the next character
.3943ad		e0 00 01	cpx #$0100	                CPX #$100
.3943b0		d0 e1		bne $394393	                BNE upcase_loop
.3943b2		22 c5 42 39	jsl $3942c5	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.3943b6		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.3943b8		c9 3a		cmp #$3a	                CMP #':'
.3943ba		d0 07		bne $3943c3	                BNE clr_name            ; If not colon, treat it as a file name
.3943bc		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.3943bf		22 3f 43 39	jsl $39433f	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.3943c3		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.3943c6		a9 20		lda #$20	                LDA #' '
.3943c8		99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.3943cb		c8		iny		                INY
.3943cc		c0 0b 00	cpy #$000b	                CPY #11
.3943cf		d0 f7		bne $3943c8	                BNE clr_loop
.3943d1		a2 00 00	ldx #$0000	                LDX #0
.3943d4		a0 00 00	ldy #$0000	                LDY #0
.3943d7		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.3943d9		f0 20		beq $3943fb	                BEQ ret_success         ; If NULL: we've finished parsing the path
.3943db		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.3943dd		f0 0a		beq $3943e9	                BEQ cpy_ext             ; And move to the extension
.3943df		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.3943e2		e8		inx		                INX
.3943e3		c8		iny		                INY                     ; Move to the next character
.3943e4		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.3943e7		d0 ee		bne $3943d7	                BNE cpy_name_loop       ; No: process this one
.3943e9		e8		inx		cpy_ext         INX                     ; Skip the dot
.3943ea		a0 08 00	ldy #$0008	                LDY #8
.3943ed		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.3943ef		f0 0a		beq $3943fb	                BEQ ret_success         ; If it's NULL, we've finished
.3943f1		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.3943f4		e8		inx		                INX
.3943f5		c8		iny		                INY                     ; Move to the next character
.3943f6		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.3943f9		d0 f2		bne $3943ed	                BNE cpy_ext_loop        ; No: process this one
.3943fb						ret_success
.3943fb		e2 20		sep #$20	                SEP #$20        ; set A short
.3943fd		64 0e		stz $032e	                STZ DOS_STATUS
.3943ff		28		plp		                PLP
.394400		2b		pld		                PLD
.394401		ab		plb		                PLB
.394402		38		sec		                SEC
.394403		6b		rtl		                RTL
.394404						ret_failure
.394404		e2 20		sep #$20	                SEP #$20        ; set A short
.394406		85 0e		sta $032e	                STA DOS_STATUS
.394408		28		plp		                PLP
.394409		2b		pld		                PLD
.39440a		ab		plb		                PLB
.39440b		18		clc		                CLC
.39440c		6b		rtl		                RTL
.39440d						DOS_FINDFILE
.39440d		8b		phb		                PHB
.39440e		0b		phd		                PHD
.39440f		08		php		                PHP
.394410		48		pha		                PHA             ; begin setdbr macro
.394411		08		php		                PHP
.394412		e2 20		sep #$20	                SEP #$20        ; set A short
.394414		a9 00		lda #$00	                LDA #0
.394416		48		pha		                PHA
.394417		ab		plb		                PLB
.394418		28		plp		                PLP
.394419		68		pla		                PLA             ; end setdbr macro
.39441a		48		pha		                PHA             ; begin setdp macro
.39441b		08		php		                PHP
.39441c		c2 20		rep #$20	                REP #$20        ; set A long
.39441e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394421		5b		tcd		                TCD
.394422		28		plp		                PLP
.394423		68		pla		                PLA             ; end setdp macro
.394424		c2 30		rep #$30	                REP #$30        ; set A&X long
.394426		22 75 43 39	jsl $394375	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.39442a		b0 05		bcs $394431	                BCS mount                       ; If success: try to open the directory
.39442c		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.39442d		2b		pld		                PLD
.39442e		ab		plb		                PLB
.39442f		18		clc		                CLC
.394430		6b		rtl		                RTL
.394431		22 8f 3f 39	jsl $393f8f	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.394435		b0 07		bcs $39443e	                BCS get_directory
.394437		e2 20		sep #$20	                SEP #$20        ; set A short
.394439		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.39443b		82 56 00	brl $394494	                BRL ret_failure
.39443e						get_directory
.39443e		c2 20		rep #$20	                REP #$20        ; set A long
.394440		22 44 3c 39	jsl $393c44	                JSL DOS_DIROPEN                 ; Get the directory
.394444		b0 07		bcs $39444d	                BCS scan_entries                ; If success: start scanning the directory entries
.394446		e2 20		sep #$20	                SEP #$20        ; set A short
.394448		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.39444a		82 47 00	brl $394494	                BRL ret_failure
.39444d		22 c3 3c 39	jsl $393cc3	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.394451						scan_loop
.394451		e2 20		sep #$20	                SEP #$20        ; set A short
.394453		a0 00 00	ldy #$0000	                LDY #0
.394456		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.394458		d0 05		bne $39445f	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.39445a		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.39445c		82 35 00	brl $394494	                BRL ret_failure
.39445f		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.394461		f0 26		beq $394489	                BEQ next_entry                  ; Go to the next entry
.394463		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.394466		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394468		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.39446a		d0 1d		bne $394489	                BNE next_entry                  ; Yes: skip it!
.39446c		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.39446e		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.394470		f0 17		beq $394489	                BEQ next_entry                  ; Yes: skip it!
.394472		a2 00 00	ldx #$0000	                LDX #0
.394475		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.394478		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.39447a		df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.39447e		d0 09		bne $394489	                BNE next_entry                  ; If not equal: try the next entry
.394480		c8		iny		                INY                             ; Advance to the next character
.394481		e8		inx		                INX
.394482		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.394485		f0 16		beq $39449d	                BEQ match                       ; Yes: we have a match!
.394487		80 ef		bra $394478	                BRA scan_cmp_loop               ; No: keep checking
.394489		22 de 3c 39	jsl $393cde	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.39448d		90 05		bcc $394494	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.39448f		82 bf ff	brl $394451	                BRL scan_loop                   ; If found: keep scanning
.394492		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.394494						ret_failure
.394494		e2 20		sep #$20	                SEP #$20        ; set A short
.394496		85 0e		sta $032e	                STA DOS_STATUS
.394498		28		plp		                PLP
.394499		2b		pld		                PLD
.39449a		ab		plb		                PLB
.39449b		18		clc		                CLC
.39449c		6b		rtl		                RTL
.39449d						match
.39449d		c2 20		rep #$20	                REP #$20        ; set A long
.39449f		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.3944a2		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3944a4		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.3944a6		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3944a9		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3944ab		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3944ad						ret_success
.3944ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3944af		64 0e		stz $032e	                STZ DOS_STATUS
.3944b1		28		plp		                PLP
.3944b2		2b		pld		                PLD
.3944b3		ab		plb		                PLB
.3944b4		38		sec		                SEC
.3944b5		6b		rtl		                RTL
.3944b6						ENTRYFORCLUS12
.3944b6		8b		phb		                PHB
.3944b7		0b		phd		                PHD
.3944b8		08		php		                PHP
.3944b9		48		pha		                PHA             ; begin setdbr macro
.3944ba		08		php		                PHP
.3944bb		e2 20		sep #$20	                SEP #$20        ; set A short
.3944bd		a9 00		lda #$00	                LDA #0
.3944bf		48		pha		                PHA
.3944c0		ab		plb		                PLB
.3944c1		28		plp		                PLP
.3944c2		68		pla		                PLA             ; end setdbr macro
.3944c3		48		pha		                PHA             ; begin setdp macro
.3944c4		08		php		                PHP
.3944c5		c2 20		rep #$20	                REP #$20        ; set A long
.3944c7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3944ca		5b		tcd		                TCD
.3944cb		28		plp		                PLP
.3944cc		68		pla		                PLA             ; end setdp macro
.3944cd		c2 30		rep #$30	                REP #$30        ; set A&X long
.3944cf		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.3944d1		0a		asl a		                ASL A
.3944d2		85 28		sta $0348	                STA DOS_TEMP
.3944d4		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3944d6		2a		rol a		                ROL A
.3944d7		85 2a		sta $034a	                STA DOS_TEMP+2
.3944d9		18		clc		                CLC
.3944da		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3944dc		65 28		adc $0348	                ADC DOS_TEMP
.3944de		85 28		sta $0348	                STA DOS_TEMP
.3944e0		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3944e2		65 2a		adc $034a	                ADC DOS_TEMP+2
.3944e4		85 2a		sta $034a	                STA DOS_TEMP+2
.3944e6		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.3944e8		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.3944ea		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.3944ec		29 ff 03	and #$03ff	                AND #$003FF
.3944ef		aa		tax		                TAX
.3944f0		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3944f2		66 28		ror $0348	                ROR DOS_TEMP
.3944f4		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3944f6		66 28		ror $0348	                ROR DOS_TEMP
.3944f8		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3944fa		66 28		ror $0348	                ROR DOS_TEMP
.3944fc		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3944fe		66 28		ror $0348	                ROR DOS_TEMP
.394500		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394502		66 28		ror $0348	                ROR DOS_TEMP
.394504		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394506		66 28		ror $0348	                ROR DOS_TEMP
.394508		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39450a		66 28		ror $0348	                ROR DOS_TEMP
.39450c		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39450e		66 28		ror $0348	                ROR DOS_TEMP
.394510		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394512		66 28		ror $0348	                ROR DOS_TEMP
.394514		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.394515		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.394519		65 28		adc $0348	                ADC DOS_TEMP
.39451b		85 24		sta $0344	                STA DOS_FAT_LBA
.39451d		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394521		65 2a		adc $034a	                ADC DOS_TEMP+2
.394523		85 26		sta $0346	                STA DOS_FAT_LBA+2
.394525		28		plp		                PLP
.394526		2b		pld		                PLD
.394527		ab		plb		                PLB
.394528		6b		rtl		                RTL
.394529						FATFORCLUSTER12
.394529		8b		phb		                PHB
.39452a		0b		phd		                PHD
.39452b		08		php		                PHP
.39452c		48		pha		                PHA             ; begin setdbr macro
.39452d		08		php		                PHP
.39452e		e2 20		sep #$20	                SEP #$20        ; set A short
.394530		a9 00		lda #$00	                LDA #0
.394532		48		pha		                PHA
.394533		ab		plb		                PLB
.394534		28		plp		                PLP
.394535		68		pla		                PLA             ; end setdbr macro
.394536		48		pha		                PHA             ; begin setdp macro
.394537		08		php		                PHP
.394538		c2 20		rep #$20	                REP #$20        ; set A long
.39453a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39453d		5b		tcd		                TCD
.39453e		28		plp		                PLP
.39453f		68		pla		                PLA             ; end setdp macro
.394540		c2 30		rep #$30	                REP #$30        ; set A&X long
.394542		a2 00 00	ldx #$0000	                LDX #0
.394545		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.394548		8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.39454c		e8		inx		                INX
.39454d		e8		inx		                INX
.39454e		e0 00 04	cpx #$0400	                CPX #1024
.394551		d0 f5		bne $394548	                BNE clr_loop
.394553		22 b6 44 39	jsl $3944b6	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.394557		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.394559		85 02		sta $0322	                STA BIOS_LBA
.39455b		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.39455d		85 04		sta $0324	                STA BIOS_LBA+2
.39455f		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.394562		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394564		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394567		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394569		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.39456d		90 17		bcc $394586	                BCC error
.39456f		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.394571		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.394574		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394576		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394579		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39457b		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.39457f		90 05		bcc $394586	                BCC error
.394581		28		plp		                PLP
.394582		2b		pld		                PLD
.394583		ab		plb		                PLB
.394584		38		sec		                SEC
.394585		6b		rtl		                RTL
.394586						error
.394586		e2 20		sep #$20	                SEP #$20        ; set A short
.394588		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.39458a		85 0e		sta $032e	                STA DOS_STATUS
.39458c		28		plp		                PLP
.39458d		2b		pld		                PLD
.39458e		ab		plb		                PLB
.39458f		18		clc		                CLC
.394590		6b		rtl		                RTL
.394591						FATFORCLUSTER32
.394591		8b		phb		                PHB
.394592		0b		phd		                PHD
.394593		48		pha		                PHA             ; begin setdbr macro
.394594		08		php		                PHP
.394595		e2 20		sep #$20	                SEP #$20        ; set A short
.394597		a9 00		lda #$00	                LDA #0
.394599		48		pha		                PHA
.39459a		ab		plb		                PLB
.39459b		28		plp		                PLP
.39459c		68		pla		                PLA             ; end setdbr macro
.39459d		48		pha		                PHA             ; begin setdp macro
.39459e		08		php		                PHP
.39459f		c2 20		rep #$20	                REP #$20        ; set A long
.3945a1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3945a4		5b		tcd		                TCD
.3945a5		28		plp		                PLP
.3945a6		68		pla		                PLA             ; end setdp macro
.3945a7		c2 30		rep #$30	                REP #$30        ; set A&X long
.3945a9		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3945ab		85 24		sta $0344	                STA DOS_FAT_LBA
.3945ad		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3945af		85 26		sta $0346	                STA DOS_FAT_LBA+2
.3945b1		a2 07 00	ldx #$0007	                LDX #7
.3945b4		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.3945b6		66 24		ror $0344	                ROR DOS_FAT_LBA
.3945b8		ca		dex		                DEX
.3945b9		d0 f9		bne $3945b4	                BNE div_loop
.3945bb		18		clc		                CLC
.3945bc		a5 24		lda $0344	                LDA DOS_FAT_LBA
.3945be		6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.3945c2		85 24		sta $0344	                STA DOS_FAT_LBA
.3945c4		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.3945c6		6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.3945ca		85 26		sta $0346	                STA DOS_FAT_LBA+2
.3945cc		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.3945ce		85 02		sta $0322	                STA BIOS_LBA
.3945d0		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.3945d2		85 04		sta $0324	                STA BIOS_LBA+2
.3945d4		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.3945d7		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3945d9		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3945dc		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3945de		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.3945e2		b0 06		bcs $3945ea	                BCS find_entry
.3945e4		e2 20		sep #$20	                SEP #$20        ; set A short
.3945e6		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3945e8		80 0e		bra $3945f8	                BRA ret_failure
.3945ea						find_entry
.3945ea		c2 20		rep #$20	                REP #$20        ; set A long
.3945ec		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3945ee		0a		asl a		                ASL A
.3945ef		0a		asl a		                ASL A                           ; * 4
.3945f0		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.3945f3		aa		tax		                TAX                             ; X should be the offset within the sector
.3945f4		2b		pld		ret_success     PLD
.3945f5		ab		plb		                PLB
.3945f6		38		sec		                SEC                             ; return success
.3945f7		6b		rtl		                RTL
.3945f8		2b		pld		ret_failure     PLD
.3945f9		ab		plb		                PLB
.3945fa		18		clc		                CLC                             ; Return failure
.3945fb		6b		rtl		                RTL
.3945fc						NEXTCLUSTER
.3945fc		08		php		                PHP
.3945fd		e2 20		sep #$20	                SEP #$20        ; set A short
.3945ff		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394603		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394605		d0 08		bne $39460f	                BNE fat32                       ; No: assume it's FAT32
.394607		22 1d 46 39	jsl $39461d	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.39460b		90 0d		bcc $39461a	                BCC pass_failure                ; If there was an error, pass it up the chain
.39460d		80 06		bra $394615	                BRA ret_success
.39460f		22 85 46 39	jsl $394685	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394613		90 05		bcc $39461a	                BCC pass_failure                ; If there was an error, pass it up the chain
.394615		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394617		28		plp		                PLP
.394618		38		sec		                SEC
.394619		6b		rtl		                RTL
.39461a		28		plp		pass_failure    PLP
.39461b		18		clc		                CLC
.39461c		6b		rtl		                RTL
.39461d						NEXTCLUSTER12
.39461d		8b		phb		                    PHB
.39461e		0b		phd		                    PHD
.39461f		08		php		                    PHP
.394620		48		pha		                PHA             ; begin setdbr macro
.394621		08		php		                PHP
.394622		e2 20		sep #$20	                SEP #$20        ; set A short
.394624		a9 00		lda #$00	                LDA #0
.394626		48		pha		                PHA
.394627		ab		plb		                PLB
.394628		28		plp		                PLP
.394629		68		pla		                PLA             ; end setdbr macro
.39462a		48		pha		                PHA             ; begin setdp macro
.39462b		08		php		                PHP
.39462c		c2 20		rep #$20	                REP #$20        ; set A long
.39462e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394631		5b		tcd		                TCD
.394632		28		plp		                PLP
.394633		68		pla		                PLA             ; end setdp macro
.394634		c2 30		rep #$30	                REP #$30        ; set A&X long
.394636		22 29 45 39	jsl $394529	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.39463a		b0 03		bcs $39463f	                    BCS chk_clus_id
.39463c		82 41 00	brl $394680	                    BRL pass_failure
.39463f		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.394641		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394644		d0 0d		bne $394653	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394646						is_even
.394646		c2 20		rep #$20	                REP #$20        ; set A long
.394648		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.39464c		29 ff 0f	and #$0fff	                    AND #$0FFF
.39464f		85 28		sta $0348	                    STA DOS_TEMP
.394651		80 0c		bra $39465f	                    BRA check_id
.394653						is_odd
.394653		c2 20		rep #$20	                REP #$20        ; set A long
.394655		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394659		4a		lsr a		                    LSR A
.39465a		4a		lsr a		                    LSR A
.39465b		4a		lsr a		                    LSR A
.39465c		4a		lsr a		                    LSR A
.39465d		85 28		sta $0348	                    STA DOS_TEMP
.39465f						check_id
.39465f		c2 20		rep #$20	                REP #$20        ; set A long
.394661		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.394663		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394666		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394669		f0 0f		beq $39467a	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.39466b		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.39466d		85 10		sta $0330	                    STA DOS_CLUS_ID
.39466f		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.394671						ret_success
.394671		e2 20		sep #$20	                SEP #$20        ; set A short
.394673		64 0e		stz $032e	                    STZ DOS_STATUS
.394675		28		plp		                    PLP
.394676		2b		pld		                    PLD
.394677		ab		plb		                    PLB
.394678		38		sec		                    SEC
.394679		6b		rtl		                    RTL
.39467a						no_more
.39467a		e2 20		sep #$20	                SEP #$20        ; set A short
.39467c		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.39467e		85 0e		sta $032e	                    STA DOS_STATUS
.394680		28		plp		pass_failure        PLP
.394681		2b		pld		                    PLD
.394682		ab		plb		                    PLB
.394683		18		clc		                    CLC
.394684		6b		rtl		                    RTL
.394685						NEXTCLUSTER32
.394685		8b		phb		                PHB
.394686		0b		phd		                PHD
.394687		08		php		                PHP
.394688		48		pha		                PHA             ; begin setdbr macro
.394689		08		php		                PHP
.39468a		e2 20		sep #$20	                SEP #$20        ; set A short
.39468c		a9 00		lda #$00	                LDA #0
.39468e		48		pha		                PHA
.39468f		ab		plb		                PLB
.394690		28		plp		                PLP
.394691		68		pla		                PLA             ; end setdbr macro
.394692		48		pha		                PHA             ; begin setdp macro
.394693		08		php		                PHP
.394694		c2 20		rep #$20	                REP #$20        ; set A long
.394696		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394699		5b		tcd		                TCD
.39469a		28		plp		                PLP
.39469b		68		pla		                PLA             ; end setdp macro
.39469c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39469e		22 91 45 39	jsl $394591	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.3946a2		90 53		bcc $3946f7	                BCC ret_failure                 ; If it did not work, return the error
.3946a4		e2 20		sep #$20	                SEP #$20        ; set A short
.3946a6		bf 00 a5 38	lda $38a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.3946aa		85 28		sta $0348	                STA DOS_TEMP
.3946ac		bf 01 a5 38	lda $38a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.3946b0		85 29		sta $0349	                STA DOS_TEMP+1
.3946b2		bf 02 a5 38	lda $38a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.3946b6		85 2a		sta $034a	                STA DOS_TEMP+2
.3946b8		bf 03 a5 38	lda $38a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.3946bc		85 2b		sta $034b	                STA DOS_TEMP+3
.3946be		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.3946c0		c9 ff		cmp #$ff	                CMP #$FF
.3946c2		d0 18		bne $3946dc	                BNE found_next
.3946c4		a5 29		lda $0349	                LDA DOS_TEMP+1
.3946c6		c9 ff		cmp #$ff	                CMP #$FF
.3946c8		d0 12		bne $3946dc	                BNE found_next
.3946ca		a5 2a		lda $034a	                LDA DOS_TEMP+2
.3946cc		c9 ff		cmp #$ff	                CMP #$FF
.3946ce		d0 0c		bne $3946dc	                BNE found_next
.3946d0		a5 2b		lda $034b	                LDA DOS_TEMP+3
.3946d2		c9 0f		cmp #$0f	                CMP #$0F
.3946d4		d0 06		bne $3946dc	                BNE found_next                  ; No: return this cluster as the next
.3946d6		e2 20		sep #$20	                SEP #$20        ; set A short
.3946d8		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.3946da		80 1b		bra $3946f7	                BRA ret_failure
.3946dc						found_next
.3946dc		e2 20		sep #$20	                SEP #$20        ; set A short
.3946de		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.3946e0		85 10		sta $0330	                STA DOS_CLUS_ID
.3946e2		a5 29		lda $0349	                LDA DOS_TEMP+1
.3946e4		85 11		sta $0331	                STA DOS_CLUS_ID+1
.3946e6		a5 2a		lda $034a	                LDA DOS_TEMP+2
.3946e8		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3946ea		a5 2b		lda $034b	                LDA DOS_TEMP+3
.3946ec		85 13		sta $0333	                STA DOS_CLUS_ID+3
.3946ee						ret_success
.3946ee		e2 20		sep #$20	                SEP #$20        ; set A short
.3946f0		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.3946f2		28		plp		                PLP
.3946f3		2b		pld		                PLD
.3946f4		ab		plb		                PLB
.3946f5		38		sec		                SEC
.3946f6		6b		rtl		                RTL
.3946f7						ret_failure
.3946f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3946f9		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.3946fb		28		plp		                PLP
.3946fc		2b		pld		                PLD
.3946fd		ab		plb		                PLB
.3946fe		18		clc		                CLC
.3946ff		6b		rtl		                RTL
.394700						DOS_READNEXT
.394700		08		php		                PHP
.394701		c2 30		rep #$30	                REP #$30        ; set A&X long
.394703		22 fc 45 39	jsl $3945fc	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394707		90 09		bcc $394712	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394709		22 27 42 39	jsl $394227	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.39470d		90 03		bcc $394712	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.39470f		28		plp		ret_success     PLP
.394710		38		sec		                SEC
.394711		6b		rtl		                RTL
.394712		28		plp		pass_failure    PLP
.394713		18		clc		                CLC
.394714		6b		rtl		                RTL
.394715						DOS_FREECLUS
.394715		08		php		                PHP
.394716		48		pha		                PHA             ; begin setdp macro
.394717		08		php		                PHP
.394718		c2 20		rep #$20	                REP #$20        ; set A long
.39471a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39471d		5b		tcd		                TCD
.39471e		28		plp		                PLP
.39471f		68		pla		                PLA             ; end setdp macro
.394720		e2 20		sep #$20	                SEP #$20        ; set A short
.394722		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394726		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394728		d0 08		bne $394732	                BNE fat32                       ; No: assume it's FAT32
.39472a		22 a6 47 39	jsl $3947a6	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.39472e		90 0d		bcc $39473d	                BCC pass_failure                ; If there was an error, pass it up the chain
.394730		80 06		bra $394738	                BRA ret_success
.394732		22 7e 48 39	jsl $39487e	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394736		90 05		bcc $39473d	                BCC pass_failure                ; If there was an error, pass it up the chain
.394738		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.39473a		28		plp		                PLP
.39473b		38		sec		                SEC
.39473c		6b		rtl		                RTL
.39473d		28		plp		pass_failure    PLP
.39473e		18		clc		                CLC
.39473f		6b		rtl		                RTL
.394740						FDC_READ2FAT12
.394740		8b		phb		                    PHB
.394741		0b		phd		                    PHD
.394742		08		php		                    PHP
.394743		48		pha		                PHA             ; begin setdbr macro
.394744		08		php		                PHP
.394745		e2 20		sep #$20	                SEP #$20        ; set A short
.394747		a9 00		lda #$00	                LDA #0
.394749		48		pha		                PHA
.39474a		ab		plb		                PLB
.39474b		28		plp		                PLP
.39474c		68		pla		                PLA             ; end setdbr macro
.39474d		48		pha		                PHA             ; begin setdp macro
.39474e		08		php		                PHP
.39474f		c2 20		rep #$20	                REP #$20        ; set A long
.394751		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394754		5b		tcd		                TCD
.394755		28		plp		                PLP
.394756		68		pla		                PLA             ; end setdp macro
.394757		c2 30		rep #$30	                REP #$30        ; set A&X long
.394759		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.39475c		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.39475e		a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.394761		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394763		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394765		85 02		sta $0322	                    STA BIOS_LBA
.394767		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394769		85 04		sta $0324	                    STA BIOS_LBA+2
.39476b		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.39476f		b0 07		bcs $394778	                    BCS inc_sect2                   ; If success: start getting the second sector
.394771		e2 20		sep #$20	                SEP #$20        ; set A short
.394773		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394775		82 1c 00	brl $394794	                    BRL ret_failure
.394778						inc_sect2
.394778		c2 20		rep #$20	                REP #$20        ; set A long
.39477a		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.39477c		d0 02		bne $394780	                    BNE inc_buff_ptr
.39477e		e6 04		inc $0324	                    INC BIOS_LBA+2
.394780		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394783		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394785		a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394788		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.39478a		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.39478e		b0 0d		bcs $39479d	                    BCS ret_success                 ; If success, return success
.394790		e2 20		sep #$20	                SEP #$20        ; set A short
.394792		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394794						ret_failure
.394794		e2 20		sep #$20	                SEP #$20        ; set A short
.394796		85 00		sta $0320	                    STA BIOS_STATUS
.394798		28		plp		                    PLP
.394799		2b		pld		                    PLD
.39479a		ab		plb		                    PLB
.39479b		18		clc		                    CLC
.39479c		6b		rtl		                    RTL
.39479d						ret_success
.39479d		e2 20		sep #$20	                SEP #$20        ; set A short
.39479f		64 00		stz $0320	                    STZ BIOS_STATUS
.3947a1		28		plp		                    PLP
.3947a2		2b		pld		                    PLD
.3947a3		ab		plb		                    PLB
.3947a4		38		sec		                    SEC
.3947a5		6b		rtl		                    RTL
.3947a6						DOS_FREECLUS12
.3947a6		da		phx		                PHX
.3947a7		8b		phb		                PHB
.3947a8		0b		phd		                PHD
.3947a9		08		php		                PHP
.3947aa		48		pha		                PHA             ; begin setdbr macro
.3947ab		08		php		                PHP
.3947ac		e2 20		sep #$20	                SEP #$20        ; set A short
.3947ae		a9 00		lda #$00	                LDA #0
.3947b0		48		pha		                PHA
.3947b1		ab		plb		                PLB
.3947b2		28		plp		                PLP
.3947b3		68		pla		                PLA             ; end setdbr macro
.3947b4		48		pha		                PHA             ; begin setdp macro
.3947b5		08		php		                PHP
.3947b6		c2 20		rep #$20	                REP #$20        ; set A long
.3947b8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3947bb		5b		tcd		                TCD
.3947bc		28		plp		                PLP
.3947bd		68		pla		                PLA             ; end setdp macro
.3947be		c2 30		rep #$30	                REP #$30        ; set A&X long
.3947c0		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.3947c3		85 10		sta $0330	                STA DOS_CLUS_ID
.3947c5		a9 00 00	lda #$0000	                LDA #0
.3947c8		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3947ca		22 b6 44 39	jsl $3944b6	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.3947ce		22 40 47 39	jsl $394740	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.3947d2		b0 07		bcs $3947db	                BCS start_of_fat                ; If success, move X to the start of the FAT
.3947d4		e2 20		sep #$20	                SEP #$20        ; set A short
.3947d6		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3947d8		82 99 00	brl $394874	                BRL ret_failure
.3947db						start_of_fat
.3947db		c2 30		rep #$30	                REP #$30        ; set A&X long
.3947dd		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.3947df		89 01 00	bit #$0001	                BIT #1
.3947e2		d0 09		bne $3947ed	                BNE is_odd
.3947e4		bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.3947e8		29 ff 0f	and #$0fff	                AND #$0FFF
.3947eb		80 08		bra $3947f5	                BRA chk_available
.3947ed		bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.3947f1		4a		lsr a		                LSR A
.3947f2		4a		lsr a		                LSR A
.3947f3		4a		lsr a		                LSR A
.3947f4		4a		lsr a		                LSR A
.3947f5						chk_available
.3947f5		85 28		sta $0348	                STA DOS_TEMP
.3947f7		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.3947fa		f0 03		beq $3947ff	                BEQ chk_found
.3947fc		82 39 00	brl $394838	                BRL next_cluster                ; No: advance to the next cluster
.3947ff		8a		txa		chk_found       TXA
.394800		85 2a		sta $034a	                STA DOS_TEMP+2
.394802		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394804		89 01 00	bit #$0001	                BIT #1
.394807		d0 0d		bne $394816	                BNE is_odd2
.394809						is_even2
.394809		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.39480d		09 ff 0f	ora #$0fff	                ORA #$0FFF
.394810		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394814		80 0b		bra $394821	                BRA write_fat
.394816						is_odd2
.394816		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.39481a		09 f0 ff	ora #$fff0	                ORA #$FFF0
.39481d		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394821		22 48 49 39	jsl $394948	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394825		b0 07		bcs $39482e	                BCS ret_success                 ; If success: return success
.394827		e2 20		sep #$20	                SEP #$20        ; set A short
.394829		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.39482b		82 46 00	brl $394874	                BRL ret_failure
.39482e						ret_success
.39482e		e2 20		sep #$20	                SEP #$20        ; set A short
.394830		64 0e		stz $032e	                STZ DOS_STATUS
.394832		28		plp		                PLP
.394833		2b		pld		                PLD
.394834		ab		plb		                PLB
.394835		fa		plx		                PLX
.394836		38		sec		                SEC
.394837		6b		rtl		                RTL
.394838						next_cluster
.394838		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.39483a		d0 02		bne $39483e	                BNE calc_entry
.39483c		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.39483e		22 b6 44 39	jsl $3944b6	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394842		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394845		f0 03		beq $39484a	                BEQ chk_end_of_fat
.394847		82 93 ff	brl $3947dd	                BRL chk_cluster                 ; No: go back and check it too
.39484a						chk_end_of_fat
.39484a		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.39484c		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394850		d0 0f		bne $394861	                BNE next_2
.394852		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394854		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394858		d0 07		bne $394861	                BNE next_2                      ; No: get the next to sectors
.39485a		e2 20		sep #$20	                SEP #$20        ; set A short
.39485c		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.39485e		82 13 00	brl $394874	                BRL ret_failure
.394861						next_2
.394861		22 40 47 39	jsl $394740	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394865		90 06		bcc $39486d	                BCC fat_fail                    ; If failed: return error
.394867		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.39486a		82 70 ff	brl $3947dd	                BRL chk_cluster                 ; And start checking from there
.39486d						fat_fail
.39486d		e2 20		sep #$20	                SEP #$20        ; set A short
.39486f		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394871		82 00 00	brl $394874	                BRL ret_failure
.394874						ret_failure
.394874		e2 20		sep #$20	                SEP #$20        ; set A short
.394876		85 0e		sta $032e	                STA DOS_STATUS
.394878		28		plp		                PLP
.394879		2b		pld		                PLD
.39487a		ab		plb		                PLB
.39487b		fa		plx		                PLX
.39487c		18		clc		                CLC
.39487d		6b		rtl		                RTL
.39487e						DOS_FREECLUS32
.39487e		8b		phb		                PHB
.39487f		0b		phd		                PHD
.394880		08		php		                PHP
.394881		48		pha		                PHA             ; begin setdbr macro
.394882		08		php		                PHP
.394883		e2 20		sep #$20	                SEP #$20        ; set A short
.394885		a9 00		lda #$00	                LDA #0
.394887		48		pha		                PHA
.394888		ab		plb		                PLB
.394889		28		plp		                PLP
.39488a		68		pla		                PLA             ; end setdbr macro
.39488b		48		pha		                PHA             ; begin setdp macro
.39488c		08		php		                PHP
.39488d		c2 20		rep #$20	                REP #$20        ; set A long
.39488f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394892		5b		tcd		                TCD
.394893		28		plp		                PLP
.394894		68		pla		                PLA             ; end setdp macro
.394895		c2 30		rep #$30	                REP #$30        ; set A&X long
.394897		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.39489a		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39489c		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39489f		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3948a1		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.3948a5		85 02		sta $0322	                STA BIOS_LBA
.3948a7		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.3948ab		85 04		sta $0324	                STA BIOS_LBA+2
.3948ad		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.3948b1		b0 07		bcs $3948ba	                BCS initial_entry               ; If OK: set the initial entry to check
.3948b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3948b5		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.3948b7		82 6b 00	brl $394925	                BRL ret_failure
.3948ba						initial_entry
.3948ba		c2 20		rep #$20	                REP #$20        ; set A long
.3948bc		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.3948bf		85 10		sta $0330	                STA DOS_CLUS_ID
.3948c1		a9 00 00	lda #$0000	                LDA #0
.3948c4		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3948c6		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.3948c9		bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.3948cd		d0 06		bne $3948d5	                BNE next_entry                  ; No: move to the next entry
.3948cf		bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.3948d3		f0 36		beq $39490b	                BEQ found_free                  ; Yes: go to allocate and return it
.3948d5		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.3948d7		d0 02		bne $3948db	                BNE inc_ptr
.3948d9		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.3948db		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.3948dc		e8		inx		                INX
.3948dd		e8		inx		                INX
.3948de		e8		inx		                INX
.3948df		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.3948e2		90 e5		bcc $3948c9	                BLT chk_entry                   ; No: check this entry
.3948e4		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.3948e6		d0 18		bne $394900	                BNE get_block
.3948e8		e6 04		inc $0324	                INC BIOS_LBA+2
.3948ea		a5 04		lda $0324	                LDA BIOS_LBA+2
.3948ec		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.3948f0		90 0e		bcc $394900	                BLT get_block
.3948f2		a5 02		lda $0322	                LDA BIOS_LBA
.3948f4		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA
.3948f8		90 06		bcc $394900	                BLT get_block
.3948fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3948fc		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.3948fe		80 25		bra $394925	                BRA ret_failure
.394900		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.394904		90 1b		bcc $394921	                BCC ret_fat_error               ; If error: throw a FAT error
.394906		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394909		80 be		bra $3948c9	                BRA chk_entry                   ; Check this entry
.39490b						found_free
.39490b		c2 20		rep #$20	                REP #$20        ; set A long
.39490d		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394910		9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.394914		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394917		9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.39491b		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.39491f		b0 0d		bcs $39492e	                BCS ret_success                 ; If OK: return success
.394921						ret_fat_error
.394921		e2 20		sep #$20	                SEP #$20        ; set A short
.394923		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394925						ret_failure
.394925		e2 20		sep #$20	                SEP #$20        ; set A short
.394927		85 0e		sta $032e	                STA DOS_STATUS
.394929		28		plp		                PLP
.39492a		2b		pld		                PLD
.39492b		ab		plb		                PLB
.39492c		18		clc		                CLC
.39492d		6b		rtl		                RTL
.39492e						ret_success
.39492e		e2 20		sep #$20	                SEP #$20        ; set A short
.394930		64 0e		stz $032e	                STZ DOS_STATUS
.394932		28		plp		                PLP
.394933		2b		pld		                PLD
.394934		ab		plb		                PLB
.394935		38		sec		                SEC
.394936		6b		rtl		                RTL
.394937						DELCLUSTER
.394937		e2 20		sep #$20	                SEP #$20        ; set A short
.394939		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.39493d		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.39493f		d0 04		bne $394945	                BNE fat32                       ; No: assume it's FAT32
.394941		5c 8f 49 39	jmp $39498f	fat12           JML DELCLUSTER12
.394945		4c dd 49	jmp $3949dd	fat32           JMP DELCLUSTER32
.394948						WRITEFAT12
.394948		8b		phb		                PHB
.394949		0b		phd		                PHD
.39494a		48		pha		                PHA             ; begin setdbr macro
.39494b		08		php		                PHP
.39494c		e2 20		sep #$20	                SEP #$20        ; set A short
.39494e		a9 00		lda #$00	                LDA #0
.394950		48		pha		                PHA
.394951		ab		plb		                PLB
.394952		28		plp		                PLP
.394953		68		pla		                PLA             ; end setdbr macro
.394954		48		pha		                PHA             ; begin setdp macro
.394955		08		php		                PHP
.394956		c2 20		rep #$20	                REP #$20        ; set A long
.394958		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39495b		5b		tcd		                TCD
.39495c		28		plp		                PLP
.39495d		68		pla		                PLA             ; end setdp macro
.39495e		c2 30		rep #$30	                REP #$30        ; set A&X long
.394960		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394963		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394965		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394968		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39496a		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.39496c		85 02		sta $0322	                STA BIOS_LBA
.39496e		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394970		85 04		sta $0324	                STA BIOS_LBA+2
.394972		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394976		90 14		bcc $39498c	                BCC done
.394978		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.39497b		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39497d		a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394980		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394982		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394984		d0 02		bne $394988	                BNE put_second
.394986		e6 04		inc $0324	                INC BIOS_LBA+2
.394988		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.39498c		2b		pld		done            PLD
.39498d		ab		plb		                PLB
.39498e		6b		rtl		                RTL
.39498f						DELCLUSTER12
.39498f		8b		phb		                PHB
.394990		0b		phd		                PHD
.394991		08		php		                PHP
.394992		48		pha		                PHA             ; begin setdbr macro
.394993		08		php		                PHP
.394994		e2 20		sep #$20	                SEP #$20        ; set A short
.394996		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394998		48		pha		                PHA
.394999		ab		plb		                PLB
.39499a		28		plp		                PLP
.39499b		68		pla		                PLA             ; end setdbr macro
.39499c		48		pha		                PHA             ; begin setdp macro
.39499d		08		php		                PHP
.39499e		c2 20		rep #$20	                REP #$20        ; set A long
.3949a0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949a3		5b		tcd		                TCD
.3949a4		28		plp		                PLP
.3949a5		68		pla		                PLA             ; end setdp macro
.3949a6		c2 30		rep #$30	                REP #$30        ; set A&X long
.3949a8		22 29 45 39	jsl $394529	                JSL FATFORCLUSTER12
.3949ac		8a		txa		                TXA                             ; Check to see if the index is odd or even
.3949ad		89 01 00	bit #$0001	                BIT #1
.3949b0		d0 08		bne $3949ba	                BNE is_odd
.3949b2		bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.3949b5		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.3949b8		80 06		bra $3949c0	                BRA save_update
.3949ba		bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.3949bd		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.3949c0		9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.3949c3		22 48 49 39	jsl $394948	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.3949c7		b0 0b		bcs $3949d4	                BCS ret_success
.3949c9						ret_failure
.3949c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3949cb		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3949cd		85 0e		sta $032e	                STA DOS_STATUS
.3949cf		28		plp		                PLP
.3949d0		2b		pld		                PLD
.3949d1		ab		plb		                PLB
.3949d2		18		clc		                CLC
.3949d3		6b		rtl		                RTL
.3949d4						ret_success
.3949d4		e2 20		sep #$20	                SEP #$20        ; set A short
.3949d6		64 0e		stz $032e	                STZ DOS_STATUS
.3949d8		28		plp		                PLP
.3949d9		2b		pld		                PLD
.3949da		ab		plb		                PLB
.3949db		38		sec		                SEC
.3949dc		6b		rtl		                RTL
.3949dd						DELCLUSTER32
.3949dd		8b		phb		                PHB
.3949de		0b		phd		                PHD
.3949df		08		php		                PHP
.3949e0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3949e2		48		pha		                PHA             ; begin setdbr macro
.3949e3		08		php		                PHP
.3949e4		e2 20		sep #$20	                SEP #$20        ; set A short
.3949e6		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3949e8		48		pha		                PHA
.3949e9		ab		plb		                PLB
.3949ea		28		plp		                PLP
.3949eb		68		pla		                PLA             ; end setdbr macro
.3949ec		48		pha		                PHA             ; begin setdp macro
.3949ed		08		php		                PHP
.3949ee		c2 20		rep #$20	                REP #$20        ; set A long
.3949f0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949f3		5b		tcd		                TCD
.3949f4		28		plp		                PLP
.3949f5		68		pla		                PLA             ; end setdp macro
.3949f6		22 91 45 39	jsl $394591	                JSL FATFORCLUSTER32
.3949fa		a9 00 00	lda #$0000	                LDA #0
.3949fd		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394a00		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394a03		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394a07		b0 0b		bcs $394a14	                BCS ret_success
.394a09						ret_failure
.394a09		e2 20		sep #$20	                SEP #$20        ; set A short
.394a0b		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394a0d		85 0e		sta $032e	                STA DOS_STATUS
.394a0f		28		plp		                PLP
.394a10		2b		pld		                PLD
.394a11		ab		plb		                PLB
.394a12		18		clc		                CLC
.394a13		6b		rtl		                RTL
.394a14						ret_success
.394a14		e2 20		sep #$20	                SEP #$20        ; set A short
.394a16		64 0e		stz $032e	                STZ DOS_STATUS
.394a18		28		plp		                PLP
.394a19		2b		pld		                PLD
.394a1a		ab		plb		                PLB
.394a1b		38		sec		                SEC
.394a1c		6b		rtl		                RTL
.394a1d						DOS_APPENDCLUS
.394a1d		8b		phb		                PHB
.394a1e		0b		phd		                PHD
.394a1f		08		php		                PHP
.394a20		48		pha		                PHA             ; begin setdbr macro
.394a21		08		php		                PHP
.394a22		e2 20		sep #$20	                SEP #$20        ; set A short
.394a24		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394a26		48		pha		                PHA
.394a27		ab		plb		                PLB
.394a28		28		plp		                PLP
.394a29		68		pla		                PLA             ; end setdbr macro
.394a2a		48		pha		                PHA             ; begin setdp macro
.394a2b		08		php		                PHP
.394a2c		c2 20		rep #$20	                REP #$20        ; set A long
.394a2e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a31		5b		tcd		                TCD
.394a32		28		plp		                PLP
.394a33		68		pla		                PLA             ; end setdp macro
.394a34		c2 30		rep #$30	                REP #$30        ; set A&X long
.394a36		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394a38		48		pha		                PHA
.394a39		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394a3b		48		pha		                PHA
.394a3c		22 15 47 39	jsl $394715	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394a40		b0 09		bcs $394a4b	                BCS save_cluster                ; If we got a cluster, write the data to it
.394a42		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394a43		85 10		sta $0330	                STA DOS_CLUS_ID
.394a45		68		pla		                PLA
.394a46		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394a48		82 7d 00	brl $394ac8	                BRL pass_failure                ; Pass the failure back up the chain
.394a4b		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394a4d		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394a50		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394a52		8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.394a55		22 64 42 39	jsl $394264	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394a59		90 e7		bcc $394a42	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394a5b		68		pla		                PLA                             ; Restore the cluster of the file
.394a5c		85 10		sta $0330	                STA DOS_CLUS_ID
.394a5e		68		pla		                PLA
.394a5f		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394a61		22 fc 45 39	jsl $3945fc	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.394a65		b0 fa		bcs $394a61	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.394a67		e2 20		sep #$20	                SEP #$20        ; set A short
.394a69		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394a6d		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394a6f		d0 3d		bne $394aae	                BNE fat32                       ; No: assume it's FAT32
.394a71						fat12
.394a71		c2 20		rep #$20	                REP #$20        ; set A long
.394a73		22 b6 44 39	jsl $3944b6	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.394a77		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.394a79		89 01 00	bit #$0001	                BIT #1
.394a7c		d0 11		bne $394a8f	                BNE is_odd
.394a7e		ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.394a81		29 ff 0f	and #$0fff	                AND #$0FFF
.394a84		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394a87		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394a8a		29 00 f0	and #$f000	                AND #$F000
.394a8d		80 10		bra $394a9f	                BRA update_fat12
.394a8f		ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.394a92		0a		asl a		                ASL A
.394a93		0a		asl a		                ASL A
.394a94		0a		asl a		                ASL A
.394a95		0a		asl a		                ASL A
.394a96		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394a99		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394a9c		29 0f 00	and #$000f	                AND #$000F
.394a9f		0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.394aa2		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394aa5		22 48 49 39	jsl $394948	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394aa9		b0 22		bcs $394acd	                BCS ret_success
.394aab		82 1a 00	brl $394ac8	                BRL pass_failure
.394aae						fat32
.394aae		c2 20		rep #$20	                REP #$20        ; set A long
.394ab0		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.394ab3		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394ab6		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394ab9		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394abc		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.394ac0		b0 0b		bcs $394acd	                BCS ret_success
.394ac2		e2 20		sep #$20	                SEP #$20        ; set A short
.394ac4		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.394ac6		85 0e		sta $032e	                STA DOS_STATUS
.394ac8		28		plp		pass_failure    PLP
.394ac9		2b		pld		                PLD
.394aca		ab		plb		                PLB
.394acb		18		clc		                CLC
.394acc		6b		rtl		                RTL
.394acd						ret_success
.394acd		e2 20		sep #$20	                SEP #$20        ; set A short
.394acf		64 0e		stz $032e	                STZ DOS_STATUS
.394ad1		28		plp		                PLP
.394ad2		2b		pld		                PLD
.394ad3		ab		plb		                PLB
.394ad4		38		sec		                SEC
.394ad5		6b		rtl		                RTL
.394ad6						DOS_CREATE
.394ad6		8b		phb		                PHB
.394ad7		0b		phd		                PHD
.394ad8		08		php		                PHP
.394ad9		48		pha		                PHA             ; begin setdbr macro
.394ada		08		php		                PHP
.394adb		e2 20		sep #$20	                SEP #$20        ; set A short
.394add		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394adf		48		pha		                PHA
.394ae0		ab		plb		                PLB
.394ae1		28		plp		                PLP
.394ae2		68		pla		                PLA             ; end setdbr macro
.394ae3		48		pha		                PHA             ; begin setdp macro
.394ae4		08		php		                PHP
.394ae5		c2 20		rep #$20	                REP #$20        ; set A long
.394ae7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394aea		5b		tcd		                TCD
.394aeb		28		plp		                PLP
.394aec		68		pla		                PLA             ; end setdp macro
.394aed		c2 30		rep #$30	                REP #$30        ; set A&X long
.394aef		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.394af2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394af4		85 28		sta $0348	                STA DOS_TEMP
.394af6		c8		iny		                INY
.394af7		c8		iny		                INY
.394af8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394afa		85 2a		sta $034a	                STA DOS_TEMP+2
.394afc		e2 20		sep #$20	                SEP #$20        ; set A short
.394afe		a0 00 00	ldy #$0000	                LDY #0
.394b01		a2 00 00	ldx #$0000	                LDX #0
.394b04		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.394b06		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.394b08		f0 04		beq $394b0e	                BEQ find_file                   ; If it's NULL, we're done
.394b0a		e8		inx		                INX
.394b0b		c8		iny		                INY
.394b0c		80 f6		bra $394b04	                BRA path_loop
.394b0e		22 75 43 39	jsl $394375	find_file       JSL DOS_PARSE_PATH
.394b12		22 0d 44 39	jsl $39440d	                JSL DOS_FINDFILE
.394b16		90 07		bcc $394b1f	                BCC set_device
.394b18		e2 20		sep #$20	                SEP #$20        ; set A short
.394b1a		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.394b1c		82 d2 00	brl $394bf1	                BRL ret_failure
.394b1f						set_device
.394b1f		e2 20		sep #$20	                SEP #$20        ; set A short
.394b21		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.394b24		a5 01		lda $0321	                LDA BIOS_DEV
.394b26		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b28						validate_name
.394b28		22 15 47 39	jsl $394715	                JSL DOS_FREECLUS
.394b2c		b0 03		bcs $394b31	                BCS save_data
.394b2e		82 c4 00	brl $394bf5	                BRL pass_failure
.394b31						save_data
.394b31		c2 20		rep #$20	                REP #$20        ; set A long
.394b33		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.394b36		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.394b38		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b3a		c8		iny		                INY
.394b3b		c8		iny		                INY
.394b3c		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b3e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b40		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.394b43		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394b45		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394b47		c8		iny		                INY
.394b48		c8		iny		                INY
.394b49		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394b4b		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394b4d		22 64 42 39	jsl $394264	                JSL DOS_PUTCLUSTER
.394b51		b0 00		bcs $394b53	                BCS find_dir
.394b53						find_dir
.394b53		c2 20		rep #$20	                REP #$20        ; set A long
.394b55		22 9f 3d 39	jsl $393d9f	                JSL DOS_DIRFINDFREE
.394b59		b0 1a		bcs $394b75	                BCS set_entry
.394b5b		c2 20		rep #$20	                REP #$20        ; set A long
.394b5d		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.394b60		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.394b62		85 10		sta $0330	                STA DOS_CLUS_ID
.394b64		c8		iny		                INY
.394b65		c8		iny		                INY
.394b66		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394b68		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394b6a		22 dd 49 39	jsl $3949dd	                JSL DELCLUSTER32                ; Delete the cluster
.394b6e		e2 20		sep #$20	                SEP #$20        ; set A short
.394b70		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.394b72		82 7c 00	brl $394bf1	                BRL ret_failure
.394b75						set_entry
.394b75		e2 20		sep #$20	                SEP #$20        ; set A short
.394b77		a0 00 00	ldy #$0000	                LDY #0
.394b7a		a9 00		lda #$00	                LDA #0                          ; NULL
.394b7c		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.394b7e		c8		iny		                INY
.394b7f		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.394b82		d0 f8		bne $394b7c	                BNE copy_dir_loop
.394b84		a0 00 00	ldy #$0000	                LDY #0
.394b87		b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.394b8a		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394b8c		c8		iny		                INY
.394b8d		c0 0b 00	cpy #$000b	                CPY #11
.394b90		d0 f5		bne $394b87	                BNE name_loop
.394b92		c2 20		rep #$20	                REP #$20        ; set A long
.394b94		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.394b97		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394b99		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.394b9c		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394b9e		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.394ba1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394ba3		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394ba6		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394ba8		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.394bab		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394bad		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.394bb0		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394bb2		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.394bb5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394bb7		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.394bba		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394bbc		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.394bbf		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.394bc2		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394bc4		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.394bc7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394bc9		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.394bcc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394bce		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.394bd1		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394bd3		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.394bd6		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394bd8		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.394bdb		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394bdd		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.394be0		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394be2		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.394be5		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394be7		c2 20		rep #$20	                REP #$20        ; set A long
.394be9		22 5d 3e 39	jsl $393e5d	                JSL DOS_DIRWRITE
.394bed		b0 0b		bcs $394bfa	                BCS ret_success
.394bef		80 04		bra $394bf5	                BRA pass_failure
.394bf1						ret_failure
.394bf1		e2 20		sep #$20	                SEP #$20        ; set A short
.394bf3		85 0e		sta $032e	                STA DOS_STATUS
.394bf5		28		plp		pass_failure    PLP
.394bf6		2b		pld		                PLD
.394bf7		ab		plb		                PLB
.394bf8		18		clc		                CLC
.394bf9		6b		rtl		                RTL
.394bfa						ret_success
.394bfa		e2 20		sep #$20	                SEP #$20        ; set A short
.394bfc		64 0e		stz $032e	                STZ DOS_STATUS
.394bfe		28		plp		                PLP
.394bff		2b		pld		                PLD
.394c00		ab		plb		                PLB
.394c01		38		sec		                SEC
.394c02		6b		rtl		                RTL
.394c03						DOS_COPYPATH
.394c03		da		phx		                PHX
.394c04		5a		phy		                PHY
.394c05		8b		phb		                PHB
.394c06		0b		phd		                PHD
.394c07		08		php		                PHP
.394c08		48		pha		                PHA             ; begin setdbr macro
.394c09		08		php		                PHP
.394c0a		e2 20		sep #$20	                SEP #$20        ; set A short
.394c0c		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394c0e		48		pha		                PHA
.394c0f		ab		plb		                PLB
.394c10		28		plp		                PLP
.394c11		68		pla		                PLA             ; end setdbr macro
.394c12		48		pha		                PHA             ; begin setdp macro
.394c13		08		php		                PHP
.394c14		c2 20		rep #$20	                REP #$20        ; set A long
.394c16		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c19		5b		tcd		                TCD
.394c1a		28		plp		                PLP
.394c1b		68		pla		                PLA             ; end setdp macro
.394c1c		c2 30		rep #$30	                REP #$30        ; set A&X long
.394c1e		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.394c21		a2 00 00	ldx #$0000	                LDX #0
.394c24		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.394c26		e8		inx		                INX
.394c27		e8		inx		                INX
.394c28		e0 00 01	cpx #$0100	                CPX #256
.394c2b		d0 f7		bne $394c24	                BNE clr_loop
.394c2d		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.394c2f		d0 04		bne $394c35	                BNE get_path            ; No: attempt to fetch the path
.394c31		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.394c33		f0 27		beq $394c5c	                BEQ done                ; Yes: return an empty buffer
.394c35		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.394c38		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c3a		85 28		sta $0348	                STA DOS_TEMP
.394c3c		c8		iny		                INY
.394c3d		c8		iny		                INY
.394c3e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c40		85 2a		sta $034a	                STA DOS_TEMP+2
.394c42		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.394c44		d0 04		bne $394c4a	                BNE start_copy          ; No: start copying it
.394c46		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394c48		f0 12		beq $394c5c	                BEQ done                ; Yes: return an empty buffer
.394c4a						start_copy
.394c4a		e2 20		sep #$20	                SEP #$20        ; set A short
.394c4c		a2 00 00	ldx #$0000	                LDX #0
.394c4f		a0 00 00	ldy #$0000	                LDY #0
.394c52		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.394c54		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.394c56		f0 04		beq $394c5c	                BEQ done
.394c58		e8		inx		                INX
.394c59		c8		iny		                INY
.394c5a		d0 f6		bne $394c52	                BNE loop
.394c5c		28		plp		done            PLP
.394c5d		2b		pld		                PLD
.394c5e		ab		plb		                PLB
.394c5f		7a		ply		                PLY
.394c60		fa		plx		                PLX
.394c61		6b		rtl		                RTL

;******  Return to file: src/sdos.asm

.394c62						IF_OPEN
.394c62		da		phx		                PHX
.394c63		5a		phy		                PHY
.394c64		0b		phd		                PHD
.394c65		8b		phb		                PHB
.394c66		08		php		                PHP
.394c67		48		pha		                PHA             ; begin setdbr macro
.394c68		08		php		                PHP
.394c69		e2 20		sep #$20	                SEP #$20        ; set A short
.394c6b		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394c6d		48		pha		                PHA
.394c6e		ab		plb		                PLB
.394c6f		28		plp		                PLP
.394c70		68		pla		                PLA             ; end setdbr macro
.394c71		48		pha		                PHA             ; begin setdp macro
.394c72		08		php		                PHP
.394c73		c2 20		rep #$20	                REP #$20        ; set A long
.394c75		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c78		5b		tcd		                TCD
.394c79		28		plp		                PLP
.394c7a		68		pla		                PLA             ; end setdp macro
.394c7b		e2 20		sep #$20	                SEP #$20        ; set A short
.394c7d		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.394c80		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c82		89 20		bit #$20	                BIT #FD_STAT_OPEN
.394c84		f0 05		beq $394c8b	                BEQ ok_to_open
.394c86		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.394c88		82 1c 05	brl $3951a7	                BRL IF_FAILURE
.394c8b		22 03 4c 39	jsl $394c03	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.394c8f		22 0d 44 39	jsl $39440d	                JSL DOS_FINDFILE                ; Attempt to find the file
.394c93		b0 03		bcs $394c98	                BCS is_found                    ; If OK: we found the file
.394c95		82 13 05	brl $3951ab	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.394c98						is_found
.394c98		e2 20		sep #$20	                SEP #$20        ; set A short
.394c9a		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.394c9d		a5 01		lda $0321	                LDA BIOS_DEV
.394c9f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394ca1		c2 20		rep #$20	                REP #$20        ; set A long
.394ca3		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.394ca6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394ca8		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394caa		c8		iny		                INY
.394cab		c8		iny		                INY
.394cac		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394cae		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394cb0		22 27 42 39	jsl $394227	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.394cb4		b0 03		bcs $394cb9	                BCS read_cluster
.394cb6		82 f2 04	brl $3951ab	                BRL IF_PASSFAILURE
.394cb9		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.394cbc		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394cbe		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394cc0		c8		iny		                INY
.394cc1		c8		iny		                INY
.394cc2		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394cc4		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394cc6		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.394cc9		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394ccb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394ccd		c8		iny		                INY
.394cce		c8		iny		                INY
.394ccf		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394cd1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394cd3		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.394cd6		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394cd8		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.394cdb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394cdd		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.394ce0		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394ce2		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.394ce5		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394ce7		e2 20		sep #$20	                SEP #$20        ; set A short
.394ce9		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.394cec		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.394cee		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394cf0		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394cf2		82 bd 04	brl $3951b2	                BRL IF_SUCCESS
.394cf5						IF_CREATE
.394cf5		da		phx		                PHX
.394cf6		5a		phy		                PHY
.394cf7		0b		phd		                PHD
.394cf8		8b		phb		                PHB
.394cf9		08		php		                PHP
.394cfa		48		pha		                PHA             ; begin setdbr macro
.394cfb		08		php		                PHP
.394cfc		e2 20		sep #$20	                SEP #$20        ; set A short
.394cfe		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394d00		48		pha		                PHA
.394d01		ab		plb		                PLB
.394d02		28		plp		                PLP
.394d03		68		pla		                PLA             ; end setdbr macro
.394d04		48		pha		                PHA             ; begin setdp macro
.394d05		08		php		                PHP
.394d06		c2 20		rep #$20	                REP #$20        ; set A long
.394d08		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d0b		5b		tcd		                TCD
.394d0c		28		plp		                PLP
.394d0d		68		pla		                PLA             ; end setdp macro
.394d0e		22 d6 4a 39	jsl $394ad6	                JSL DOS_CREATE                  ; Attempt to create the file
.394d12		90 18		bcc $394d2c	                BCC pass_failure                ; If it fails: pass the failure up the chain
.394d14		c2 30		rep #$30	                REP #$30        ; set A&X long
.394d16		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.394d19		a9 00 00	lda #$0000	                LDA #0
.394d1c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394d1e		c8		iny		                INY
.394d1f		c8		iny		                INY
.394d20		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394d22		e2 20		sep #$20	                SEP #$20        ; set A short
.394d24		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.394d27		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.394d29		82 86 04	brl $3951b2	                BRL IF_SUCCESS
.394d2c		82 78 04	brl $3951a7	pass_failure    BRL IF_FAILURE
.394d2f						IF_CLOSE
.394d2f		da		phx		                PHX
.394d30		5a		phy		                PHY
.394d31		0b		phd		                PHD
.394d32		8b		phb		                PHB
.394d33		08		php		                PHP
.394d34		48		pha		                PHA             ; begin setdbr macro
.394d35		08		php		                PHP
.394d36		e2 20		sep #$20	                SEP #$20        ; set A short
.394d38		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394d3a		48		pha		                PHA
.394d3b		ab		plb		                PLB
.394d3c		28		plp		                PLP
.394d3d		68		pla		                PLA             ; end setdbr macro
.394d3e		48		pha		                PHA             ; begin setdp macro
.394d3f		08		php		                PHP
.394d40		c2 20		rep #$20	                REP #$20        ; set A long
.394d42		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d45		5b		tcd		                TCD
.394d46		28		plp		                PLP
.394d47		68		pla		                PLA             ; end setdp macro
.394d48		e2 20		sep #$20	                SEP #$20        ; set A short
.394d4a		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.394d4d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d4f		89 02		bit #$02	                BIT #FD_STAT_WRITE
.394d51		f0 09		beq $394d5c	                BEQ set_flag                    ; No, just mark it closed
.394d53		22 c8 4d 39	jsl $394dc8	                JSL IF_WRITE                    ; Attempt to write the cluster
.394d57		b0 03		bcs $394d5c	                BCS set_flag
.394d59		82 4f 04	brl $3951ab	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.394d5c		22 ac 52 39	jsl $3952ac	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.394d60		82 4f 04	brl $3951b2	                BRL IF_SUCCESS
.394d63						IF_READ
.394d63		da		phx		                PHX
.394d64		5a		phy		                PHY
.394d65		0b		phd		                PHD
.394d66		8b		phb		                PHB
.394d67		08		php		                PHP
.394d68		48		pha		                PHA             ; begin setdbr macro
.394d69		08		php		                PHP
.394d6a		e2 20		sep #$20	                SEP #$20        ; set A short
.394d6c		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394d6e		48		pha		                PHA
.394d6f		ab		plb		                PLB
.394d70		28		plp		                PLP
.394d71		68		pla		                PLA             ; end setdbr macro
.394d72		48		pha		                PHA             ; begin setdp macro
.394d73		08		php		                PHP
.394d74		c2 20		rep #$20	                REP #$20        ; set A long
.394d76		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d79		5b		tcd		                TCD
.394d7a		28		plp		                PLP
.394d7b		68		pla		                PLA             ; end setdp macro
.394d7c		c2 10		rep #$10	                REP #$10        ; set X long
.394d7e		e2 20		sep #$20	                SEP #$20        ; set A short
.394d80						get_dev
.394d80		e2 20		sep #$20	                SEP #$20        ; set A short
.394d82		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.394d85		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d87		85 01		sta $0321	                STA BIOS_DEV
.394d89		22 8f 3f 39	jsl $393f8f	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.394d8d		c2 20		rep #$20	                REP #$20        ; set A long
.394d8f		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.394d92		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d94		85 10		sta $0330	                STA DOS_CLUS_ID
.394d96		c8		iny		                INY
.394d97		c8		iny		                INY
.394d98		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d9a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394d9c		22 fc 45 39	jsl $3945fc	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.394da0		90 13		bcc $394db5	                BCC pass_failure                ; If not OK: pass the failure up the chain
.394da2		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.394da5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394da7		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394da9		c8		iny		                INY
.394daa		c8		iny		                INY
.394dab		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394dad		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394daf		22 27 42 39	jsl $394227	                JSL DOS_GETCLUSTER              ; Get the cluster
.394db3		b0 03		bcs $394db8	                BCS ret_success                 ; If ok: return success
.394db5						pass_failure
.394db5		82 f3 03	brl $3951ab	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.394db8		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.394dbb		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394dbd		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394dbf		c8		iny		                INY
.394dc0		c8		iny		                INY
.394dc1		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394dc3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394dc5		82 ea 03	brl $3951b2	                BRL IF_SUCCESS
.394dc8						IF_WRITE
.394dc8		da		phx		                PHX
.394dc9		5a		phy		                PHY
.394dca		0b		phd		                PHD
.394dcb		8b		phb		                PHB
.394dcc		08		php		                PHP
.394dcd		48		pha		                PHA             ; begin setdbr macro
.394dce		08		php		                PHP
.394dcf		e2 20		sep #$20	                SEP #$20        ; set A short
.394dd1		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394dd3		48		pha		                PHA
.394dd4		ab		plb		                PLB
.394dd5		28		plp		                PLP
.394dd6		68		pla		                PLA             ; end setdbr macro
.394dd7		48		pha		                PHA             ; begin setdp macro
.394dd8		08		php		                PHP
.394dd9		c2 20		rep #$20	                REP #$20        ; set A long
.394ddb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394dde		5b		tcd		                TCD
.394ddf		28		plp		                PLP
.394de0		68		pla		                PLA             ; end setdp macro
.394de1		c2 10		rep #$10	                REP #$10        ; set X long
.394de3		e2 20		sep #$20	                SEP #$20        ; set A short
.394de5		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.394de8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394dea		85 01		sta $0321	                STA BIOS_DEV
.394dec		22 8f 3f 39	jsl $393f8f	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.394df0		c2 20		rep #$20	                REP #$20        ; set A long
.394df2		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.394df5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394df7		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394df9		c8		iny		                INY
.394dfa		c8		iny		                INY
.394dfb		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394dfd		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394dff		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.394e02		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e04		85 10		sta $0330	                STA DOS_CLUS_ID
.394e06		c8		iny		                INY
.394e07		c8		iny		                INY
.394e08		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e0a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394e0c		d0 1a		bne $394e28	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.394e0e		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394e10		d0 16		bne $394e28	                BNE rewrite_cluster
.394e12		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.394e15		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e17		85 10		sta $0330	                STA DOS_CLUS_ID
.394e19		c8		iny		                INY
.394e1a		c8		iny		                INY
.394e1b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e1d		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394e1f		22 1d 4a 39	jsl $394a1d	                JSL DOS_APPENDCLUS              ; Append the cluster
.394e23		b0 0c		bcs $394e31	                BCS ret_success                 ; If OK: return success
.394e25		82 83 03	brl $3951ab	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.394e28		22 64 42 39	jsl $394264	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.394e2c		b0 03		bcs $394e31	                BCS ret_success                 ; If ok: return success
.394e2e		82 7a 03	brl $3951ab	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.394e31		82 7e 03	brl $3951b2	ret_success     BRL IF_SUCCESS
.394e34						IF_DIROPEN
.394e34		da		phx		                PHX
.394e35		5a		phy		                PHY
.394e36		0b		phd		                PHD
.394e37		8b		phb		                PHB
.394e38		08		php		                PHP
.394e39		48		pha		                PHA             ; begin setdbr macro
.394e3a		08		php		                PHP
.394e3b		e2 20		sep #$20	                SEP #$20        ; set A short
.394e3d		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e3f		48		pha		                PHA
.394e40		ab		plb		                PLB
.394e41		28		plp		                PLP
.394e42		68		pla		                PLA             ; end setdbr macro
.394e43		48		pha		                PHA             ; begin setdp macro
.394e44		08		php		                PHP
.394e45		c2 20		rep #$20	                REP #$20        ; set A long
.394e47		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e4a		5b		tcd		                TCD
.394e4b		28		plp		                PLP
.394e4c		68		pla		                PLA             ; end setdp macro
.394e4d		c2 30		rep #$30	                REP #$30        ; set A&X long
.394e4f		22 03 4c 39	jsl $394c03	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.394e53		22 75 43 39	jsl $394375	                JSL DOS_PARSE_PATH          ; Parse the path
.394e57		22 8f 3f 39	jsl $393f8f	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.394e5b		b0 03		bcs $394e60	                BCS get_root_dir            ; If successful: get the root directory
.394e5d		82 4b 03	brl $3951ab	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.394e60						get_root_dir
.394e60		c2 30		rep #$30	                REP #$30        ; set A&X long
.394e62		22 44 3c 39	jsl $393c44	                JSL DOS_DIROPEN
.394e66		b0 03		bcs $394e6b	                BCS success
.394e68		82 40 03	brl $3951ab	                BRL IF_PASSFAILURE
.394e6b		82 44 03	brl $3951b2	success         BRL IF_SUCCESS
.394e6e						IF_DIRNEXT
.394e6e		5c de 3c 39	jmp $393cde	                JML DOS_DIRNEXT
.394e72						IF_DELETE
.394e72		da		phx		                PHX
.394e73		5a		phy		                PHY
.394e74		0b		phd		                PHD
.394e75		8b		phb		                PHB
.394e76		08		php		                PHP
.394e77		48		pha		                PHA             ; begin setdbr macro
.394e78		08		php		                PHP
.394e79		e2 20		sep #$20	                SEP #$20        ; set A short
.394e7b		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e7d		48		pha		                PHA
.394e7e		ab		plb		                PLB
.394e7f		28		plp		                PLP
.394e80		68		pla		                PLA             ; end setdbr macro
.394e81		48		pha		                PHA             ; begin setdp macro
.394e82		08		php		                PHP
.394e83		c2 20		rep #$20	                REP #$20        ; set A long
.394e85		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e88		5b		tcd		                TCD
.394e89		28		plp		                PLP
.394e8a		68		pla		                PLA             ; end setdp macro
.394e8b		c2 30		rep #$30	                REP #$30        ; set A&X long
.394e8d		22 0d 44 39	jsl $39440d	                JSL DOS_FINDFILE
.394e91		b0 03		bcs $394e96	                BCS get_first_clus
.394e93		82 15 03	brl $3951ab	                BRL IF_PASSFAILURE
.394e96						get_first_clus
.394e96		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.394e99		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394e9b		85 10		sta $0330	                STA DOS_CLUS_ID
.394e9d		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394ea0		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394ea2		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394ea4		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394ea6		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.394ea9		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394eab		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.394eae		22 fc 45 39	jsl $3945fc	del_loop        JSL NEXTCLUSTER
.394eb2		90 2f		bcc $394ee3	                BCC del_one
.394eb4		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394eb6		8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.394eb9		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394ebb		8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.394ebe		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.394ec1		85 10		sta $0330	                STA DOS_CLUS_ID
.394ec3		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.394ec6		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394ec8		22 dd 49 39	jsl $3949dd	                JSL DELCLUSTER32
.394ecc		b0 03		bcs $394ed1	                BCS go_next
.394ece		82 da 02	brl $3951ab	                BRL IF_PASSFAILURE
.394ed1						go_next
.394ed1		ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.394ed4		85 10		sta $0330	                STA DOS_CLUS_ID
.394ed6		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.394ed9		ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.394edc		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394ede		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.394ee1		80 cb		bra $394eae	                BRA del_loop
.394ee3						del_one
.394ee3		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.394ee6		85 10		sta $0330	                STA DOS_CLUS_ID
.394ee8		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.394eeb		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394eed		22 37 49 39	jsl $394937	                JSL DELCLUSTER
.394ef1		b0 03		bcs $394ef6	                BCS free_dir_entry
.394ef3		82 b5 02	brl $3951ab	                BRL IF_PASSFAILURE
.394ef6						free_dir_entry
.394ef6		e2 20		sep #$20	                SEP #$20        ; set A short
.394ef8		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.394efb		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.394efd		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394eff		22 5d 3e 39	jsl $393e5d	                JSL DOS_DIRWRITE                ; Write the directory entry back
.394f03		b0 03		bcs $394f08	                BCS ret_success
.394f05		82 a3 02	brl $3951ab	                BRL IF_PASSFAILURE
.394f08		82 a7 02	brl $3951b2	ret_success     BRL IF_SUCCESS
.394f0b						IF_DIRREAD
.394f0b		da		phx		                PHX
.394f0c		5a		phy		                PHY
.394f0d		0b		phd		                PHD
.394f0e		8b		phb		                PHB
.394f0f		08		php		                PHP
.394f10		48		pha		                PHA             ; begin setdbr macro
.394f11		08		php		                PHP
.394f12		e2 20		sep #$20	                SEP #$20        ; set A short
.394f14		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f16		48		pha		                PHA
.394f17		ab		plb		                PLB
.394f18		28		plp		                PLP
.394f19		68		pla		                PLA             ; end setdbr macro
.394f1a		48		pha		                PHA             ; begin setdp macro
.394f1b		08		php		                PHP
.394f1c		c2 20		rep #$20	                REP #$20        ; set A long
.394f1e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f21		5b		tcd		                TCD
.394f22		28		plp		                PLP
.394f23		68		pla		                PLA             ; end setdp macro
.394f24		c2 30		rep #$30	                REP #$30        ; set A&X long
.394f26		22 0d 44 39	jsl $39440d	                JSL DOS_FINDFILE
.394f2a		b0 03		bcs $394f2f	                BCS success
.394f2c		82 78 02	brl $3951a7	                BRL IF_FAILURE
.394f2f		82 80 02	brl $3951b2	success         BRL IF_SUCCESS
.394f32						IF_DIRWRITE
.394f32		5c 5d 3e 39	jmp $393e5d	                JML DOS_DIRWRITE
.394f36						IF_LOAD
.394f36		da		phx		                PHX
.394f37		5a		phy		                PHY
.394f38		0b		phd		                PHD
.394f39		8b		phb		                PHB
.394f3a		08		php		                PHP
.394f3b		48		pha		                PHA             ; begin setdbr macro
.394f3c		08		php		                PHP
.394f3d		e2 20		sep #$20	                SEP #$20        ; set A short
.394f3f		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f41		48		pha		                PHA
.394f42		ab		plb		                PLB
.394f43		28		plp		                PLP
.394f44		68		pla		                PLA             ; end setdbr macro
.394f45		48		pha		                PHA             ; begin setdp macro
.394f46		08		php		                PHP
.394f47		c2 20		rep #$20	                REP #$20        ; set A long
.394f49		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f4c		5b		tcd		                TCD
.394f4d		28		plp		                PLP
.394f4e		68		pla		                PLA             ; end setdp macro
.394f4f		c2 30		rep #$30	                REP #$30        ; set A&X long
.394f51		22 62 4c 39	jsl $394c62	                JSL IF_OPEN
.394f55		b0 03		bcs $394f5a	                BCS setup                   ; If success: start setting things up
.394f57		82 51 02	brl $3951ab	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.394f5a						setup
.394f5a		c2 20		rep #$20	                REP #$20        ; set A long
.394f5c		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.394f5f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f61		85 2c		sta $034c	                STA DOS_FILE_SIZE
.394f63		c8		iny		                INY
.394f64		c8		iny		                INY
.394f65		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f67		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.394f69		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.394f6c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f6e		85 30		sta $0350	                STA DOS_SRC_PTR
.394f70		c8		iny		                INY
.394f71		c8		iny		                INY
.394f72		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f74		85 32		sta $0352	                STA DOS_SRC_PTR+2
.394f76		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.394f78		c9 40 00	cmp #$0040	                CMP #$0040
.394f7b		b0 04		bcs $394f81	                BGE load_by_type            ; No: try to load it by type
.394f7d		5c 5c 50 39	jmp $39505c	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.394f81		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.394f84		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.394f87						type_loop
.394f87		e2 20		sep #$20	                SEP #$20        ; set A short
.394f89		bf cd 4f 39	lda $394fcd,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.394f8d		f0 37		beq $394fc6	                BEQ no_match                ; If NULL... we didn't get a match
.394f8f		d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.394f92		d0 28		bne $394fbc	                BNE next_entry              ; If they don't match, try the next entry
.394f94		bf ce 4f 39	lda $394fce,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.394f98		d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.394f9b		d0 1f		bne $394fbc	                BNE next_entry              ; If they don't match, try the next entry
.394f9d		bf cf 4f 39	lda $394fcf,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.394fa1		d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.394fa4		d0 16		bne $394fbc	                BNE next_entry              ; If they don't match, try the next entry
.394fa6		c2 20		rep #$20	                REP #$20        ; set A long
.394fa8		bf d0 4f 39	lda $394fd0,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.394fac		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.394fae		e2 20		sep #$20	                SEP #$20        ; set A short
.394fb0		bf d2 4f 39	lda $394fd2,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.394fb4		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.394fb6		a2 00 00	ldx #$0000	                LDX #0
.394fb9		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.394fbc						next_entry
.394fbc		c2 30		rep #$30	                REP #$30        ; set A&X long
.394fbe		8a		txa		                TXA
.394fbf		18		clc		                CLC
.394fc0		69 06 00	adc #$0006	                ADC #6
.394fc3		aa		tax		                TAX
.394fc4		80 c1		bra $394f87	                BRA type_loop               ; And check it against the file
.394fc6						no_match
.394fc6		e2 20		sep #$20	                SEP #$20        ; set A short
.394fc8		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.394fca		82 da 01	brl $3951a7	                BRL IF_FAILURE
>394fcd		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>394fd0		d4 4f				                .word <>IF_LOADPGX
>394fd2		39				                .byte `IF_LOADPGX
>394fd3		00				                .byte 0
.394fd4						IF_LOADPGX
.394fd4		c2 10		rep #$10	                REP #$10        ; set X long
.394fd6		e2 20		sep #$20	                SEP #$20        ; set A short
.394fd8		a0 00 00	ldy #$0000	                LDY #0
.394fdb		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.394fdd		c9 50		cmp #$50	                CMP #'P'
.394fdf		d0 15		bne $394ff6	                BNE fail_sig                        ; If not found, fail
.394fe1		c8		iny		                INY
.394fe2		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.394fe4		c9 47		cmp #$47	                CMP #'G'
.394fe6		d0 0e		bne $394ff6	                BNE fail_sig
.394fe8		c8		iny		                INY
.394fe9		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.394feb		c9 58		cmp #$58	                CMP #'X'
.394fed		d0 07		bne $394ff6	                BNE fail_sig
.394fef		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.394ff0		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.394ff2		c9 01		cmp #$01	                CMP #$01
.394ff4		f0 17		beq $39500d	                BEQ get_dest                        ; All passes: go to get the destination address
.394ff6		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.394ff8		22 a7 51 39	jsl $3951a7	                JSL IF_FAILURE
.394ffc						adjust_size
.394ffc		c2 20		rep #$20	                REP #$20        ; set A long
.394ffe		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.394fff		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395001		e9 08 00	sbc #$0008	                SBC #8
.395004		85 2c		sta $034c	                STA DOS_FILE_SIZE
.395006		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395008		e9 00 00	sbc #$0000	                SBC #0
.39500b		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39500d						get_dest
.39500d		c2 20		rep #$20	                REP #$20        ; set A long
.39500f		c8		iny		                INY
.395010		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.395012		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.395014		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.395016		c8		iny		                INY
.395017		c8		iny		                INY
.395018		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.39501a		85 36		sta $0356	                STA DOS_DST_PTR+2
.39501c		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.39501e		c8		iny		                INY                                 ; Point to the first data byte
.39501f		c8		iny		                INY
.395020						copy_loop
.395020		e2 20		sep #$20	                SEP #$20        ; set A short
.395022		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.395024		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.395026		c2 20		rep #$20	                REP #$20        ; set A long
.395028		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.39502a		d0 02		bne $39502e	                BNE dec_file_size
.39502c		e6 36		inc $0356	                INC DOS_DST_PTR+2
.39502e		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.39502f		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395031		e9 01 00	sbc #$0001	                SBC #1
.395034		85 2c		sta $034c	                STA DOS_FILE_SIZE
.395036		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395038		e9 00 00	sbc #$0000	                SBC #0
.39503b		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39503d		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.39503f		d0 04		bne $395045	                BNE next_byte
.395041		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395043		f0 14		beq $395059	                BEQ done                            ; Yes: we're done
.395045		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.395046		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.395049		d0 d5		bne $395020	                BNE copy_loop                       ; No: keep copying
.39504b		22 00 47 39	jsl $394700	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.39504f		b0 03		bcs $395054	                BCS next_cluster
.395051		82 57 01	brl $3951ab	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.395054		a0 00 00	ldy #$0000	next_cluster    LDY #0
.395057		80 c7		bra $395020	                BRA copy_loop                       ; Go back to copying
.395059		82 56 01	brl $3951b2	done            BRL IF_SUCCESS
.39505c						IF_LOADRAW
.39505c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39505e		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.395061						copy_loop
.395061		e2 20		sep #$20	                SEP #$20        ; set A short
.395063		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.395065		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395067		c2 20		rep #$20	                REP #$20        ; set A long
.395069		38		sec		                SEC                         ; Count down the number of bytes left
.39506a		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.39506c		e9 01 00	sbc #$0001	                SBC #1
.39506f		85 2c		sta $034c	                STA DOS_FILE_SIZE
.395071		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395073		e9 00 00	sbc #$0000	                SBC #0
.395076		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395078		d0 04		bne $39507e	                BNE continue
.39507a		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.39507c		f0 1b		beq $395099	                BEQ close_file              ; If not: we're done
.39507e		c8		iny		continue        INY
.39507f		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.395082		d0 dd		bne $395061	                BNE copy_loop               ; No: keep processing the bytes
.395084		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.395085		a5 34		lda $0354	                LDA DOS_DST_PTR
.395087		6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.39508a		85 34		sta $0354	                STA DOS_DST_PTR
.39508c		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.39508e		69 00 00	adc #$0000	                ADC #0
.395091		85 36		sta $0356	                STA DOS_DST_PTR+2
.395093		22 63 4d 39	jsl $394d63	                JSL IF_READ                 ; Yes: load the next cluster
.395097		b0 c5		bcs $39505e	                BCS copy_cluster            ; And start copying it
.395099						close_file
.395099		82 16 01	brl $3951b2	ret_success     BRL IF_SUCCESS
.39509c						IF_NULLBUFFER
.39509c		5a		phy		                PHY
.39509d		8b		phb		                PHB
.39509e		0b		phd		                PHD
.39509f		08		php		                PHP
.3950a0		48		pha		                PHA             ; begin setdbr macro
.3950a1		08		php		                PHP
.3950a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3950a4		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3950a6		48		pha		                PHA
.3950a7		ab		plb		                PLB
.3950a8		28		plp		                PLP
.3950a9		68		pla		                PLA             ; end setdbr macro
.3950aa		48		pha		                PHA             ; begin setdp macro
.3950ab		08		php		                PHP
.3950ac		c2 20		rep #$20	                REP #$20        ; set A long
.3950ae		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3950b1		5b		tcd		                TCD
.3950b2		28		plp		                PLP
.3950b3		68		pla		                PLA             ; end setdp macro
.3950b4		c2 30		rep #$30	                REP #$30        ; set A&X long
.3950b6		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3950b9		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950bb		85 28		sta $0348	                STA DOS_TEMP
.3950bd		c8		iny		                INY
.3950be		c8		iny		                INY
.3950bf		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950c1		85 2a		sta $034a	                STA DOS_TEMP+2
.3950c3		a0 00 00	ldy #$0000	                LDY #0
.3950c6		a9 00 00	lda #$0000	                LDA #0
.3950c9		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.3950cb		c8		iny		                INY
.3950cc		c8		iny		                INY
.3950cd		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.3950d0		d0 f7		bne $3950c9	                BNE loop
.3950d2		28		plp		                PLP
.3950d3		2b		pld		                PLD
.3950d4		ab		plb		                PLB
.3950d5		7a		ply		                PLY
.3950d6		6b		rtl		                RTL
.3950d7						IF_COPY2BUFF
.3950d7		5a		phy		                PHY
.3950d8		8b		phb		                PHB
.3950d9		0b		phd		                PHD
.3950da		08		php		                PHP
.3950db		48		pha		                PHA             ; begin setdbr macro
.3950dc		08		php		                PHP
.3950dd		e2 20		sep #$20	                SEP #$20        ; set A short
.3950df		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3950e1		48		pha		                PHA
.3950e2		ab		plb		                PLB
.3950e3		28		plp		                PLP
.3950e4		68		pla		                PLA             ; end setdbr macro
.3950e5		48		pha		                PHA             ; begin setdp macro
.3950e6		08		php		                PHP
.3950e7		c2 20		rep #$20	                REP #$20        ; set A long
.3950e9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3950ec		5b		tcd		                TCD
.3950ed		28		plp		                PLP
.3950ee		68		pla		                PLA             ; end setdp macro
.3950ef		c2 30		rep #$30	                REP #$30        ; set A&X long
.3950f1		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3950f4		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950f6		85 28		sta $0348	                STA DOS_TEMP
.3950f8		c8		iny		                INY
.3950f9		c8		iny		                INY
.3950fa		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950fc		85 2a		sta $034a	                STA DOS_TEMP+2
.3950fe		a0 00 00	ldy #$0000	                LDY #0
.395101						copy_loop
.395101		e2 20		sep #$20	                SEP #$20        ; set A short
.395103		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.395105		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.395107		c2 20		rep #$20	                REP #$20        ; set A long
.395109		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.39510b		d0 02		bne $39510f	                BNE adv_dest
.39510d		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.39510f		c8		iny		adv_dest        INY                         ; Count it
.395110		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.395113		f0 0c		beq $395121	                BEQ done                    ; Yes: we're done
.395115		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.395117		c5 38		cmp $0358	                CMP DOS_END_PTR
.395119		d0 e6		bne $395101	                BNE copy_loop               ; No: keep copying
.39511b		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.39511d		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.39511f		d0 e0		bne $395101	                BNE copy_loop
.395121		28		plp		done            PLP
.395122		2b		pld		                PLD
.395123		ab		plb		                PLB
.395124		7a		ply		                PLY
.395125		6b		rtl		                RTL
.395126						IF_SAVE
.395126		da		phx		                PHX
.395127		5a		phy		                PHY
.395128		0b		phd		                PHD
.395129		8b		phb		                PHB
.39512a		08		php		                PHP
.39512b		48		pha		                PHA             ; begin setdbr macro
.39512c		08		php		                PHP
.39512d		e2 20		sep #$20	                SEP #$20        ; set A short
.39512f		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395131		48		pha		                PHA
.395132		ab		plb		                PLB
.395133		28		plp		                PLP
.395134		68		pla		                PLA             ; end setdbr macro
.395135		48		pha		                PHA             ; begin setdp macro
.395136		08		php		                PHP
.395137		c2 20		rep #$20	                REP #$20        ; set A long
.395139		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39513c		5b		tcd		                TCD
.39513d		28		plp		                PLP
.39513e		68		pla		                PLA             ; end setdp macro
.39513f		c2 30		rep #$30	                REP #$30        ; set A&X long
.395141		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.395144		38		sec		                SEC
.395145		a5 38		lda $0358	                LDA DOS_END_PTR
.395147		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.395149		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39514b		c8		iny		                INY
.39514c		c8		iny		                INY
.39514d		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.39514f		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.395151		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395153		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.395156		18		clc		                CLC
.395157		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395159		69 01 00	adc #$0001	                ADC #1
.39515c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39515e		90 09		bcc $395169	                BCC first_block
.395160		c8		iny		                INY
.395161		c8		iny		                INY
.395162		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395164		69 00 00	adc #$0000	                ADC #0
.395167		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395169		22 9c 50 39	jsl $39509c	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.39516d		22 d7 50 39	jsl $3950d7	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.395171		22 f5 4c 39	jsl $394cf5	                JSL IF_CREATE           ; Create file.
.395175		b0 03		bcs $39517a	                BCS check_for_end
.395177		82 31 00	brl $3951ab	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.39517a		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.39517c		c5 38		cmp $0358	                CMP DOS_END_PTR
.39517e		d0 06		bne $395186	                BNE next_block
.395180		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395182		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395184		f0 1d		beq $3951a3	                BEQ done                ; Yes: we're done
.395186		22 9c 50 39	jsl $39509c	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.39518a		22 d7 50 39	jsl $3950d7	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.39518e		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.395191		a9 00 00	lda #$0000	                LDA #0
.395194		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395196		c8		iny		                INY
.395197		c8		iny		                INY
.395198		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39519a		22 c8 4d 39	jsl $394dc8	                JSL IF_WRITE            ; Append to the file
.39519e		b0 da		bcs $39517a	                BCS check_for_end       ; And try again
.3951a0		82 08 00	brl $3951ab	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.3951a3		5c b2 51 39	jmp $3951b2	done            JML IF_SUCCESS
.3951a7						IF_FAILURE
.3951a7		e2 20		sep #$20	                SEP #$20        ; set A short
.3951a9		85 0e		sta $032e	                STA DOS_STATUS
.3951ab		28		plp		IF_PASSFAILURE  PLP
.3951ac		18		clc		                CLC
.3951ad		ab		plb		                PLB
.3951ae		2b		pld		                PLD
.3951af		7a		ply		                PLY
.3951b0		fa		plx		                PLX
.3951b1		6b		rtl		                RTL
.3951b2						IF_SUCCESS
.3951b2		e2 20		sep #$20	                SEP #$20        ; set A short
.3951b4		64 00		stz $0320	                STZ BIOS_STATUS
.3951b6		64 0e		stz $032e	                STZ DOS_STATUS
.3951b8		28		plp		                PLP
.3951b9		38		sec		                SEC
.3951ba		ab		plb		                PLB
.3951bb		2b		pld		                PLD
.3951bc		7a		ply		                PLY
.3951bd		fa		plx		                PLX
.3951be		6b		rtl		                RTL
.3951bf						IF_RUN
.3951bf		da		phx		                PHX
.3951c0		5a		phy		                PHY
.3951c1		0b		phd		                PHD
.3951c2		8b		phb		                PHB
.3951c3		08		php		                PHP
.3951c4		48		pha		                PHA             ; begin setdbr macro
.3951c5		08		php		                PHP
.3951c6		e2 20		sep #$20	                SEP #$20        ; set A short
.3951c8		a9 00		lda #$00	                LDA #0
.3951ca		48		pha		                PHA
.3951cb		ab		plb		                PLB
.3951cc		28		plp		                PLP
.3951cd		68		pla		                PLA             ; end setdbr macro
.3951ce		48		pha		                PHA             ; begin setdp macro
.3951cf		08		php		                PHP
.3951d0		c2 20		rep #$20	                REP #$20        ; set A long
.3951d2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3951d5		5b		tcd		                TCD
.3951d6		28		plp		                PLP
.3951d7		68		pla		                PLA             ; end setdp macro
.3951d8		e2 20		sep #$20	                SEP #$20        ; set A short
.3951da		c2 10		rep #$10	                REP #$10        ; set X long
.3951dc		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.3951de		a2 00 00	ldx #$0000	                LDX #0
.3951e1		9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.3951e5		e8		inx		                INX
.3951e6		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.3951e9		d0 f6		bne $3951e1	                BNE clr_fd_loop
.3951eb		c2 20		rep #$20	                REP #$20        ; set A long
.3951ed		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.3951f0		8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.3951f4		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.3951f7		8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.3951fb		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.3951fd		8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.395201		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.395203		8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.395207		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.39520a		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.39520c		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.39520e		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.395211		85 20		sta $0340	                STA DOS_FD_PTR
.395213		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.395216		85 22		sta $0342	                STA DOS_FD_PTR+2
.395218		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.39521b		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.39521f		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.395223		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.395227		b0 14		bcs $39523d	                BCS try_execute
.395229		82 7f ff	brl $3951ab	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.39522c						chk_execute
.39522c		c2 20		rep #$20	                REP #$20        ; set A long
.39522e		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.395230		d0 0b		bne $39523d	                BNE try_execute                         ; If so: call it
.395232		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.395234		d0 07		bne $39523d	                BNE try_execute
.395236		e2 20		sep #$20	                SEP #$20        ; set A short
.395238		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.39523a		82 6a ff	brl $3951a7	                BRL IF_FAILURE
.39523d						try_execute
.39523d		e2 20		sep #$20	                SEP #$20        ; set A short
.39523f		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.395241		48		pha		                PHA
.395242		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.395244		48		pha		                PHA
.395245		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.395247		48		pha		                PHA
.395248		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.39524a		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.39524c		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.395250		e2 20		sep #$20	                SEP #$20        ; set A short
.395252		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.395253		68		pla		                PLA
.395254		68		pla		                PLA
.395255		82 5a ff	brl $3951b2	                BRL IF_SUCCESS                          ; Return success
.395258						IF_ALLOCFD
.395258		da		phx		                PHX
.395259		5a		phy		                PHY
.39525a		0b		phd		                PHD
.39525b		8b		phb		                PHB
.39525c		08		php		                PHP
.39525d		48		pha		                PHA             ; begin setdbr macro
.39525e		08		php		                PHP
.39525f		e2 20		sep #$20	                SEP #$20        ; set A short
.395261		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395263		48		pha		                PHA
.395264		ab		plb		                PLB
.395265		28		plp		                PLP
.395266		68		pla		                PLA             ; end setdbr macro
.395267		48		pha		                PHA             ; begin setdp macro
.395268		08		php		                PHP
.395269		c2 20		rep #$20	                REP #$20        ; set A long
.39526b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39526e		5b		tcd		                TCD
.39526f		28		plp		                PLP
.395270		68		pla		                PLA             ; end setdp macro
.395271		c2 10		rep #$10	                REP #$10        ; set X long
.395273		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.395276						chk_fd
.395276		e2 20		sep #$20	                SEP #$20        ; set A short
.395278		bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.39527b		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.39527d		f0 14		beq $395293	                BEQ found                           ; No: flag and return the found descriptor
.39527f						next_fd
.39527f		c2 20		rep #$20	                REP #$20        ; set A long
.395281		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.395282		18		clc		                CLC
.395283		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.395286		aa		tax		                TAX
.395287		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.39528a		90 ea		bcc $395276	                BLT chk_fd                          ; No: check this new file descriptor
.39528c		e2 20		sep #$20	                SEP #$20        ; set A short
.39528e		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.395290		82 14 ff	brl $3951a7	                BRL IF_FAILURE
.395293		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.395295		9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.395298		c2 20		rep #$20	                REP #$20        ; set A long
.39529a		8a		txa		                TXA
.39529b		18		clc		                CLC
.39529c		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.39529f		85 20		sta $0340	                STA @b DOS_FD_PTR
.3952a1		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.3952a4		69 00 00	adc #$0000	                ADC #0
.3952a7		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3952a9		82 06 ff	brl $3951b2	                BRL IF_SUCCESS                      ; Return this file descriptor
.3952ac						IF_FREEFD
.3952ac		da		phx		                PHX
.3952ad		5a		phy		                PHY
.3952ae		0b		phd		                PHD
.3952af		8b		phb		                PHB
.3952b0		08		php		                PHP
.3952b1		48		pha		                PHA             ; begin setdbr macro
.3952b2		08		php		                PHP
.3952b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3952b5		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3952b7		48		pha		                PHA
.3952b8		ab		plb		                PLB
.3952b9		28		plp		                PLP
.3952ba		68		pla		                PLA             ; end setdbr macro
.3952bb		48		pha		                PHA             ; begin setdp macro
.3952bc		08		php		                PHP
.3952bd		c2 20		rep #$20	                REP #$20        ; set A long
.3952bf		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3952c2		5b		tcd		                TCD
.3952c3		28		plp		                PLP
.3952c4		68		pla		                PLA             ; end setdp macro
.3952c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3952c7		c2 10		rep #$10	                REP #$10        ; set X long
.3952c9		a9 00		lda #$00	                LDA #0
.3952cb		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.3952cd		82 e2 fe	brl $3951b2	                BRL IF_SUCCESS
.3952d0						DOS_SRC2DST
.3952d0		da		phx		                PHX
.3952d1		5a		phy		                PHY
.3952d2		0b		phd		                PHD
.3952d3		8b		phb		                PHB
.3952d4		08		php		                PHP
.3952d5		48		pha		                PHA             ; begin setdp macro
.3952d6		08		php		                PHP
.3952d7		c2 20		rep #$20	                REP #$20        ; set A long
.3952d9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3952dc		5b		tcd		                TCD
.3952dd		28		plp		                PLP
.3952de		68		pla		                PLA             ; end setdp macro
.3952df		c2 30		rep #$30	                REP #$30        ; set A&X long
.3952e1		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3952e4		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3952e6		aa		tax		                TAX                                     ; X := source buffer address
.3952e7		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.3952e9		a8		tay		                TAY                                     ; Y := destination buffer address
.3952ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3952ec		a9 38		lda #$38	                LDA #`DOS_FILE_BUFFS
.3952ee		48		pha		                PHA
.3952ef		ab		plb		                PLB
.3952f0		c2 20		rep #$20	                REP #$20        ; set A long
.3952f2		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.3952f5		f0 11		beq $395308	loop            BEQ done
.3952f7		48		pha		                PHA
.3952f8		e2 20		sep #$20	                SEP #$20        ; set A short
.3952fa		bd 00 00	lda $380000,x	                LDA #0,B,X
.3952fd		99 00 00	sta $380000,y	                STA #0,B,Y
.395300		c2 20		rep #$20	                REP #$20        ; set A long
.395302		68		pla		                PLA
.395303		3a		dec a		                DEC A
.395304		e8		inx		                INX
.395305		c8		iny		                INY
.395306		80 ed		bra $3952f5	                BRA loop
.395308		28		plp		done            PLP
.395309		ab		plb		                PLB
.39530a		2b		pld		                PLD
.39530b		7a		ply		                PLY
.39530c		fa		plx		                PLX
.39530d		6b		rtl		                RTL
.39530e						IF_COPY
.39530e		da		phx		                PHX
.39530f		5a		phy		                PHY
.395310		0b		phd		                PHD
.395311		8b		phb		                PHB
.395312		08		php		                PHP
.395313		48		pha		                PHA             ; begin setdbr macro
.395314		08		php		                PHP
.395315		e2 20		sep #$20	                SEP #$20        ; set A short
.395317		a9 00		lda #$00	                LDA #0
.395319		48		pha		                PHA
.39531a		ab		plb		                PLB
.39531b		28		plp		                PLP
.39531c		68		pla		                PLA             ; end setdbr macro
.39531d		48		pha		                PHA             ; begin setdp macro
.39531e		08		php		                PHP
.39531f		c2 20		rep #$20	                REP #$20        ; set A long
.395321		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395324		5b		tcd		                TCD
.395325		28		plp		                PLP
.395326		68		pla		                PLA             ; end setdp macro
.395327		22 58 52 39	jsl $395258	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.39532b		b0 03		bcs $395330	                BCS set_src_path
.39532d		82 7b fe	brl $3951ab	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.395330						set_src_path
.395330		c2 30		rep #$30	                REP #$30        ; set A&X long
.395332		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.395335		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.395337		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395339		c8		iny		                INY
.39533a		c8		iny		                INY
.39533b		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.39533d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39533f						alloc_dest
.39533f		c2 30		rep #$30	                REP #$30        ; set A&X long
.395341		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.395343		85 30		sta $0350	                STA @b DOS_SRC_PTR
.395345		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395347		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395349		22 58 52 39	jsl $395258	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.39534d		b0 0f		bcs $39535e	                BCS set_paths                   ; If everything is ok... start setting the paths
.39534f		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395351		85 20		sta $0340	                STA @b DOS_FD_PTR
.395353		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395355		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395357		22 ac 52 39	jsl $3952ac	                JSL IF_FREEFD                   ; And free it
.39535b		82 4d fe	brl $3951ab	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.39535e						set_paths
.39535e		c2 30		rep #$30	                REP #$30        ; set A&X long
.395360		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.395362		85 34		sta $0354	                STA @b DOS_DST_PTR
.395364		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395366		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395368		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.39536b		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.39536d		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39536f		c8		iny		                INY
.395370		c8		iny		                INY
.395371		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.395373		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395375		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395377		85 20		sta $0340	                STA @b DOS_FD_PTR
.395379		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.39537b		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39537d		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.395381		b0 10		bcs $395393	                BCS src_open                    ; If success, work with the openned file
.395383		00		brk #		                BRK
.395384		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395386		85 20		sta $0340	                STA @b DOS_FD_PTR
.395388		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.39538a		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39538c		22 ac 52 39	jsl $3952ac	                JSL IF_FREEFD                   ; And free it
.395390		82 bc ff	brl $39534f	                BRL err_free_src_fd             ; Free the source file descriptor
.395393		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.395396		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395398		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39539a		c8		iny		                INY
.39539b		c8		iny		                INY
.39539c		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.39539e		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3953a0		22 d0 52 39	jsl $3952d0	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.3953a4		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3953a6		85 20		sta $0340	                STA @b DOS_FD_PTR
.3953a8		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3953aa		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3953ac		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.3953b0		b0 0f		bcs $3953c1	                BCS read_next                   ; If sucessful, try to get the next cluster
.3953b2		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3953b4		85 20		sta $0340	                STA @b DOS_FD_PTR
.3953b6		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3953b8		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3953ba		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.3953be		82 c3 ff	brl $395384	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.3953c1						read_next
.3953c1		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3953c3		85 20		sta $0340	                STA @b DOS_FD_PTR
.3953c5		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3953c7		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3953c9		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.3953cd		b0 19		bcs $3953e8	                BCS copy2dest                   ; If successful, copy the sector
.3953cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3953d1		a5 0e		lda $032e	                LDA @b DOS_STATUS
.3953d3		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.3953d5		f0 32		beq $395409	                BEQ file_copied                 ; Yes: we're done copying
.3953d7						err_dest_close
.3953d7		c2 20		rep #$20	                REP #$20        ; set A long
.3953d9		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3953db		85 20		sta $0340	                STA @b DOS_FD_PTR
.3953dd		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3953df		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3953e1		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.3953e5		82 ca ff	brl $3953b2	                BRL err_src_close               ; Close the source and throw an error
.3953e8						copy2dest
.3953e8		22 d0 52 39	jsl $3952d0	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.3953ec		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.3953ef		a9 00 00	lda #$0000	                LDA #0
.3953f2		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3953f4		c8		iny		                INY
.3953f5		c8		iny		                INY
.3953f6		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3953f8		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3953fa		85 20		sta $0340	                STA @b DOS_FD_PTR
.3953fc		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3953fe		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395400		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.395404		90 d1		bcc $3953d7	                BCC err_dest_close              ; If error: close all files and throw the error
.395406		82 b8 ff	brl $3953c1	                BRL read_next                   ; Otherwise: repeat the loop
.395409						file_copied
.395409		c2 20		rep #$20	                REP #$20        ; set A long
.39540b		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.39540d		85 20		sta $0340	                STA @b DOS_FD_PTR
.39540f		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395411		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395413		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.395417		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395419		85 20		sta $0340	                STA @b DOS_FD_PTR
.39541b		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.39541d		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39541f		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.395423		82 8c fd	brl $3951b2	                BRL IF_SUCCESS

;******  Return to file: src/kernel.asm


;******  Processing file: src/uart.asm

=$af13f8					    UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8					    UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.395426						UART_SELECT
.395426		08		php		            PHP
.395427		c2 20		rep #$20	                REP #$20        ; set A long
.395429		c9 02 00	cmp #$0002	            CMP #2
.39542c		f0 07		beq $395435	            BEQ is_COM2
.39542e		c2 20		rep #$20	                REP #$20        ; set A long
.395430		a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.395433		80 05		bra $39543a	            BRA setaddr
.395435						is_COM2
.395435		c2 20		rep #$20	                REP #$20        ; set A long
.395437		a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.39543a		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.39543e		e2 20		sep #$20	                SEP #$20        ; set A short
.395440		a9 af		lda #$af	            LDA #`UART1_BASE
.395442		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395446		28		plp		            PLP
.395447		6b		rtl		            RTL
.395448						UART_SETBPS
.395448		08		php		            PHP
.395449		0b		phd		            PHD
.39544a		48		pha		                PHA             ; begin setdp macro
.39544b		08		php		                PHP
.39544c		c2 20		rep #$20	                REP #$20        ; set A long
.39544e		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395451		5b		tcd		                TCD
.395452		28		plp		                PLP
.395453		68		pla		                PLA             ; end setdp macro
.395454		c2 30		rep #$30	                REP #$30        ; set A&X long
.395456		48		pha		            PHA
.395457		e2 20		sep #$20	                SEP #$20        ; set A short
.395459		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.39545c		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.39545e		09 80		ora #$80	            ORA #LCR_DLB
.395460		97 00		sta [$0700],y	            STA [CURRUART],Y
.395462		c2 20		rep #$20	                REP #$20        ; set A long
.395464		68		pla		            PLA
.395465		a0 00 00	ldy #$0000	            LDY #UART_DLL
.395468		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.39546a		e2 20		sep #$20	                SEP #$20        ; set A short
.39546c		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.39546f		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395471		49 80		eor #$80	            EOR #LCR_DLB
.395473		97 00		sta [$0700],y	            STA [CURRUART],Y
.395475		2b		pld		            PLD
.395476		28		plp		            PLP
.395477		6b		rtl		            RTL
.395478						UART_SETLCR
.395478		08		php		            PHP
.395479		0b		phd		            PHD
.39547a		48		pha		                PHA             ; begin setdp macro
.39547b		08		php		                PHP
.39547c		c2 20		rep #$20	                REP #$20        ; set A long
.39547e		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395481		5b		tcd		                TCD
.395482		28		plp		                PLP
.395483		68		pla		                PLA             ; end setdp macro
.395484		e2 20		sep #$20	                SEP #$20        ; set A short
.395486		c2 10		rep #$10	                REP #$10        ; set X long
.395488		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.39548a		a0 03 00	ldy #$0003	            LDY #UART_LCR
.39548d		97 00		sta [$0700],y	            STA [CURRUART],Y
.39548f		2b		pld		            PLD
.395490		28		plp		            PLP
.395491		6b		rtl		            RTL
.395492						UART_INIT
.395492		08		php		            PHP
.395493		0b		phd		            PHD
.395494		c2 30		rep #$30	                REP #$30        ; set A&X long
.395496		48		pha		                PHA             ; begin setdp macro
.395497		08		php		                PHP
.395498		c2 20		rep #$20	                REP #$20        ; set A long
.39549a		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.39549d		5b		tcd		                TCD
.39549e		28		plp		                PLP
.39549f		68		pla		                PLA             ; end setdp macro
.3954a0		a9 01 00	lda #$0001	            LDA #UART_115200
.3954a3		22 48 54 39	jsl $395448	            JSL UART_SETBPS
.3954a7		e2 20		sep #$20	                SEP #$20        ; set A short
.3954a9		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.3954ab		22 78 54 39	jsl $395478	            JSL UART_SETLCR
.3954af		a9 e1		lda #$e1	            LDA #%11100001
.3954b1		a0 02 00	ldy #$0002	            LDY #UART_FCR
.3954b4		97 00		sta [$0700],y	            STA [CURRUART],Y
.3954b6		2b		pld		            PLD
.3954b7		28		plp		            PLP
.3954b8		6b		rtl		            RTL
.3954b9						UART_GETC
.3954b9		08		php		            PHP
.3954ba		0b		phd		            PHD
.3954bb		c2 30		rep #$30	                REP #$30        ; set A&X long
.3954bd		48		pha		                PHA             ; begin setdp macro
.3954be		08		php		                PHP
.3954bf		c2 20		rep #$20	                REP #$20        ; set A long
.3954c1		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3954c4		5b		tcd		                TCD
.3954c5		28		plp		                PLP
.3954c6		68		pla		                PLA             ; end setdp macro
.3954c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3954c9		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3954cc		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.3954ce		29 01		and #$01	            AND #LSR_DATA_AVAIL
.3954d0		f0 fa		beq $3954cc	            BEQ wait_getc           ; If the flag is clear, wait
.3954d2		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.3954d5		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.3954d7		2b		pld		            PLD
.3954d8		28		plp		            PLP
.3954d9		6b		rtl		            RTL
.3954da						UART_PUTC
.3954da		08		php		            PHP
.3954db		0b		phd		            PHD
.3954dc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3954de		48		pha		                PHA             ; begin setdp macro
.3954df		08		php		                PHP
.3954e0		c2 20		rep #$20	                REP #$20        ; set A long
.3954e2		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3954e5		5b		tcd		                TCD
.3954e6		28		plp		                PLP
.3954e7		68		pla		                PLA             ; end setdp macro
.3954e8		e2 20		sep #$20	                SEP #$20        ; set A short
.3954ea		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.3954eb		a0 05 00	ldy #$0005	            LDY #UART_LSR
.3954ee		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.3954f0		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.3954f2		f0 fa		beq $3954ee	            BEQ wait_putc
.3954f4		68		pla		            PLA
.3954f5		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.3954f8		97 00		sta [$0700],y	            STA [CURRUART],Y
.3954fa		2b		pld		            PLD
.3954fb		28		plp		            PLP
.3954fc		6b		rtl		            RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/joystick.asm

.3954fd						JOYSTICK_SET_NES_MODE
.3954fd		e2 20		sep #$20	                SEP #$20        ; set A short
.3954ff		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395503		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395505		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395509		6b		rtl		          RTL
.39550a						JOYSTICK_SET_SNES_MODE
.39550a		e2 20		sep #$20	                SEP #$20        ; set A short
.39550c		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395510		29 fb		and #$fb	          AND #~NES_SNES_JOY
.395512		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395514		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395518		6b		rtl		          RTL
.395519						JOYSTICK_ENABLE_NES_SNES_PORT0
.395519		e2 20		sep #$20	                SEP #$20        ; set A short
.39551b		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39551f		29 fe		and #$fe	          AND #~NES_SNES_EN0
.395521		09 01		ora #$01	          ORA #NES_SNES_EN0
.395523		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395527		6b		rtl		          RTL
.395528						JOYSTICK_ENABLE_NES_SNES_PORT1
.395528		e2 20		sep #$20	                SEP #$20        ; set A short
.39552a		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39552e		29 fd		and #$fd	          AND #~NES_SNES_EN1
.395530		09 02		ora #$02	          ORA #NES_SNES_EN1
.395532		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395536		6b		rtl		          RTL
.395537						JOYSTICK_DISABLE_NES_SNES_PORT0
.395537		e2 20		sep #$20	                SEP #$20        ; set A short
.395539		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39553d		29 fe		and #$fe	          AND #~NES_SNES_EN0
.39553f		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395543		6b		rtl		          RTL
.395544						JOYSTICK_DISABLE_NES_SNES_PORT1
.395544		e2 20		sep #$20	                SEP #$20        ; set A short
.395546		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39554a		29 fd		and #$fd	          AND #~NES_SNES_EN1
.39554c		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395550		6b		rtl		          RTL
.395551						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395551		e2 20		sep #$20	                SEP #$20        ; set A short
.395553		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395557		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395559		c9 00		cmp #$00	          CMP #$00
.39555b		f0 14		beq $395571	          BEQ END_OF_JOYSTICK_POLL
.39555d		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395561		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395563		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395567						JOYSTICK_POLLING_ISNOTOVER
.395567		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.39556b		29 40		and #$40	          AND #NES_SNES_DONE
.39556d		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.39556f		d0 f6		bne $395567	          BNE JOYSTICK_POLLING_ISNOTOVER
.395571						END_OF_JOYSTICK_POLL
.395571		6b		rtl		          RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/Libraries/sdc_library.asm

.395572						SDC_WAITBUSY
.395572		08		php		                PHP
.395573		e2 20		sep #$20	                SEP #$20        ; set A short
.395575		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395579		29 01		and #$01	                AND #SDC_TRANS_BUSY
.39557b		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.39557d		f0 f6		beq $395575	                BEQ wait_xact
.39557f		28		plp		                PLP
.395580		6b		rtl		                RTL
.395581						SDC_INIT
.395581		0b		phd		                PHD
.395582		8b		phb		                PHB
.395583		08		php		                PHP
.395584		48		pha		                PHA             ; begin setdbr macro
.395585		08		php		                PHP
.395586		e2 20		sep #$20	                SEP #$20        ; set A short
.395588		a9 00		lda #$00	                LDA #0
.39558a		48		pha		                PHA
.39558b		ab		plb		                PLB
.39558c		28		plp		                PLP
.39558d		68		pla		                PLA             ; end setdbr macro
.39558e		48		pha		                PHA             ; begin setdp macro
.39558f		08		php		                PHP
.395590		c2 20		rep #$20	                REP #$20        ; set A long
.395592		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395595		5b		tcd		                TCD
.395596		28		plp		                PLP
.395597		68		pla		                PLA             ; end setdp macro
.395598		e2 20		sep #$20	                SEP #$20        ; set A short
.39559a		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.39559e		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.3955a0		f0 04		beq $3955a6	                BEQ start_trans                     ; Yes: start the transaction
.3955a2		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.3955a4		80 22		bra $3955c8	                BRA set_error
.3955a6		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.3955a8		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.3955ac		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.3955ae		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.3955b2		22 72 55 39	jsl $395572	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.3955b6		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.3955ba		d0 07		bne $3955c3	                BNE ret_error                       ; Is there one? Process the error
.3955bc		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.3955be		28		plp		                PLP
.3955bf		ab		plb		                PLB
.3955c0		2b		pld		                PLD
.3955c1		38		sec		                SEC
.3955c2		6b		rtl		                RTL
.3955c3		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.3955c6		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.3955c8		85 00		sta $0320	set_error       STA BIOS_STATUS
.3955ca		28		plp		                PLP
.3955cb		ab		plb		                PLB
.3955cc		2b		pld		                PLD
.3955cd		18		clc		                CLC
.3955ce		6b		rtl		                RTL
.3955cf						SDC_GETBLOCK
.3955cf		0b		phd		                PHD
.3955d0		8b		phb		                PHB
.3955d1		08		php		                PHP
.3955d2		48		pha		                PHA             ; begin setdbr macro
.3955d3		08		php		                PHP
.3955d4		e2 20		sep #$20	                SEP #$20        ; set A short
.3955d6		a9 00		lda #$00	                LDA #0
.3955d8		48		pha		                PHA
.3955d9		ab		plb		                PLB
.3955da		28		plp		                PLP
.3955db		68		pla		                PLA             ; end setdbr macro
.3955dc		48		pha		                PHA             ; begin setdp macro
.3955dd		08		php		                PHP
.3955de		c2 20		rep #$20	                REP #$20        ; set A long
.3955e0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3955e3		5b		tcd		                TCD
.3955e4		28		plp		                PLP
.3955e5		68		pla		                PLA             ; end setdp macro
.3955e6		e2 20		sep #$20	                SEP #$20        ; set A short
.3955e8		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.3955ec		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.3955ee		f0 04		beq $3955f4	                BEQ led_on                          ; Yes: turn on the LED
.3955f0		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.3955f2		80 71		bra $395665	                BRA ret_error
.3955f4		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.3955f8		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.3955fa		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.3955fe		a9 00		lda #$00	                LDA #0
.395600		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395604		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395606		0a		asl a		                ASL A
.395607		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.39560b		a5 03		lda $0323	                LDA BIOS_LBA+1
.39560d		2a		rol a		                ROL A
.39560e		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395612		a5 04		lda $0324	                LDA BIOS_LBA+2
.395614		2a		rol a		                ROL A
.395615		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395619		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.39561b		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.39561f		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395621		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395625		22 72 55 39	jsl $395572	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395629		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.39562d		d0 36		bne $395665	                BNE ret_error                       ; Is there one? Process the error
.39562f		e2 20		sep #$20	                SEP #$20        ; set A short
.395631		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395635		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395637		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.39563b		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.39563d		c2 10		rep #$10	                REP #$10        ; set X long
.39563f		a0 00 00	ldy #$0000	                LDY #0
.395642		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395646		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395648		c8		iny		                INY                                 ; Advance to the next byte
.395649		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.39564c		d0 f4		bne $395642	                BNE loop_rd                         ; No: keep reading
.39564e		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395652		d0 11		bne $395665	                BNE ret_error                       ; Is there one? Process the error
.395654		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395656		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.39565a		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.39565c		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395660		28		plp		                PLP
.395661		ab		plb		                PLB
.395662		2b		pld		                PLD
.395663		38		sec		                SEC
.395664		6b		rtl		                RTL
.395665		85 00		sta $0320	ret_error       STA BIOS_STATUS
.395667		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.39566b		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.39566d		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395671		28		plp		                PLP
.395672		ab		plb		                PLB
.395673		2b		pld		                PLD
.395674		18		clc		                CLC
.395675		6b		rtl		                RTL
.395676						SDC_PUTBLOCK
.395676		0b		phd		                PHD
.395677		8b		phb		                PHB
.395678		08		php		                PHP
.395679		48		pha		                PHA             ; begin setdbr macro
.39567a		08		php		                PHP
.39567b		e2 20		sep #$20	                SEP #$20        ; set A short
.39567d		a9 00		lda #$00	                LDA #0
.39567f		48		pha		                PHA
.395680		ab		plb		                PLB
.395681		28		plp		                PLP
.395682		68		pla		                PLA             ; end setdbr macro
.395683		48		pha		                PHA             ; begin setdp macro
.395684		08		php		                PHP
.395685		c2 20		rep #$20	                REP #$20        ; set A long
.395687		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39568a		5b		tcd		                TCD
.39568b		28		plp		                PLP
.39568c		68		pla		                PLA             ; end setdp macro
.39568d		e2 20		sep #$20	                SEP #$20        ; set A short
.39568f		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395693		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395695		f0 04		beq $39569b	                BEQ check_wp                        ; Yes: check for write protect
.395697		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395699		80 65		bra $395700	                BRA ret_error
.39569b		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.39569d		f0 04		beq $3956a3	                BEQ led_on                          ; Yes: start the transaction
.39569f		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.3956a1		80 5d		bra $395700	                BRA ret_error
.3956a3		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.3956a7		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.3956a9		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.3956ad		c2 10		rep #$10	                REP #$10        ; set X long
.3956af		a0 00 00	ldy #$0000	                LDY #0
.3956b2		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.3956b4		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.3956b8		c8		iny		                INY                                 ; Advance to the next byte
.3956b9		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.3956bc		d0 f4		bne $3956b2	                BNE loop_wr                         ; No: keep writing
.3956be		a9 00		lda #$00	                LDA #0
.3956c0		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.3956c4		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.3956c6		0a		asl a		                ASL A
.3956c7		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.3956cb		a5 03		lda $0323	                LDA BIOS_LBA+1
.3956cd		2a		rol a		                ROL A
.3956ce		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.3956d2		a5 04		lda $0324	                LDA BIOS_LBA+2
.3956d4		2a		rol a		                ROL A
.3956d5		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.3956d9		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.3956db		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.3956df		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.3956e1		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.3956e5		22 72 55 39	jsl $395572	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.3956e9		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.3956ed		d0 11		bne $395700	                BNE ret_error                       ; Is there one? Process the error
.3956ef		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.3956f1		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.3956f5		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.3956f7		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.3956fb		28		plp		                PLP
.3956fc		ab		plb		                PLB
.3956fd		2b		pld		                PLD
.3956fe		38		sec		                SEC
.3956ff		6b		rtl		                RTL
.395700		85 00		sta $0320	ret_error       STA BIOS_STATUS
.395702		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395706		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395708		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.39570c		28		plp		                PLP
.39570d		ab		plb		                PLB
.39570e		2b		pld		                PLD
.39570f		18		clc		                CLC
.395710		6b		rtl		                RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
>395711		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395719		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395729		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.39572d						FDC_Check_RQM
.39572d		0b		phd		                    PHD
.39572e		08		php		                    PHP
.39572f		48		pha		                PHA             ; begin setdp macro
.395730		08		php		                PHP
.395731		c2 20		rep #$20	                REP #$20        ; set A long
.395733		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395736		5b		tcd		                TCD
.395737		28		plp		                PLP
.395738		68		pla		                PLA             ; end setdp macro
.395739		e2 20		sep #$20	                SEP #$20        ; set A short
.39573b		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.39573d		22 3e 3b 39	jsl $393b3e	                    JSL ISETTIMEOUT
.395741		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395743		30 12		bmi $395757	                    BMI time_out            ; If so: signal a time out
.395745		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395749		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.39574b		f0 f4		beq $395741	                    BEQ loop
.39574d		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.39574f		22 3e 3b 39	jsl $393b3e	                    JSL ISETTIMEOUT
.395753		28		plp		                    PLP
.395754		2b		pld		                    PLD
.395755		38		sec		                    SEC
.395756		60		rts		                    RTS
.395757		28		plp		time_out            PLP
.395758		2b		pld		                    PLD
.395759		18		clc		                    CLC
.39575a		60		rts		                    RTS
.39575b						FDC_Check_CMD_BSY
.39575b		0b		phd		                    PHD
.39575c		08		php		                    PHP
.39575d		48		pha		                PHA             ; begin setdp macro
.39575e		08		php		                PHP
.39575f		c2 20		rep #$20	                REP #$20        ; set A long
.395761		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395764		5b		tcd		                TCD
.395765		28		plp		                PLP
.395766		68		pla		                PLA             ; end setdp macro
.395767		e2 20		sep #$20	                SEP #$20        ; set A short
.395769		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.39576b		22 3e 3b 39	jsl $393b3e	                    JSL ISETTIMEOUT
.39576f		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395771		30 12		bmi $395785	                    BMI time_out            ; If so: signal a time out
.395773		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395777		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395779		d0 f4		bne $39576f	                    BNE loop
.39577b		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.39577d		22 3e 3b 39	jsl $393b3e	                    JSL ISETTIMEOUT
.395781		28		plp		                    PLP
.395782		2b		pld		                    PLD
.395783		38		sec		                    SEC
.395784		60		rts		                    RTS
.395785		28		plp		time_out            PLP
.395786		2b		pld		                    PLD
.395787		18		clc		                    CLC
.395788		60		rts		                    RTS
.395789						FDC_Can_Read_Data
.395789		0b		phd		                    PHD
.39578a		08		php		                    PHP
.39578b		48		pha		                PHA             ; begin setdp macro
.39578c		08		php		                PHP
.39578d		c2 20		rep #$20	                REP #$20        ; set A long
.39578f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395792		5b		tcd		                TCD
.395793		28		plp		                PLP
.395794		68		pla		                PLA             ; end setdp macro
.395795		e2 20		sep #$20	                SEP #$20        ; set A short
.395797		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395799		22 3e 3b 39	jsl $393b3e	                    JSL ISETTIMEOUT
.39579d		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.39579f		30 14		bmi $3957b5	                    BMI time_out            ; If so: signal a time out
.3957a1		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.3957a5		29 40		and #$40	                    AND #FDC_MSR_DIO
.3957a7		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.3957a9		d0 f2		bne $39579d	                    BNE loop
.3957ab		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.3957ad		22 3e 3b 39	jsl $393b3e	                    JSL ISETTIMEOUT
.3957b1		28		plp		                    PLP
.3957b2		2b		pld		                    PLD
.3957b3		38		sec		                    SEC
.3957b4		60		rts		                    RTS
.3957b5		28		plp		time_out            PLP
.3957b6		2b		pld		                    PLD
.3957b7		18		clc		                    CLC
.3957b8		60		rts		                    RTS
.3957b9						FDC_DELAY_10MS
.3957b9		da		phx		                    PHX
.3957ba		08		php		                    PHP
.3957bb		c2 10		rep #$10	                REP #$10        ; set X long
.3957bd		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.3957c0		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.3957c1		ca		dex		                    DEX
.3957c2		e0 00 00	cpx #$0000	                    CPX #0
.3957c5		d0 f9		bne $3957c0	                    BNE loop
.3957c7		28		plp		                    PLP
.3957c8		fa		plx		                    PLX
.3957c9		6b		rtl		                    RTL
.3957ca						FDC_COMMAND
.3957ca		da		phx		                    PHX
.3957cb		8b		phb		                    PHB
.3957cc		0b		phd		                    PHD
.3957cd		08		php		                    PHP
.3957ce		48		pha		                PHA             ; begin setdbr macro
.3957cf		08		php		                PHP
.3957d0		e2 20		sep #$20	                SEP #$20        ; set A short
.3957d2		a9 00		lda #$00	                LDA #0
.3957d4		48		pha		                PHA
.3957d5		ab		plb		                PLB
.3957d6		28		plp		                PLP
.3957d7		68		pla		                PLA             ; end setdbr macro
.3957d8		48		pha		                PHA             ; begin setdp macro
.3957d9		08		php		                PHP
.3957da		c2 20		rep #$20	                REP #$20        ; set A long
.3957dc		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3957df		5b		tcd		                TCD
.3957e0		28		plp		                PLP
.3957e1		68		pla		                PLA             ; end setdp macro
.3957e2		22 b9 57 39	jsl $3957b9	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.3957e6		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3957e8		a2 00		ldx #$00	                    LDX #0
.3957ea		a9 00		lda #$00	                    LDA #0
.3957ec		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.3957ef		e8		inx		                    INX
.3957f0		e0 10		cpx #$10	                    CPX #16
.3957f2		d0 f8		bne $3957ec	                    BNE clr_results
.3957f4		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.3957f8		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.3957fa		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.3957fc		f0 04		beq $395802	                    BEQ start_send                          ; If so, start sending
.3957fe		22 17 59 39	jsl $395917	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.395802						start_send
.395802		e2 10		sep #$10	                SEP #$10        ; set X short
.395804		a2 00		ldx #$00	                    LDX #0
.395806		20 2d 57	jsr $39572d	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.395809		b0 03		bcs $39580e	                    BCS send_param
.39580b		82 5e 00	brl $39586c	                    BRL time_out                            ; If there was a timeout, flag the time out
.39580e		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.395811		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.395815		22 b9 57 39	jsl $3957b9	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.395819		e8		inx		                    INX                                     ; Advance to the next byte
.39581a		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.39581d		d0 e7		bne $395806	                    BNE send_loop                           ; Keep sending until we've sent them all
.39581f		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.395822		d0 03		bne $395827	                    BNE chk_data_dir
.395824		82 80 00	brl $3958a7	                    BRL result_phase                        ; If 0: we just want a result
.395827		10 3c		bpl $395865	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.395829						wr_data
.395829		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.39582b		30 03		bmi $395830	                    BMI wr_chk_rqm
.39582d		82 3c 00	brl $39586c	                    BRL time_out                            ; If not, raise an error
.395830		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.395834		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395836		f0 f1		beq $395829	                    BEQ wr_data_rdy
.395838		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.39583a		d0 03		bne $39583f	                    BNE wr_data_phase                       ; If so: transfer the data
.39583c		82 68 00	brl $3958a7	                    BRL result_phase                          ; If not: it's an error
.39583f						wr_data_phase
.39583f		c2 10		rep #$10	                REP #$10        ; set X long
.395841		a0 00 00	ldy #$0000	                    LDY #0
.395844		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.395846		30 03		bmi $39584b	                    BMI wr_chk_nondma
.395848		82 21 00	brl $39586c	                    BRL time_out                            ; If not, raise an error
.39584b		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.39584f		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395851		f0 54		beq $3958a7	                    BEQ result_phase                        ; If not: break out to result phase
.395853		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.395855		f0 ed		beq $395844	                    BEQ wr_data_loop                        ; No: keep waiting
.395857		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.395859		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.39585d		c8		iny		                    INY                                     ; Move to the next position
.39585e		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395861		d0 e1		bne $395844	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.395863		80 42		bra $3958a7	                    BRA result_phase                        ; ready for the result phase
.395865		20 89 57	jsr $395789	rd_data             JSR FDC_Can_Read_Data
.395868		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.39586a		30 07		bmi $395873	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.39586c						time_out
.39586c		e2 20		sep #$20	                SEP #$20        ; set A short
.39586e		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.395870		82 9c 00	brl $39590f	                    BRL pass_error
.395873		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.395877		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395879		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.39587b		d0 eb		bne $395868	                    BNE rd_data_rdy
.39587d		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395881		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395883		d0 03		bne $395888	                    BNE rd_data_phase                       ; If so: transfer the data
.395885		82 83 00	brl $39590b	                    BRL error                               ; If not: it's an error
.395888						rd_data_phase
.395888		c2 10		rep #$10	                REP #$10        ; set X long
.39588a		a0 00 00	ldy #$0000	                    LDY #0
.39588d		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.39588f		10 db		bpl $39586c	                    BPL time_out                            ; If not: throw a timeout error
.395891		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.395895		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395897		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395899		d0 f2		bne $39588d	                    BNE rd_data_loop
.39589b		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.39589f		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.3958a1		c8		iny		                    INY                                     ; Move to the next position
.3958a2		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.3958a5		d0 e6		bne $39588d	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.3958a7		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.3958aa		f0 34		beq $3958e0	                    BEQ chk_busy                            ; Then we're done
.3958ac		e2 10		sep #$10	                SEP #$10        ; set X short
.3958ae		a2 00		ldx #$00	                    LDX #0
.3958b0		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.3958b2		22 3e 3b 39	jsl $393b3e	                    JSL ISETTIMEOUT
.3958b6		20 89 57	jsr $395789	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.3958b9		90 b1		bcc $39586c	                    BCC time_out                            ; If there was a time out, raise an error
.3958bb		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.3958bf		20 89 57	jsr $395789	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.3958c2		90 a8		bcc $39586c	                    BCC time_out                            ; If there was a time out, raise an error
.3958c4		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.3958c8		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.3958cb		20 2d 57	jsr $39572d	                    JSR FDC_Check_RQM
.3958ce		90 9c		bcc $39586c	                    BCC time_out                            ; If there was a time out, flag the error
.3958d0		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.3958d4		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.3958d6		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.3958d8		d0 06		bne $3958e0	                    BNE chk_busy
.3958da		e8		inx		                    INX                                     ; Move to the next result positions
.3958db		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.3958de		d0 e4		bne $3958c4	                    BNE read_result                         ; And keep looping until we've read all
.3958e0						chk_busy
.3958e0		c2 10		rep #$10	                REP #$10        ; set X long
.3958e2		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.3958e5		22 5f 10 39	jsl $39105f	                    JSL ILOOP_MS
.3958e9		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.3958ed		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.3958ef		f0 12		beq $395903	                    BEQ done                                ; If not set: we're done
.3958f1		20 89 57	jsr $395789	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.3958f4		b0 03		bcs $3958f9	                    BCS get_result_byte
.3958f6		82 73 ff	brl $39586c	                    BRL time_out                            ; If there was a time out, flag the error
.3958f9		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.3958fd		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.395900		e8		inx		                    INX
.395901		80 dd		bra $3958e0	                    BRA chk_busy                            ; And keep checking
.395903						done
.395903		64 20		stz $0320	                    STZ BIOS_STATUS
.395905		28		plp		                    PLP
.395906		2b		pld		                    PLD
.395907		ab		plb		                    PLB
.395908		fa		plx		                    PLX
.395909		38		sec		                    SEC
.39590a		6b		rtl		                    RTL
.39590b						error
.39590b		e2 20		sep #$20	                SEP #$20        ; set A short
.39590d		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.39590f		85 20		sta $0320	pass_error          STA BIOS_STATUS
.395911		28		plp		                    PLP
.395912		2b		pld		                    PLD
.395913		ab		plb		                    PLB
.395914		fa		plx		                    PLX
.395915		18		clc		                    CLC
.395916		6b		rtl		                    RTL
.395917						FDC_Init
.395917		08		php		                    PHP
.395918		c2 10		rep #$10	                REP #$10        ; set X long
.39591a		e2 20		sep #$20	                SEP #$20        ; set A short
.39591c		a9 00		lda #$00	                    LDA #0
.39591e		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395922		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.395925		a0 00 00	ldy #$0000	                    LDY #0
.395928		22 6c 10 39	jsl $39106c	                    JSL IDELAY
.39592c		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.39592e		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395932		ea		nop		                    NOP
.395933		ea		nop		                    NOP
.395934		ea		nop		                    NOP
.395935		ea		nop		                    NOP
.395936		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.395938		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.39593c		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.39593e		8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.395942		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.395945		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.395948		22 6c 10 39	jsl $39106c	                    JSL IDELAY
.39594c		22 27 5a 39	jsl $395a27	                    JSL FDC_Sense_Int_Status
.395950		90 25		bcc $395977	                    BCC pass_failure
.395952		22 27 5a 39	jsl $395a27	                    JSL FDC_Sense_Int_Status
.395956		90 1f		bcc $395977	                    BCC pass_failure
.395958		22 27 5a 39	jsl $395a27	                    JSL FDC_Sense_Int_Status
.39595c		90 19		bcc $395977	                    BCC pass_failure
.39595e		22 27 5a 39	jsl $395a27	                    JSL FDC_Sense_Int_Status
.395962		90 13		bcc $395977	                    BCC pass_failure
.395964		22 e9 5a 39	jsl $395ae9	                    JSL FDC_Configure_Command
.395968		90 0d		bcc $395977	                    BCC pass_failure
.39596a		22 90 5a 39	jsl $395a90	                    JSL FDC_Specify_Command
.39596e		90 07		bcc $395977	                    BCC pass_failure
.395970		22 93 59 39	jsl $395993	                    JSL FDC_Motor_On
.395974		28		plp		                    PLP
.395975		38		sec		                    SEC
.395976		6b		rtl		                    RTL
.395977		28		plp		pass_failure        PLP
.395978		18		clc		                    CLC
.395979		6b		rtl		                    RTL
.39597a						FDC_MOTOR_NEEDED
.39597a		08		php		                    PHP
.39597b		c2 20		rep #$20	                REP #$20        ; set A long
.39597d		78		sei		                    SEI                         ; Turn off interrupts
.39597e		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.395981		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.395985		e2 20		sep #$20	                SEP #$20        ; set A short
.395987		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.39598b		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.39598d		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.395991		28		plp		                    PLP
.395992		6b		rtl		                    RTL
.395993						FDC_Motor_On
.395993		08		php		                    PHP
.395994		22 7a 59 39	jsl $39597a	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395998		e2 20		sep #$20	                SEP #$20        ; set A short
.39599a		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.39599e		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.3959a0		d0 1f		bne $3959c1	                    BNE done                    ; If so: skip
.3959a2		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.3959a4		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3959a8		20 2d 57	jsr $39572d	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.3959ab		90 17		bcc $3959c4	                    BCC time_out
.3959ad		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3959b0		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3959b3		22 6c 10 39	jsl $39106c	                    JSL IDELAY
.3959b7		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3959bb		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.3959bd		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.3959c1		28		plp		done                PLP
.3959c2		38		sec		                    SEC
.3959c3		6b		rtl		                    RTL
.3959c4		28		plp		time_out            PLP                         ; Return a timeout error
.3959c5		18		clc		                    CLC
.3959c6		6b		rtl		                    RTL
.3959c7						FDC_Motor_Off
.3959c7		08		php		                    PHP
.3959c8		e2 20		sep #$20	                SEP #$20        ; set A short
.3959ca		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.3959cc		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.3959d0		c2 20		rep #$20	                REP #$20        ; set A long
.3959d2		78		sei		                    SEI                         ; Turn off interrupts
.3959d3		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.3959d6		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.3959da		e2 20		sep #$20	                SEP #$20        ; set A short
.3959dc		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.3959e0		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.3959e2		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.3959e6		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3959ea		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.3959ec		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.3959f0		28		plp		                    PLP
.3959f1		6b		rtl		                    RTL
.3959f2						FDC_Recalibrate_Command
.3959f2		0b		phd		                    PHD
.3959f3		08		php		                    PHP
.3959f4		48		pha		                PHA             ; begin setdp macro
.3959f5		08		php		                PHP
.3959f6		c2 20		rep #$20	                REP #$20        ; set A long
.3959f8		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3959fb		5b		tcd		                TCD
.3959fc		28		plp		                PLP
.3959fd		68		pla		                PLA             ; end setdp macro
.3959fe		22 7a 59 39	jsl $39597a	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395a02		e2 20		sep #$20	                SEP #$20        ; set A short
.395a04		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.395a06		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395a09		a5 00		lda $0300	                    LDA FDC_DRIVE
.395a0b		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395a0e		a9 02		lda #$02	                    LDA #2
.395a10		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.395a13		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.395a16		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.395a19		22 ca 57 39	jsl $3957ca	                    JSL FDC_COMMAND             ; Issue the command
.395a1d		90 04		bcc $395a23	                    BCC pass_failure            ; If failure, pass the failure up
.395a1f		28		plp		                    PLP
.395a20		2b		pld		                    PLD
.395a21		38		sec		                    SEC
.395a22		6b		rtl		                    RTL
.395a23		28		plp		pass_failure        PLP
.395a24		2b		pld		                    PLD
.395a25		18		clc		                    CLC
.395a26		6b		rtl		                    RTL
.395a27						FDC_Sense_Int_Status
.395a27		8b		phb		                    PHB
.395a28		0b		phd		                    PHD
.395a29		08		php		                    PHP
.395a2a		48		pha		                PHA             ; begin setdbr macro
.395a2b		08		php		                PHP
.395a2c		e2 20		sep #$20	                SEP #$20        ; set A short
.395a2e		a9 00		lda #$00	                LDA #0
.395a30		48		pha		                PHA
.395a31		ab		plb		                PLB
.395a32		28		plp		                PLP
.395a33		68		pla		                PLA             ; end setdbr macro
.395a34		48		pha		                PHA             ; begin setdp macro
.395a35		08		php		                PHP
.395a36		c2 20		rep #$20	                REP #$20        ; set A long
.395a38		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395a3b		5b		tcd		                TCD
.395a3c		28		plp		                PLP
.395a3d		68		pla		                PLA             ; end setdp macro
.395a3e		c2 30		rep #$30	                REP #$30        ; set A&X long
.395a40		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.395a43		22 5f 10 39	jsl $39105f	                    JSL ILOOP_MS
.395a47		e2 20		sep #$20	                SEP #$20        ; set A short
.395a49		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.395a4b		a9 ff		lda #$ff	                    LDA #$FF
.395a4d		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.395a4f		20 5b 57	jsr $39575b	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.395a52		90 30		bcc $395a84	                    BCC time_out                        ; If there was a time out, raise an error
.395a54		20 2d 57	jsr $39572d	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395a57		90 2b		bcc $395a84	                    BCC time_out                        ; If there was a time out, raise an error
.395a59		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.395a5b		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395a5f		20 89 57	jsr $395789	                    JSR FDC_Can_Read_Data
.395a62		90 20		bcc $395a84	                    BCC time_out                        ; If there was a time out, raise an error
.395a64		20 2d 57	jsr $39572d	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395a67		90 1b		bcc $395a84	                    BCC time_out                        ; If there was a time out, raise an error
.395a69		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395a6d		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.395a6f		20 2d 57	jsr $39572d	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395a72		90 10		bcc $395a84	                    BCC time_out                        ; If there was a time out, raise an error
.395a74		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395a78		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.395a7a		e2 20		sep #$20	                SEP #$20        ; set A short
.395a7c		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.395a7f		28		plp		                    PLP
.395a80		2b		pld		                    PLD
.395a81		ab		plb		                    PLB
.395a82		38		sec		                    SEC
.395a83		6b		rtl		                    RTL
.395a84						time_out
.395a84		e2 20		sep #$20	                SEP #$20        ; set A short
.395a86		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.395a88		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395a8b		28		plp		                    PLP
.395a8c		2b		pld		                    PLD
.395a8d		ab		plb		                    PLB
.395a8e		18		clc		                    CLC
.395a8f		6b		rtl		                    RTL
.395a90						FDC_Specify_Command
.395a90		8b		phb		                    PHB
.395a91		0b		phd		                    PHD
.395a92		08		php		                    PHP
.395a93		48		pha		                PHA             ; begin setdbr macro
.395a94		08		php		                PHP
.395a95		e2 20		sep #$20	                SEP #$20        ; set A short
.395a97		a9 00		lda #$00	                LDA #0
.395a99		48		pha		                PHA
.395a9a		ab		plb		                PLB
.395a9b		28		plp		                PLP
.395a9c		68		pla		                PLA             ; end setdbr macro
.395a9d		48		pha		                PHA             ; begin setdp macro
.395a9e		08		php		                PHP
.395a9f		c2 20		rep #$20	                REP #$20        ; set A long
.395aa1		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395aa4		5b		tcd		                TCD
.395aa5		28		plp		                PLP
.395aa6		68		pla		                PLA             ; end setdp macro
.395aa7		c2 30		rep #$30	                REP #$30        ; set A&X long
.395aa9		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.395aac		22 5f 10 39	jsl $39105f	                    JSL ILOOP_MS
.395ab0		e2 20		sep #$20	                SEP #$20        ; set A short
.395ab2		20 5b 57	jsr $39575b	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395ab5		90 26		bcc $395add	                    BCC time_out            ; If there was a time out, raise an error
.395ab7		20 2d 57	jsr $39572d	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395aba		90 21		bcc $395add	                    BCC time_out            ; If there was a time out, raise an error
.395abc		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.395abe		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395ac2		20 2d 57	jsr $39572d	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395ac5		90 16		bcc $395add	                    BCC time_out            ; If there was a time out, raise an error
.395ac7		a9 cf		lda #$cf	                    LDA #$CF
.395ac9		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395acd		20 2d 57	jsr $39572d	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395ad0		90 0b		bcc $395add	                    BCC time_out            ; If there was a time out, raise an error
.395ad2		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.395ad4		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395ad8		28		plp		                    PLP
.395ad9		2b		pld		                    PLD
.395ada		ab		plb		                    PLB
.395adb		38		sec		                    SEC
.395adc		6b		rtl		                    RTL
.395add						time_out
.395add		e2 20		sep #$20	                SEP #$20        ; set A short
.395adf		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.395ae1		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395ae4		28		plp		                    PLP
.395ae5		2b		pld		                    PLD
.395ae6		ab		plb		                    PLB
.395ae7		18		clc		                    CLC
.395ae8		6b		rtl		                    RTL
.395ae9						FDC_Configure_Command
.395ae9		8b		phb		                    PHB
.395aea		0b		phd		                    PHD
.395aeb		08		php		                    PHP
.395aec		48		pha		                PHA             ; begin setdbr macro
.395aed		08		php		                PHP
.395aee		e2 20		sep #$20	                SEP #$20        ; set A short
.395af0		a9 00		lda #$00	                LDA #0
.395af2		48		pha		                PHA
.395af3		ab		plb		                PLB
.395af4		28		plp		                PLP
.395af5		68		pla		                PLA             ; end setdbr macro
.395af6		48		pha		                PHA             ; begin setdp macro
.395af7		08		php		                PHP
.395af8		c2 20		rep #$20	                REP #$20        ; set A long
.395afa		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395afd		5b		tcd		                TCD
.395afe		28		plp		                PLP
.395aff		68		pla		                PLA             ; end setdp macro
.395b00		c2 30		rep #$30	                REP #$30        ; set A&X long
.395b02		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.395b05		22 5f 10 39	jsl $39105f	                    JSL ILOOP_MS
.395b09		e2 20		sep #$20	                SEP #$20        ; set A short
.395b0b		20 5b 57	jsr $39575b	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395b0e		90 36		bcc $395b46	                    BCC time_out            ; If there was a time out, raise an error
.395b10		20 2d 57	jsr $39572d	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395b13		90 31		bcc $395b46	                    BCC time_out            ; If there was a time out, raise an error
.395b15		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.395b17		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395b1b		20 2d 57	jsr $39572d	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395b1e		90 26		bcc $395b46	                    BCC time_out            ; If there was a time out, raise an error
.395b20		a9 00		lda #$00	                    LDA #$00
.395b22		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395b26		20 2d 57	jsr $39572d	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395b29		90 1b		bcc $395b46	                    BCC time_out            ; If there was a time out, raise an error
.395b2b		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.395b2d		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395b31		20 2d 57	jsr $39572d	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395b34		90 10		bcc $395b46	                    BCC time_out            ; If there was a time out, raise an error
.395b36		a9 00		lda #$00	                    LDA #$00
.395b38		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395b3c		20 5b 57	jsr $39575b	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395b3f		90 05		bcc $395b46	                    BCC time_out            ; If there was a time out, raise an error
.395b41		28		plp		                    PLP
.395b42		2b		pld		                    PLD
.395b43		ab		plb		                    PLB
.395b44		38		sec		                    SEC
.395b45		6b		rtl		                    RTL
.395b46						time_out
.395b46		e2 20		sep #$20	                SEP #$20        ; set A short
.395b48		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.395b4a		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395b4d		28		plp		                    PLP
.395b4e		2b		pld		                    PLD
.395b4f		ab		plb		                    PLB
.395b50		18		clc		                    CLC
.395b51		6b		rtl		                    RTL
.395b52						FDC_Read_Sector
.395b52		8b		phb		                    PHB
.395b53		0b		phd		                    PHD
.395b54		08		php		                    PHP
.395b55		48		pha		                PHA             ; begin setdbr macro
.395b56		08		php		                PHP
.395b57		e2 20		sep #$20	                SEP #$20        ; set A short
.395b59		a9 00		lda #$00	                LDA #0
.395b5b		48		pha		                PHA
.395b5c		ab		plb		                PLB
.395b5d		28		plp		                PLP
.395b5e		68		pla		                PLA             ; end setdbr macro
.395b5f		48		pha		                PHA             ; begin setdp macro
.395b60		08		php		                PHP
.395b61		c2 20		rep #$20	                REP #$20        ; set A long
.395b63		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395b66		5b		tcd		                TCD
.395b67		28		plp		                PLP
.395b68		68		pla		                PLA             ; end setdp macro
.395b69		22 7a 59 39	jsl $39597a	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395b6d		e2 20		sep #$20	                SEP #$20        ; set A short
.395b6f		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.395b71		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.395b73		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395b76		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395b78		29 01		and #$01	                    AND #$01
.395b7a		0a		asl a		                    ASL A
.395b7b		0a		asl a		                    ASL A
.395b7c		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395b7e		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395b81		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.395b83		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395b86		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.395b88		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.395b8b		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.395b8d		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.395b90		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.395b92		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.395b95		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.395b97		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.395b9a		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.395b9c		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.395b9f		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.395ba1		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.395ba4		a9 09		lda #$09	                    LDA #9
.395ba6		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.395ba9		a9 01		lda #$01	                    LDA #1
.395bab		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.395bae		a9 07		lda #$07	                    LDA #7
.395bb0		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395bb3		22 ca 57 39	jsl $3957ca	command             JSL FDC_COMMAND                     ; Issue the command
.395bb7		08		php		                    PHP
.395bb8		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.395bbb		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.395bbd		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.395bc0		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.395bc2		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.395bc5		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.395bc7		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.395bca		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.395bcc		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.395bcf		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.395bd1		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.395bd4		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.395bd6		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.395bd9		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.395bdb		28		plp		                    PLP
.395bdc		90 04		bcc $395be2	                    BCC pass_failure
.395bde		28		plp		done                PLP
.395bdf		2b		pld		                    PLD
.395be0		ab		plb		                    PLB
.395be1		6b		rtl		                    RTL
.395be2		28		plp		pass_failure        PLP
.395be3		2b		pld		                    PLD
.395be4		ab		plb		                    PLB
.395be5		18		clc		                    CLC
.395be6		6b		rtl		                    RTL
.395be7						FDC_Write_Sector
.395be7		8b		phb		                    PHB
.395be8		0b		phd		                    PHD
.395be9		08		php		                    PHP
.395bea		48		pha		                PHA             ; begin setdbr macro
.395beb		08		php		                PHP
.395bec		e2 20		sep #$20	                SEP #$20        ; set A short
.395bee		a9 00		lda #$00	                LDA #0
.395bf0		48		pha		                PHA
.395bf1		ab		plb		                PLB
.395bf2		28		plp		                PLP
.395bf3		68		pla		                PLA             ; end setdbr macro
.395bf4		48		pha		                PHA             ; begin setdp macro
.395bf5		08		php		                PHP
.395bf6		c2 20		rep #$20	                REP #$20        ; set A long
.395bf8		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395bfb		5b		tcd		                TCD
.395bfc		28		plp		                PLP
.395bfd		68		pla		                PLA             ; end setdp macro
.395bfe		e2 20		sep #$20	                SEP #$20        ; set A short
.395c00		22 7a 59 39	jsl $39597a	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395c04		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.395c06		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.395c08		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395c0b		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395c0d		29 01		and #$01	                    AND #$01
.395c0f		0a		asl a		                    ASL A
.395c10		0a		asl a		                    ASL A
.395c11		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395c13		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395c16		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.395c18		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395c1b		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.395c1d		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.395c20		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.395c22		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.395c25		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.395c27		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.395c2a		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.395c2c		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.395c2f		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.395c31		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.395c34		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.395c36		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.395c39		a9 09		lda #$09	                    LDA #9
.395c3b		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.395c3e		a9 ff		lda #$ff	                    LDA #$FF
.395c40		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.395c43		a9 07		lda #$07	                    LDA #7
.395c45		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395c48		22 ca 57 39	jsl $3957ca	command             JSL FDC_COMMAND                     ; Issue the command
.395c4c		08		php		                    PHP
.395c4d		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.395c50		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.395c52		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.395c55		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.395c57		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.395c5a		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.395c5c		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.395c5f		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.395c61		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.395c64		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.395c66		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.395c69		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.395c6b		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.395c6e		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.395c70		28		plp		check_status        PLP
.395c71		90 04		bcc $395c77	                    BCC pass_failure
.395c73		28		plp		done                PLP
.395c74		2b		pld		                    PLD
.395c75		ab		plb		                    PLB
.395c76		6b		rtl		                    RTL
.395c77		28		plp		pass_failure        PLP
.395c78		2b		pld		                    PLD
.395c79		ab		plb		                    PLB
.395c7a		18		clc		                    CLC
.395c7b		6b		rtl		                    RTL
.395c7c						DIVIDE32
.395c7c		da		phx		                    PHX
.395c7d		5a		phy		                    PHY
.395c7e		0b		phd		                    PHD
.395c7f		08		php		                    PHP
.395c80		48		pha		                PHA             ; begin setdp macro
.395c81		08		php		                PHP
.395c82		c2 20		rep #$20	                REP #$20        ; set A long
.395c84		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.395c87		5b		tcd		                TCD
.395c88		28		plp		                PLP
.395c89		68		pla		                PLA             ; end setdp macro
.395c8a		c2 30		rep #$30	                REP #$30        ; set A&X long
.395c8c		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.395c8e		64 0a		stz $0316	                    STZ REMAINDER+2
.395c90		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.395c93		06 00		asl $030c	loop                ASL DIVIDEND
.395c95		26 02		rol $030e	                    ROL DIVIDEND+2
.395c97		26 08		rol $0314	                    ROL REMAINDER
.395c99		26 0a		rol $0316	                    ROL REMAINDER+2
.395c9b		a5 08		lda $0314	                    LDA REMAINDER
.395c9d		38		sec		                    SEC
.395c9e		e5 04		sbc $0310	                    SBC DIVISOR
.395ca0		a8		tay		                    TAY
.395ca1		a5 0a		lda $0316	                    LDA REMAINDER+2
.395ca3		e5 06		sbc $0312	                    SBC DIVISOR+2
.395ca5		90 06		bcc $395cad	                    BCC skip
.395ca7		85 0a		sta $0316	                    STA REMAINDER+2
.395ca9		84 08		sty $0314	                    STY REMAINDER
.395cab		e6 00		inc $030c	                    INC DIVIDEND
.395cad		ca		dex		skip                DEX
.395cae		d0 e3		bne $395c93	                    BNE loop
.395cb0		28		plp		                    PLP
.395cb1		2b		pld		                    PLD
.395cb2		7a		ply		                    PLY
.395cb3		fa		plx		                    PLX
.395cb4		60		rts		                    RTS
.395cb5						LBA2CHS
.395cb5		8b		phb		                    PHB
.395cb6		0b		phd		                    PHD
.395cb7		08		php		                    PHP
.395cb8		48		pha		                PHA             ; begin setdbr macro
.395cb9		08		php		                PHP
.395cba		e2 20		sep #$20	                SEP #$20        ; set A short
.395cbc		a9 00		lda #$00	                LDA #0
.395cbe		48		pha		                PHA
.395cbf		ab		plb		                PLB
.395cc0		28		plp		                PLP
.395cc1		68		pla		                PLA             ; end setdbr macro
.395cc2		48		pha		                PHA             ; begin setdp macro
.395cc3		08		php		                PHP
.395cc4		c2 20		rep #$20	                REP #$20        ; set A long
.395cc6		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395cc9		5b		tcd		                TCD
.395cca		28		plp		                PLP
.395ccb		68		pla		                PLA             ; end setdp macro
.395ccc		c2 30		rep #$30	                REP #$30        ; set A&X long
.395cce		a5 22		lda $0322	                    LDA BIOS_LBA
.395cd0		85 0c		sta $030c	                    STA DIVIDEND
.395cd2		a5 24		lda $0324	                    LDA BIOS_LBA+2
.395cd4		85 0e		sta $030e	                    STA DIVIDEND+2
.395cd6		a9 24 00	lda #$0024	                    LDA #36
.395cd9		85 10		sta $0310	                    STA DIVISOR
.395cdb		64 12		stz $0312	                    STZ DIVISOR+2
.395cdd		20 7c 5c	jsr $395c7c	                    JSR DIVIDE32
.395ce0		e2 20		sep #$20	                SEP #$20        ; set A short
.395ce2		a5 0c		lda $030c	                    LDA DIVIDEND
.395ce4		85 02		sta $0302	                    STA FDC_CYLINDER
.395ce6		c2 20		rep #$20	                REP #$20        ; set A long
.395ce8		a5 14		lda $0314	                    LDA REMAINDER
.395cea		85 0c		sta $030c	                    STA DIVIDEND
.395cec		a5 16		lda $0316	                    LDA REMAINDER+2
.395cee		85 0e		sta $030e	                    STA DIVIDEND+2
.395cf0		a9 12 00	lda #$0012	                    LDA #18
.395cf3		85 10		sta $0310	                    STA DIVISOR
.395cf5		64 12		stz $0312	                    STZ DIVISOR+2
.395cf7		20 7c 5c	jsr $395c7c	                    JSR DIVIDE32
.395cfa		e2 20		sep #$20	                SEP #$20        ; set A short
.395cfc		a5 0c		lda $030c	                    LDA DIVIDEND
.395cfe		29 01		and #$01	                    AND #$01
.395d00		85 01		sta $0301	                    STA FDC_HEAD
.395d02		a5 14		lda $0314	                    LDA REMAINDER
.395d04		1a		inc a		                    INC A
.395d05		85 03		sta $0303	                    STA FDC_SECTOR
.395d07		28		plp		                    PLP
.395d08		2b		pld		                    PLD
.395d09		ab		plb		                    PLB
.395d0a		6b		rtl		                    RTL
.395d0b						FDC_GETBLOCK
.395d0b		8b		phb		                    PHB
.395d0c		0b		phd		                    PHD
.395d0d		08		php		                    PHP
.395d0e		48		pha		                PHA             ; begin setdbr macro
.395d0f		08		php		                PHP
.395d10		e2 20		sep #$20	                SEP #$20        ; set A short
.395d12		a9 00		lda #$00	                LDA #0
.395d14		48		pha		                PHA
.395d15		ab		plb		                PLB
.395d16		28		plp		                PLP
.395d17		68		pla		                PLA             ; end setdbr macro
.395d18		48		pha		                PHA             ; begin setdp macro
.395d19		08		php		                PHP
.395d1a		c2 20		rep #$20	                REP #$20        ; set A long
.395d1c		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395d1f		5b		tcd		                TCD
.395d20		28		plp		                PLP
.395d21		68		pla		                PLA             ; end setdp macro
.395d22		e2 20		sep #$20	                SEP #$20        ; set A short
.395d24		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.395d26		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.395d29		c2 30		rep #$30	                REP #$30        ; set A&X long
.395d2b		22 b5 5c 39	jsl $395cb5	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.395d2f		e2 20		sep #$20	                SEP #$20        ; set A short
.395d31		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.395d33		f0 29		beq $395d5e	                    BEQ read_failure
.395d35						try_read
.395d35		c2 20		rep #$20	                REP #$20        ; set A long
.395d37		22 52 5b 39	jsl $395b52	                    JSL FDC_Read_Sector         ; Read the sector
.395d3b		90 14		bcc $395d51	                    BCC retry
.395d3d		e2 20		sep #$20	                SEP #$20        ; set A short
.395d3f		a5 06		lda $0306	                    LDA FDC_ST0
.395d41		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.395d43		d0 19		bne $395d5e	                    BNE read_failure
.395d45						ret_success
.395d45		e2 20		sep #$20	                SEP #$20        ; set A short
.395d47		a9 00		lda #$00	                    LDA #0
.395d49		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395d4c		28		plp		                    PLP
.395d4d		2b		pld		                    PLD
.395d4e		ab		plb		                    PLB
.395d4f		38		sec		                    SEC
.395d50		6b		rtl		                    RTL
.395d51						retry
.395d51		e2 20		sep #$20	                SEP #$20        ; set A short
.395d53		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.395d56		30 13		bmi $395d6b	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.395d58		22 17 59 39	jsl $395917	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.395d5c		80 d7		bra $395d35	                    BRA try_read                ; And try the read again
.395d5e						read_failure
.395d5e		e2 20		sep #$20	                SEP #$20        ; set A short
.395d60		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.395d62		80 04		bra $395d68	                    BRA ret_failure
.395d64						seek_failure
.395d64		e2 20		sep #$20	                SEP #$20        ; set A short
.395d66		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.395d68		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.395d6b		28		plp		pass_failure        PLP
.395d6c		2b		pld		                    PLD
.395d6d		ab		plb		                    PLB
.395d6e		18		clc		                    CLC
.395d6f		6b		rtl		                    RTL
.395d70						FDC_PUTBLOCK
.395d70		8b		phb		                    PHB
.395d71		0b		phd		                    PHD
.395d72		08		php		                    PHP
.395d73		48		pha		                PHA             ; begin setdbr macro
.395d74		08		php		                PHP
.395d75		e2 20		sep #$20	                SEP #$20        ; set A short
.395d77		a9 00		lda #$00	                LDA #0
.395d79		48		pha		                PHA
.395d7a		ab		plb		                PLB
.395d7b		28		plp		                PLP
.395d7c		68		pla		                PLA             ; end setdbr macro
.395d7d		48		pha		                PHA             ; begin setdp macro
.395d7e		08		php		                PHP
.395d7f		c2 20		rep #$20	                REP #$20        ; set A long
.395d81		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395d84		5b		tcd		                TCD
.395d85		28		plp		                PLP
.395d86		68		pla		                PLA             ; end setdp macro
.395d87		e2 20		sep #$20	                SEP #$20        ; set A short
.395d89		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.395d8b		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.395d8e		c2 30		rep #$30	                REP #$30        ; set A&X long
.395d90		22 b5 5c 39	jsl $395cb5	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.395d94		22 e7 5b 39	jsl $395be7	retry               JSL FDC_Write_Sector        ; Write the sector
.395d98		b0 03		bcs $395d9d	                    BCS chk_st0
.395d9a		82 28 00	brl $395dc5	                    BRL attempt_retry
.395d9d						chk_st0
.395d9d		e2 20		sep #$20	                SEP #$20        ; set A short
.395d9f		a5 06		lda $0306	                    LDA FDC_ST0
.395da1		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.395da3		d0 0c		bne $395db1	                    BNE write_failure
.395da5						ret_success
.395da5		e2 20		sep #$20	                SEP #$20        ; set A short
.395da7		a9 00		lda #$00	                    LDA #0
.395da9		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395dac		28		plp		                    PLP
.395dad		2b		pld		                    PLD
.395dae		ab		plb		                    PLB
.395daf		38		sec		                    SEC
.395db0		6b		rtl		                    RTL
.395db1						write_failure
.395db1		e2 20		sep #$20	                SEP #$20        ; set A short
.395db3		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.395db5		89 02		bit #$02	                    BIT #FDC_ST1_NW
.395db7		f0 04		beq $395dbd	                    BEQ generic_err
.395db9		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.395dbb		80 17		bra $395dd4	                    BRA ret_failure
.395dbd		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.395dbf		d0 e4		bne $395da5	                    BNE ret_success
.395dc1		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.395dc3		d0 e0		bne $395da5	                    BNE ret_success
.395dc5						attempt_retry
.395dc5		e2 20		sep #$20	                SEP #$20        ; set A short
.395dc7		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.395dca		d0 c8		bne $395d94	                    BNE retry                           ; And retry unless we have none left
.395dcc		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.395dce		80 04		bra $395dd4	                    BRA ret_failure
.395dd0						seek_failure
.395dd0		e2 20		sep #$20	                SEP #$20        ; set A short
.395dd2		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.395dd4						ret_failure
.395dd4		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395dd7		28		plp		pass_failure        PLP
.395dd8		2b		pld		                    PLD
.395dd9		ab		plb		                    PLB
.395dda		18		clc		                    CLC
.395ddb		6b		rtl		                    RTL
.395ddc						FDC_MOUNT
.395ddc		8b		phb		                    PHB
.395ddd		0b		phd		                    PHD
.395dde		08		php		                    PHP
.395ddf		48		pha		                PHA             ; begin setdbr macro
.395de0		08		php		                PHP
.395de1		e2 20		sep #$20	                SEP #$20        ; set A short
.395de3		a9 00		lda #$00	                LDA #0
.395de5		48		pha		                PHA
.395de6		ab		plb		                PLB
.395de7		28		plp		                PLP
.395de8		68		pla		                PLA             ; end setdbr macro
.395de9		48		pha		                PHA             ; begin setdp macro
.395dea		08		php		                PHP
.395deb		c2 20		rep #$20	                REP #$20        ; set A long
.395ded		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395df0		5b		tcd		                TCD
.395df1		28		plp		                PLP
.395df2		68		pla		                PLA             ; end setdp macro
.395df3		22 17 59 39	jsl $395917	                    JSL FDC_INIT
.395df7		e2 20		sep #$20	                SEP #$20        ; set A short
.395df9		c2 10		rep #$10	                REP #$10        ; set X long
.395dfb		a9 00		lda #$00	                    LDA #0
.395dfd		a2 00 00	ldx #$0000	                    LDX #0
.395e00		9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.395e04		e8		inx		                    INX
.395e05		e0 00 02	cpx #$0200	                    CPX #512
.395e08		d0 f6		bne $395e00	                    BNE zero_loop
.395e0a		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.395e0c		85 00		sta $0300	                    STA FDC_DRIVE
.395e0e		22 93 59 39	jsl $395993	                    JSL FDC_Motor_On                        ; Turn the motor on
.395e12		c2 30		rep #$30	                REP #$30        ; set A&X long
.395e14		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.395e17		85 22		sta $0322	                    STA BIOS_LBA
.395e19		85 24		sta $0324	                    STA BIOS_LBA+2
.395e1b		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.395e1e		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.395e20		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.395e23		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.395e25		22 0b 5d 39	jsl $395d0b	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.395e29		b0 03		bcs $395e2e	                    BCS parse_boot                          ; If ok: start parsing the boot record
.395e2b		82 d3 00	brl $395f01	                    BRL pass_failure                        ; Pass the error up the chain
.395e2e						parse_boot
.395e2e		e2 20		sep #$20	                SEP #$20        ; set A short
.395e30		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.395e32		8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.395e36		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.395e38		8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.395e3c		e2 20		sep #$20	                SEP #$20        ; set A short
.395e3e		af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.395e42		8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.395e46		c2 20		rep #$20	                REP #$20        ; set A long
.395e48		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.395e4b		8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.395e4f		8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.395e53		af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.395e57		8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.395e5b		a9 00 00	lda #$0000	                    LDA #0
.395e5e		8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.395e62		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.395e65		8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.395e69		18		clc		                    CLC
.395e6a		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.395e6e		8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.395e72		a9 00 00	lda #$0000	                    LDA #0
.395e75		8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.395e79		8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.395e7d		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.395e7e		af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.395e82		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.395e86		8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.395e8a		a9 00 00	lda #$0000	                    LDA #0
.395e8d		8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.395e91		af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.395e95		8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.395e99		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.395e9a		4a		lsr a		                    LSR A
.395e9b		4a		lsr a		                    LSR A
.395e9c		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.395e9d		18		clc		                    CLC
.395e9e		6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.395ea2		8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.395ea6		a9 00 00	lda #$0000	                    LDA #0
.395ea9		8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.395ead		af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.395eb1		8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.395eb5		a9 00 00	lda #$0000	                    LDA #0
.395eb8		8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.395ebc		af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.395ec0		8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.395ec4		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.395ec7		8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.395ecb		e2 20		sep #$20	                SEP #$20        ; set A short
.395ecd		af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.395ed1		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.395ed3		80 14		bra $395ee9	                    BRA no_volume_id                        ; No: there is no volume ID
.395ed5						is_extended
.395ed5		c2 20		rep #$20	                REP #$20        ; set A long
.395ed7		af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.395edb		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.395edf		af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.395ee3		8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.395ee7		80 0d		bra $395ef6	                    BRA ret_success
.395ee9						no_volume_id
.395ee9		c2 20		rep #$20	                REP #$20        ; set A long
.395eeb		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.395eee		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.395ef2		8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.395ef6						ret_success
.395ef6		e2 20		sep #$20	                SEP #$20        ; set A short
.395ef8		a9 00		lda #$00	                    LDA #0
.395efa		85 20		sta $0320	                    STA BIOS_STATUS
.395efc		28		plp		                    PLP
.395efd		2b		pld		                    PLD
.395efe		ab		plb		                    PLB
.395eff		38		sec		                    SEC
.395f00		6b		rtl		                    RTL
.395f01		28		plp		pass_failure        PLP
.395f02		2b		pld		                    PLD
.395f03		ab		plb		                    PLB
.395f04		18		clc		                    CLC
.395f05		6b		rtl		                    RTL
.395f06						FDC_CMDBLOCK
.395f06		8b		phb		                    PHB
.395f07		0b		phd		                    PHD
.395f08		08		php		                    PHP
.395f09		48		pha		                PHA             ; begin setdbr macro
.395f0a		08		php		                PHP
.395f0b		e2 20		sep #$20	                SEP #$20        ; set A short
.395f0d		a9 00		lda #$00	                LDA #0
.395f0f		48		pha		                PHA
.395f10		ab		plb		                PLB
.395f11		28		plp		                PLP
.395f12		68		pla		                PLA             ; end setdbr macro
.395f13		48		pha		                PHA             ; begin setdp macro
.395f14		08		php		                PHP
.395f15		c2 20		rep #$20	                REP #$20        ; set A long
.395f17		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f1a		5b		tcd		                TCD
.395f1b		28		plp		                PLP
.395f1c		68		pla		                PLA             ; end setdp macro
.395f1d		e2 30		sep #$30	                SEP #$30        ; set A&X short
.395f1f		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.395f21		f0 0f		beq $395f32	                    BEQ motor_on
.395f23		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.395f25		f0 11		beq $395f38	                    BEQ motor_off
.395f27		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.395f29		f0 13		beq $395f3e	                    BEQ recalibrate
.395f2b		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.395f2d		28		plp		                    PLP
.395f2e		2b		pld		                    PLD
.395f2f		ab		plb		                    PLB
.395f30		38		sec		                    SEC
.395f31		6b		rtl		                    RTL
.395f32		22 93 59 39	jsl $395993	motor_on            JSL FDC_Motor_On
.395f36		80 f3		bra $395f2b	                    BRA ret_success
.395f38		22 c7 59 39	jsl $3959c7	motor_off           JSL FDC_Motor_Off
.395f3c		80 ed		bra $395f2b	                    BRA ret_success
.395f3e		22 f2 59 39	jsl $3959f2	recalibrate         JSL FDC_Recalibrate_Command
.395f42		b0 e7		bcs $395f2b	                    BCS ret_success
.395f44		28		plp		pass_failure        PLP
.395f45		2b		pld		                    PLD
.395f46		ab		plb		                    PLB
.395f47		18		clc		                    CLC
.395f48		6b		rtl		                    RTL
.395f49						FDC_TIME_HANDLE
.395f49		08		php		                    PHP
.395f4a		e2 20		sep #$20	                SEP #$20        ; set A short
.395f4c		af 4e a0 38	lda $38a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.395f50		d0 06		bne $395f58	                    BNE dec_motor                   ; If not zero: decrement the timer
.395f52		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.395f56		f0 28		beq $395f80	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.395f58		af 4e a0 38	lda $38a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.395f5c		3a		dec a		                    DEC A
.395f5d		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.395f61		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.395f63		d0 0b		bne $395f70	                    BNE chk_motor_end               ; No: check to see if we're a the end
.395f65		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.395f69		3a		dec a		                    DEC A
.395f6a		8f 4f a0 38	sta $38a04f	                    STA @l FDC_MOTOR_TIMER+1
.395f6e		80 10		bra $395f80	                    BRA sof_timeout                 ; And move on to the next timer
.395f70		af 4e a0 38	lda $38a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.395f74		d0 0a		bne $395f80	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.395f76		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1
.395f7a		d0 04		bne $395f80	                    BNE sof_timeout
.395f7c		22 c7 59 39	jsl $3959c7	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.395f80						sof_timeout
.395f80		e2 20		sep #$20	                SEP #$20        ; set A short
.395f82		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.395f86		f0 11		beq $395f99	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.395f88		3a		dec a		                    DEC A                           ; Count down one tick
.395f89		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.395f8d		d0 0a		bne $395f99	                    BNE sof_int_done                ; If not 0, we're done
.395f8f		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.395f93		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.395f95		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.395f99		28		plp		sof_int_done        PLP
.395f9a		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.395f9b						FDC_VBR_BEGIN
>395f9b		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>395f9e		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>395fa6		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>395fa8		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>395fa9		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>395fab		02				num_fat             .byte 2                 ; Number of FATs
>395fac		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>395fae		40 0b				total_sectors       .word 2880              ; Total sectors
>395fb0		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>395fb1		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>395fb3		12 00				sec_per_track       .word 18                ; Sectors per track
>395fb5		02 00				num_head            .word 2                 ; Number of heads
>395fb7		00 00 00 00			ignore2             .dword 0
>395fbb		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>395fbf		00 00				ignore3             .word 0
>395fc1		29				boot_signature      .byte $29
>395fc2		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>395fc6		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>395fce		20 20 20
>395fd1		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.395fd9		80 40		bra $39601b	                    BRA vbr_start
>395fdb						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.39601b						vbr_start
.39601b		c2 20		rep #$20	                REP #$20        ; set A long
.39601d		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396020		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.396024		a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396027		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.39602b		22 24 11 00	jsl $001124	                    JSL F_RUN               ; And try to execute the binary file
.39602f		b0 0c		bcs $39603d	                    BCS lock                ; If it returned success... lock up... I guess?
.396031						error
.396031		e2 20		sep #$20	                SEP #$20        ; set A short
.396033		4b		phk		                    PHK                     ; Otherwise, print an error message
.396034		ab		plb		                    PLB
.396035		62 08 00	per $396040	                    PER message
.396038		fa		plx		                    PLX
.396039		22 1c 10 00	jsl $00101c	                    JSL PUTS
.39603d		ea		nop		lock                NOP                     ; And lock up
.39603e		80 fd		bra $39603d	                    BRA lock
>396040		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>396048		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>396058		65 20 62 69 6e 61 72 79 2e 0d 00
.396063						FDC_VBR_END

;******  Return to file: src/kernel.asm


;******  Processing file: src/Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.396063						IDE_INIT
.396063		e2 20		sep #$20	                SEP #$20        ; set A short
.396065		a9 00		lda #$00	              LDA #$00
.396067		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.39606b		20 8c 60	jsr $39608c	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.39606e		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.396070		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.396074		a9 01		lda #$01	              LDA #$01
.396076		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.39607a		a9 00		lda #$00	              LDA #$00
.39607c		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.396080		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396084		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.396088		20 9b 60	jsr $39609b	              JSR IDE_DRV_READY_NOTBUSY
.39608b		6b		rtl		              RTL
.39608c						IDE_DRIVE_BSY
.39608c		08		php		                PHP
.39608d		e2 20		sep #$20	                SEP #$20        ; set A short
.39608f		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396093		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396095		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.396097		f0 f6		beq $39608f	                BEQ loop
.396099		28		plp		                PLP
.39609a		60		rts		                RTS
.39609b						IDE_DRV_READY_NOTBUSY
.39609b		08		php		                PHP
.39609c		e2 20		sep #$20	                SEP #$20        ; set A short
.39609e		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.3960a2		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.3960a4		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.3960a6		d0 f6		bne $39609e	                BNE loop                            ; No: keep waiting
.3960a8		28		plp		ret_success     PLP                                 ; Return success
.3960a9		38		sec		                SEC
.3960aa		60		rts		                RTS
.3960ab		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.3960af		28		plp		                PLP                                 ; Return failure
.3960b0		18		clc		                CLC
.3960b1		60		rts		                RTS
.3960b2						IDE_GETBLOCK
.3960b2		5a		phy		                PHY
.3960b3		8b		phb		                PHB
.3960b4		0b		phd		                PHD
.3960b5		08		php		                PHP
.3960b6		48		pha		                PHA             ; begin setdbr macro
.3960b7		08		php		                PHP
.3960b8		e2 20		sep #$20	                SEP #$20        ; set A short
.3960ba		a9 00		lda #$00	                LDA #0
.3960bc		48		pha		                PHA
.3960bd		ab		plb		                PLB
.3960be		28		plp		                PLP
.3960bf		68		pla		                PLA             ; end setdbr macro
.3960c0		48		pha		                PHA             ; begin setdp macro
.3960c1		08		php		                PHP
.3960c2		c2 20		rep #$20	                REP #$20        ; set A long
.3960c4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3960c7		5b		tcd		                TCD
.3960c8		28		plp		                PLP
.3960c9		68		pla		                PLA             ; end setdp macro
.3960ca		e2 20		sep #$20	                SEP #$20        ; set A short
.3960cc		20 9b 60	jsr $39609b	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.3960cf		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.3960d1		29 07		and #$07	                AND #$07
.3960d3		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.3960d5		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.3960d9		20 9b 60	jsr $39609b	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.3960dc		e2 20		sep #$20	                SEP #$20        ; set A short
.3960de		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.3960e0		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.3960e4		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.3960e6		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.3960ea		a5 03		lda $0323	                LDA BIOS_LBA+1
.3960ec		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.3960f0		a5 04		lda $0324	                LDA BIOS_LBA+2
.3960f2		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.3960f6		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.3960f8		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.3960fc		ea		nop		                NOP                             ; Wait about 500ns
.3960fd		ea		nop		                NOP
.3960fe		ea		nop		                NOP
.3960ff		ea		nop		                NOP
.396100		20 9b 60	jsr $39609b	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396103		90 2a		bcc $39612f	                BCC ret_failure                 ; If an error occurred, return it
.396105		e2 20		sep #$20	                SEP #$20        ; set A short
.396107		af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.39610b		a0 00		ldy #$00	                LDY #0
.39610d		c2 20		rep #$20	                REP #$20        ; set A long
.39610f		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396113		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396115		c8		iny		                INY                             ; Move to the next position
.396116		c8		iny		                INY
.396117		c0 00 02	cpy #$0200	                CPY #512
.39611a		d0 f3		bne $39610f	                BNE read_loop
.39611c		ea		nop		                NOP                             ; Wait about 500ns
.39611d		ea		nop		                NOP
.39611e		ea		nop		                NOP
.39611f		ea		nop		                NOP
.396120						ret_success
.396120		e2 20		sep #$20	                SEP #$20        ; set A short
.396122		a9 00		lda #$00	                LDA #0
.396124		85 00		sta $0320	                STA BIOS_STATUS
.396126		8d 06 03	sta $0306	                STA @w FDC_ST0
.396129		28		plp		                PLP                             ; Return success
.39612a		2b		pld		                PLD
.39612b		ab		plb		                PLB
.39612c		7a		ply		                PLY
.39612d		38		sec		                SEC
.39612e		6b		rtl		                RTL
.39612f						ret_failure
.39612f		e2 20		sep #$20	                SEP #$20        ; set A short
.396131		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396135		8d 06 03	sta $0306	                STA @w FDC_ST0
.396138		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.39613a		85 00		sta $0320	                STA BIOS_STATUS
.39613c		28		plp		                PLP
.39613d		2b		pld		                PLD
.39613e		ab		plb		                PLB
.39613f		7a		ply		                PLY
.396140		18		clc		                CLC
.396141		6b		rtl		                RTL
.396142						IDE_PUTBLOCK
.396142		5a		phy		                PHY
.396143		8b		phb		                PHB
.396144		0b		phd		                PHD
.396145		08		php		                PHP
.396146		48		pha		                PHA             ; begin setdbr macro
.396147		08		php		                PHP
.396148		e2 20		sep #$20	                SEP #$20        ; set A short
.39614a		a9 00		lda #$00	                LDA #0
.39614c		48		pha		                PHA
.39614d		ab		plb		                PLB
.39614e		28		plp		                PLP
.39614f		68		pla		                PLA             ; end setdbr macro
.396150		48		pha		                PHA             ; begin setdp macro
.396151		08		php		                PHP
.396152		c2 20		rep #$20	                REP #$20        ; set A long
.396154		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396157		5b		tcd		                TCD
.396158		28		plp		                PLP
.396159		68		pla		                PLA             ; end setdp macro
.39615a		e2 20		sep #$20	                SEP #$20        ; set A short
.39615c		20 9b 60	jsr $39609b	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.39615f		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396161		29 07		and #$07	                AND #$07
.396163		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396165		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396169		20 9b 60	jsr $39609b	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.39616c		e2 20		sep #$20	                SEP #$20        ; set A short
.39616e		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396170		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396174		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396176		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.39617a		a5 03		lda $0323	                LDA BIOS_LBA+1
.39617c		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396180		a5 04		lda $0324	                LDA BIOS_LBA+2
.396182		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396186		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396188		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.39618c		ea		nop		                NOP                             ; Wait about 500ns
.39618d		ea		nop		                NOP
.39618e		ea		nop		                NOP
.39618f		ea		nop		                NOP
.396190		20 9b 60	jsr $39609b	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396193		90 37		bcc $3961cc	                BCC ret_failure                 ; If an error occurred, return it
.396195		c2 30		rep #$30	                REP #$30        ; set A&X long
.396197		a0 00 00	ldy #$0000	                LDY #0
.39619a		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.39619c		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.3961a0		c8		iny		                INY                             ; Move to the next position
.3961a1		c8		iny		                INY
.3961a2		c0 00 02	cpy #$0200	                CPY #512
.3961a5		d0 f3		bne $39619a	                BNE read_loop
.3961a7		ea		nop		                NOP                             ; Wait about 500ns
.3961a8		ea		nop		                NOP
.3961a9		ea		nop		                NOP
.3961aa		ea		nop		                NOP
.3961ab		20 9b 60	jsr $39609b	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.3961ae		90 1c		bcc $3961cc	                BCC ret_failure                 ; If an error occurred, return it
.3961b0		ea		nop		                NOP                             ; Wait about 500ns
.3961b1		ea		nop		                NOP
.3961b2		ea		nop		                NOP
.3961b3		ea		nop		                NOP
.3961b4		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.3961b8		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.3961bb		d0 0f		bne $3961cc	                BNE ret_failure                 ; If error: return failure
.3961bd						ret_success
.3961bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3961bf		a9 00		lda #$00	                LDA #0
.3961c1		85 00		sta $0320	                STA BIOS_STATUS
.3961c3		8d 06 03	sta $0306	                STA @w FDC_ST0
.3961c6		28		plp		                PLP                             ; Return success
.3961c7		2b		pld		                PLD
.3961c8		ab		plb		                PLB
.3961c9		7a		ply		                PLY
.3961ca		38		sec		                SEC
.3961cb		6b		rtl		                RTL
.3961cc		ea		nop		ret_failure     NOP                             ; Wait about 500ns
.3961cd		ea		nop		                NOP
.3961ce		ea		nop		                NOP
.3961cf		ea		nop		                NOP
.3961d0		e2 20		sep #$20	                SEP #$20        ; set A short
.3961d2		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.3961d6		80 08		bra $3961e0	                BRA save_error
.3961d8		ea		nop		                NOP
.3961d9		ea		nop		                NOP
.3961da		ea		nop		                NOP
.3961db		ea		nop		                NOP
.3961dc		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.3961e0		8d 06 03	sta $0306	save_error      STA @w FDC_ST0
.3961e3		a9 83		lda #$83	                LDA #BIOS_ERR_WRITE
.3961e5		85 00		sta $0320	                STA BIOS_STATUS
.3961e7		28		plp		                PLP
.3961e8		2b		pld		                PLD
.3961e9		ab		plb		                PLB
.3961ea		7a		ply		                PLY
.3961eb		18		clc		                CLC
.3961ec		6b		rtl		                RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/Libraries/Ethernet_Init_library.asm

.3961ed						SIMPLE_INIT_ETHERNET_CTRL
.3961ed						WaitforittobeReady:
.3961ed		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.3961f1		29 01 00	and #$0001	                AND #$0001
.3961f4		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.3961f7		d0 f4		bne $3961ed	                BNE WaitforittobeReady
.3961f9		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.3961fd		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.396201		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.396205		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.396209		a9 00 00	lda #$0000	                LDA #$0000
.39620c		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.396210		a9 00 70	lda #$7000	                LDA #$7000
.396213		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.396217		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.39621a		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.39621e		a9 0b 00	lda #$000b	                LDA #$000B
.396221		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.396225		a9 00 00	lda #$0000	                LDA #$0000
.396228		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.39622c		20 60 62	jsr $396260	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.39622f		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.396232		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.396236		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.396239		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.39623d		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.396240		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.396244		20 60 62	jsr $396260	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396247		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.39624a		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.39624e		a9 0c 00	lda #$000c	                LDA #$000C
.396251		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.396255		a9 04 00	lda #$0004	                LDA #$0004
.396258		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.39625c		20 60 62	jsr $396260	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.39625f		6b		rtl		                RTL
.396260						MAC_ACCESS_WAIT_FOR_COMPLETION
.396260		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.396263		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.396267						WaitForCompletion:
.396267		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.39626b		29 00 80	and #$8000	                AND #$8000
.39626e		c9 00 80	cmp #$8000	                CMP #$8000
.396271		f0 f4		beq $396267	                BEQ WaitForCompletion
.396273		60		rts		                RTS

;******  Return to file: src/kernel.asm


;******  Processing file: src/Libraries/EXP-C200_EVID_Library.asm

=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.396274						INIT_EVID_VID_MODE
.396274		e2 20		sep #$20	                SEP #$20        ; set A short
.396276		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable     ; 0 - 80x60, 1- 100x75
.396278		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.39627c		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable    ; Enable the Border
.39627e		8f 04 1e ae	sta $ae1e04	                STA @l EVID_BORDER_CTRL_REG
.396282		a9 08		lda #$08	                LDA #8                          ; Set the border to the standard 8 pixels
.396284		8f 08 1e ae	sta $ae1e08	                STA @l EVID_BORDER_X_SIZE       ; Let's use maximum space
.396288		8f 09 1e ae	sta $ae1e09	                STA @l EVID_BORDER_Y_SIZE
.39628c		a9 20		lda #$20	                LDA #$20
.39628e		8f 07 1e ae	sta $ae1e07	                STA @l EVID_BORDER_COLOR_R      ; R
.396292		a9 00		lda #$00	                LDA #$00
.396294		8f 06 1e ae	sta $ae1e06	                STA @l EVID_BORDER_COLOR_G      ; G
.396298		a9 20		lda #$20	                LDA #$20
.39629a		8f 05 1e ae	sta $ae1e05	                STA @l EVID_BORDER_COLOR_B      ; B
.39629e		22 a0 63 39	jsl $3963a0	                JSL INIT_EVID_LUT
.3962a2		22 89 63 39	jsl $396389	                JSL INIT_EVID_FONTSET
.3962a6		22 c4 63 39	jsl $3963c4	                JSL INIT_EVID_CURSOR
.3962aa		c2 30		rep #$30	                REP #$30        ; set A&X long
.3962ac		a9 62 00	lda #$0062	                LDA #(100-2)
.3962af		8f 63 00 00	sta $000063	                STA @l EVID_COLS_VISIBLE
.3962b3		a9 49 00	lda #$0049	                LDA #(75-2)
.3962b6		8f 67 00 00	sta $000067	                STA @l EVID_LINES_VISIBLE
.3962ba		a9 64 00	lda #$0064	                LDA #100
.3962bd		8f 65 00 00	sta $000065	                STA @l EVID_COLS_PER_LINE
.3962c1		a9 4b 00	lda #$004b	                LDA #75
.3962c4		8f 69 00 00	sta $000069	                STA @l EVID_LINES_MAX
.3962c8		a9 70 00	lda #$0070	                LDA #$70                        ; Set the default text color to light gray on dark gray
.3962cb		8f 72 00 00	sta $000072	                STA @l EVID_CURCOLOR
.3962cf		c2 30		rep #$30	                REP #$30        ; set A&X long
.3962d1		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM            ; store the initial screen buffer location
.3962d4		8f 60 00 00	sta $000060	                STA @l EVID_SCREENBEGIN
.3962d8		8f 6b 00 00	sta $00006b	                STA @l EVID_CURSORPOS
.3962dc		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM           ; Set the initial COLOR cursor position
.3962df		8d 76 00	sta $0076	                STA EVID_COLORPOS
.3962e2		e2 20		sep #$20	                SEP #$20        ; set A short
.3962e4		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.3962e6		8f 62 00 00	sta $000062	                STA @l EVID_SCREENBEGIN + 2
.3962ea		8f 6d 00 00	sta $00006d	                STA @l EVID_CURSORPOS+2
.3962ee		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM            ; Set the initial COLOR cursor position
.3962f0		8f 78 00 00	sta $000078	                STA @l EVID_COLORPOS + 2
.3962f4		6b		rtl		                RTL
>3962f5		1b 5b 31 6d 1b 5b 33 31		EVID_DEV_RDY0   .text $1B, "[1m", $1B, "[31m", $0B, $0C, $1B, "[35m", $0B, $0C, $1B, "[33m", $0B, $0C, $1B
>3962fd		6d 0b 0c 1b 5b 33 35 6d 0b 0c 1b 5b 33 33 6d 0b
>39630d		0c 1b
>39630f		5b 33 32 6d 0b 0c 1b 5b		                .null "[32m", $0B, $0C, $1B, "[34m", $0B, $0C, $1B, "[0m", $20, "C256 Foenix EXP-C200-EVID", $0D
>396317		33 34 6d 0b 0c 1b 5b 30 6d 20 43 32 35 36 20 46
>396327		6f 65 6e 69 78 20 45 58 50 2d 43 32 30 30 2d 45
>396337		56 49 44 0d 00
>39633c		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1   .null "Your Device is Ready..."
>396344		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
.396354						EVID_GREET
.396354		48		pha		                PHA
.396355		da		phx		                PHX
.396356		08		php		                PHP
.396357		e2 20		sep #$20	                SEP #$20        ; set A short
.396359		af 7d 00 00	lda $00007d	                LDA @l EVID_PRESENT             ; Check if the EVID screen is present
.39635d		f0 26		beq $396385	                BEQ done                        ; If not, skip this routine
.39635f		a9 04		lda #$04	                LDA #CHAN_EVID                  ; Switch to the EVID screen
.396361		22 3c 10 00	jsl $00103c	                JSL SETOUT
.396365		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN                   ; Clear the screen
.396369		c2 10		rep #$10	                REP #$10        ; set X long
.39636b		8b		phb		                PHB                             ; Print the messages
.39636c		a9 39		lda #$39	                LDA #`EVID_DEV_RDY0
.39636e		48		pha		                PHA
.39636f		ab		plb		                PLB
.396370		a2 f5 62	ldx #$62f5	                LDX #<>EVID_DEV_RDY0
.396373		22 95 07 39	jsl $390795	                JSL IPRINT
.396377		a2 3c 63	ldx #$633c	                LDX #<>EVID_DEV_RDY1
.39637a		22 95 07 39	jsl $390795	                JSL IPRINT
.39637e		ab		plb		                PLB
.39637f		a9 00		lda #$00	                LDA #CHAN_CONSOLE               ; Go back to the main console
.396381		22 3c 10 00	jsl $00103c	                JSL SETOUT
.396385		28		plp		done            PLP
.396386		fa		plx		                PLX
.396387		68		pla		                PLA
.396388		6b		rtl		                RTL
.396389						INIT_EVID_FONTSET
.396389		e2 20		sep #$20	                SEP #$20        ; set A short
.39638b		c2 10		rep #$10	                REP #$10        ; set X long
.39638d		a2 00 00	ldx #$0000	                LDX #$0000
.396390						initFontsetbranch0
.396390		bf 00 00 3f	lda $3f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.396394		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X   ; Vicky FONT RAM Bank
.396398		e8		inx		                INX
.396399		e0 00 08	cpx #$0800	                CPX #$0800
.39639c		d0 f2		bne $396390	                BNE initFontsetbranch0
.39639e		ea		nop		                NOP
.39639f		6b		rtl		                RTL
.3963a0						INIT_EVID_LUT
.3963a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3963a2		e2 10		sep #$10	                SEP #$10        ; set X short
.3963a4		a2 00		ldx #$00	                LDX	#$00
.3963a6		bf 18 7b 39	lda $397b18,x	lutinitloop0	LDA @lfg_color_lut,x    ; get Local Data c64_character_Color_LUT_4_Txt
.3963aa		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	    ; Write in LUT Memory
.3963ae		e8		inx		                inx
.3963af		e0 40		cpx #$40	                cpx #$40
.3963b1		d0 f3		bne $3963a6	                bne lutinitloop0
.3963b3		a2 00		ldx #$00	                LDX	#$00
.3963b5		bf 58 7b 39	lda $397b58,x	lutinitloop1	LDA @lbg_color_lut,x    ; get Local Data
.3963b9		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	    ; Write in LUT Memory
.3963bd		e8		inx		                INX
.3963be		e0 40		cpx #$40	                CPX #$40
.3963c0		d0 f3		bne $3963b5	                bne lutinitloop1
.3963c2		ea		nop		                NOP
.3963c3		6b		rtl		                RTL
.3963c4						INIT_EVID_CURSOR
.3963c4		08		php		                PHP
.3963c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3963c7		a9 b1		lda #$b1	                LDA #$B1                                            ; The Cursor Character will be a Fully Filled Block
.3963c9		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.3963cd		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0) ; Set Cursor Enable And Flash Rate @1Hz
.3963cf		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG
.3963d3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3963d5		a9 00 00	lda #$0000	                LDA #$0000;
.3963d8		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L   ; Set the X to Position 1
.3963dc		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L   ; Set the Y to Position 6 (Below)
.3963e0		28		plp		                PLP
.3963e1		6b		rtl		                RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/drivers/ansi_screens.asm

.0000						S_ANSI_VARS
>0000						SCREENBEGIN         .long ?     ; Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>0003						COLS_VISIBLE        .word ?     ; Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0005						COLS_PER_LINE       .word ?     ; Columns in memory per screen line. A virtual line can be this long. Default=128
>0007						LINES_VISIBLE       .word ?     ; The number of rows visible on the screen. Default=25
>0009						LINES_MAX           .word ?     ; The number of rows in memory for the screen. Default=64
>000b						CURSORPOS           .long ?     ; The next character written to the screen will be written in this location.
>000e						CURSORX             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0010						CURSORY             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0012						CURCOLOR            .byte ?     ; Color of next character to be printed to the screen.
>0013						COLORPOS            .long ?     ; Address of cursor's position in the color matrix
>0016						COLORBEGIN          .long ?     ; Address of the first byte of the color matrix for this screen
>0019						TMPPTR1             .dword ?    ; Temporary pointer
>001d						PRESENT             .byte ?     ; Screen is present on the machine (EVID only)
>001e						STATE               .byte ?     ; State of the escape code parser
>001f						CONTROL             .byte ?     ; Control bit
>0020						ARGC                .byte ?     ; The number of arguments provided by the escape sequence (max 2)
>0021						ARG0                .byte ?     ; First ANSI code argument
>0022						ARG1                .byte ?     ; Second ANSI code argument
=0						ST_INIT = 0             ; Starting state for the ANSI code parser. Most characters just print
=1						ST_ESCAPE = 1           ; ESC has been seen
=2						ST_CSI = 2              ; Full CSI has been seen "ESC ["
=2						ANSI_MAX_ARG = 2        ; We'll limit ourselves to two arguments
=$70						ANSI_DEF_COLOR = $70    ; Default color (dim white on dim black)
=$80						CONTROL_INVERT = $80    ; Control bit: Colors are inverted
=$40						CONTROL_BOLD = $40      ; Control bit: Colors should be intense
.3963e2						ANSI_INIT
.3963e2		da		phx		                    PHX
.3963e3		5a		phy		                    PHY
.3963e4		8b		phb		                    PHB
.3963e5		0b		phd		                    PHD
.3963e6		08		php		                    PHP
.3963e7		c2 30		rep #$30	                REP #$30        ; set A&X long
.3963e9		a0 00 00	ldy #$0000	                    LDY #0
.3963ec		22 98 64 39	jsl $396498	                    JSL INIT_SCREEN_Y               ; Set up the main screen
.3963f0		e2 20		sep #$20	                SEP #$20        ; set A short
.3963f2		af 87 e8 af	lda $afe887	                    LDA @l GABE_SYS_STAT            ; Let's check the Presence of an Expansion Card here
.3963f6		29 10		and #$10	                    AND #GABE_SYS_STAT_EXP          ; When there is a Card the Value is 1
.3963f8		c9 10		cmp #$10	                    CMP #GABE_SYS_STAT_EXP
.3963fa		d0 1d		bne $396419	                    BNE no_evid
.3963fc		c2 20		rep #$20	                REP #$20        ; set A long
.3963fe		af 12 00 ae	lda $ae0012	                    LDA @l ESID_ID_CARD_ID_Lo       ; Load the Card ID and check for C100 or C200
.396402		c9 c8 00	cmp #$00c8	                    CMP #$00C8                      ; Is it the EVID card?
.396405		d0 12		bne $396419	                    BNE no_evid                     ; No: mark the EVID screen as not present
.396407		e2 20		sep #$20	                SEP #$20        ; set A short
.396409		a9 01		lda #$01	                    LDA #1                          ; Otherwise: Mark that there is an EVID present
.39640b		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.39640f		a0 01 00	ldy #$0001	                    LDY #1
.396412		22 98 64 39	jsl $396498	                    JSL INIT_SCREEN_Y               ; Initialize the EVID screen variables
.396416		80 09		bra $396421	                    BRA done
.396418		00		brk #		                    BRK
.396419						no_evid
.396419		e2 20		sep #$20	                SEP #$20        ; set A short
.39641b		a9 00		lda #$00	                    LDA #0                          ; Mark that there is no EVID present
.39641d		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.396421		28		plp		done                PLP
.396422		2b		pld		                    PLD
.396423		ab		plb		                    PLB
.396424		7a		ply		                    PLY
.396425		fa		plx		                    PLX
.396426		6b		rtl		                    RTL
.396427						ANSI_INIT_LUTS
.396427		08		php		                    PHP
.396428		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39642a		a2 00		ldx #$00	                    LDX #0
.39642c		bf 58 64 39	lda $396458,x	vicky_loop          LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.396430		9f 40 1f af	sta $af1f40,x	                    STA @l FG_CHAR_LUT_PTR,X        ; Set the corresponding foreground color component on Vicky
.396434		9f 80 1f af	sta $af1f80,x	                    STA @l BG_CHAR_LUT_PTR,X        ; Set the corresponding background color component on Vicky
.396438		e8		inx		                    INX
.396439		e0 40		cpx #$40	                    CPX #4*16
.39643b		d0 ef		bne $39642c	                    BNE vicky_loop
.39643d		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Check to see if EVID is present
.396441		f0 13		beq $396456	                    BEQ done                        ; If not, we're done
.396443		a2 00		ldx #$00	                    LDX #0
.396445		bf 58 64 39	lda $396458,x	evid_loop           LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.396449		9f 00 1b ae	sta $ae1b00,x	                    STA @l EVID_FG_LUT,X            ; Set the corresponding foreground color component on the EVID card
.39644d		9f 40 1b ae	sta $ae1b40,x	                    STA @l EVID_BG_LUT,X            ; Set the corresponding background color component on the EVID card
.396451		e8		inx		                    INX
.396452		e0 40		cpx #$40	                    CPX #4*16
.396454		d0 ef		bne $396445	                    BNE evid_loop
.396456		28		plp		done                PLP
.396457		6b		rtl		                    RTL
.396458						ANSI_TEXT_LUT
>396458		00 00 00 00			                    .byte 0, 0, 0, 0
>39645c		00 00 80 00			                    .byte 0, 0, 128, 0
>396460		00 80 00 00			                    .byte 0, 128, 0, 0
>396464		00 80 80 00			                    .byte 0, 128, 128, 0
>396468		80 00 00 00			                    .byte 128, 0, 0, 0
>39646c		80 00 80 00			                    .byte 128, 0, 128, 0
>396470		80 80 00 00			                    .byte 128, 128, 0, 0
>396474		c0 c0 c0 00			                    .byte 192, 192, 192, 0
>396478		80 80 80 00			                    .byte 128, 128, 128, 0
>39647c		00 00 ff 00			                    .byte 0, 0, 255, 0
>396480		00 ff 00 00			                    .byte 0, 255, 0, 0
>396484		00 ff ff 00			                    .byte 0, 255, 255, 0
>396488		ff 00 00 00			                    .byte 255, 0, 0, 0
>39648c		00 7f fc 00			                    .byte 0, 127, 252, 0
>396490		ff ff 00 00			                    .byte 255, 255, 0, 0
>396494		ff ff ff 00			                    .byte 255, 255, 255, 0
.396498						INIT_SCREEN_Y
.396498		c2 30		rep #$30	                REP #$30        ; set A&X long
.39649a		c0 00 00	cpy #$0000	                    CPY #0
.39649d		f0 06		beq $3964a5	                    BEQ setdp_0
.39649f		a9 60 00	lda #$0060	setdp_1             LDA #<>EVID_SCREENBEGIN         ; Set DP to the EVID variable block
.3964a2		5b		tcd		                    TCD
.3964a3		80 04		bra $3964a9	                    BRA set_addresses
.3964a5		a9 0c 00	lda #$000c	setdp_0             LDA #<>SCREENBEGIN              ; Set DP to the main screen variable block
.3964a8		5b		tcd		                    TCD
.3964a9		98		tya		set_addresses       TYA                             ; Compute offset to screen Y's addresses
.3964aa		0a		asl a		                    ASL A
.3964ab		0a		asl a		                    ASL A
.3964ac		aa		tax		                    TAX
.3964ad		bf e8 64 39	lda $3964e8,x	                    LDA @l text_address,X
.3964b1		85 00		sta $0320	                    STA #S_ANSI_VARS.SCREENBEGIN,D  ; Set the address of the text matrix
.3964b3		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D    ; And the cursor pointer
.3964b5		e2 20		sep #$20	                SEP #$20        ; set A short
.3964b7		bf ea 64 39	lda $3964ea,x	                    LDA @l text_address+2,X
.3964bb		85 02		sta $0322	                    STA #S_ANSI_VARS.SCREENBEGIN+2,D
.3964bd		85 0d		sta $032d	                    STA #S_ANSI_VARS.CURSORPOS+2,D
.3964bf		c2 20		rep #$20	                REP #$20        ; set A long
.3964c1		bf f0 64 39	lda $3964f0,x	                    LDA @l color_address,X
.3964c5		85 16		sta $0336	                    STA #S_ANSI_VARS.COLORBEGIN,D   ; Set the address of the color matrix
.3964c7		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D     ; And the color cursor pointer
.3964c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3964cb		bf f2 64 39	lda $3964f2,x	                    LDA @l color_address+2,X
.3964cf		85 18		sta $0338	                    STA #S_ANSI_VARS.COLORBEGIN+2,D
.3964d1		85 15		sta $0335	                    STA #S_ANSI_VARS.COLORPOS+2,D
.3964d3		c2 20		rep #$20	                REP #$20        ; set A long
.3964d5		64 0e		stz $032e	                    STZ #S_ANSI_VARS.CURSORX,D      ; Set the cursor position to 0, 0
.3964d7		64 10		stz $0330	                    STZ #S_ANSI_VARS.CURSORY,D
.3964d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3964db		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D        ; Set the state of the ANSI parser to S0
.3964dd		64 1f		stz $033f	                    STZ #S_ANSI_VARS.CONTROL,D      ; Set the control bits to 0 (default)
.3964df		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.3964e1		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D     ; Set the current color to the default
.3964e3		22 31 65 39	jsl $396531	                    JSL ANSI_SETSIZE_Y              ; Set the size variables for the main screen
.3964e7		6b		rtl		                    RTL
>3964e8		00 a0 af 00 00 20 ae 00		text_address        .dword CS_TEXT_MEM_PTR, EVID_TEXT_MEM
>3964f0		00 c0 af 00 00 40 ae 00		color_address       .dword CS_COLOR_MEM_PTR, EVID_COLOR_MEM
.3964f8						ANSI_SETSIZES
.3964f8		48		pha		                    PHA
.3964f9		da		phx		                    PHX
.3964fa		5a		phy		                    PHY
.3964fb		0b		phd		                    PHD
.3964fc		08		php		                    PHP
.3964fd		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3964ff		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Save the current output channel
.396503		48		pha		                    PHA
.396504		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; Set the sizes for the main screen
.396506		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.39650a		22 f4 65 39	jsl $3965f4	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.39650e		a0 00		ldy #$00	                    LDY #0
.396510		22 31 65 39	jsl $396531	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.396514		a9 04		lda #$04	                    LDA #CHAN_EVID                  ; Set the sizes for the EVID screen
.396516		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.39651a		22 f4 65 39	jsl $3965f4	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.39651e		b0 06		bcs $396526	                    BCS done                        ; Not present, just return
.396520		a0 01		ldy #$01	                    LDY #1
.396522		22 31 65 39	jsl $396531	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.396526		68		pla		done                PLA
.396527		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT                 ; Restore the output channel
.39652b		28		plp		                    PLP
.39652c		2b		pld		                    PLD
.39652d		7a		ply		                    PLY
.39652e		fa		plx		                    PLX
.39652f		68		pla		                    PLA
.396530		6b		rtl		                    RTL
.396531						ANSI_SETSIZE_Y
.396531		08		php		                    PHP
.396532		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396534		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.396536		f0 06		beq $39653e	                    BEQ vky_master                      ; Yes: get the resolution from Vicky
.396538		af 01 1e ae	lda $ae1e01	                    LDA @l EVID_MSTR_CTRL_REG_H         ; No: get the resolution from EVID
.39653c		80 04		bra $396542	                    BRA resolution
.39653e		af 01 00 af	lda $af0001	vky_master          LDA @l MASTER_CTRL_REG_H
.396542		29 03		and #$03	resolution          AND #$03                            ; Mask off the resolution bits
.396544		0a		asl a		                    ASL A
.396545		aa		tax		                    TAX                                 ; Index to the col/line count in X
.396546		c2 20		rep #$20	                REP #$20        ; set A long
.396548		bf e4 65 39	lda $3965e4,x	                    LDA @l cols_by_res,X                ; Get the number of columns
.39654c		85 05		sta $0325	                    STA #S_ANSI_VARS.COLS_PER_LINE,D    ; This is how many columns there are per line in the memory
.39654e		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D     ; This is how many would be visible with no border
.396550		bf ec 65 39	lda $3965ec,x	                    LDA @l lines_by_res,X               ; Get the number of lines
.396554		85 09		sta $0329	                    STA #S_ANSI_VARS.LINES_MAX,D        ; This is the total number of lines in memory
.396556		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D    ; This is how many lines would be visible with no border
.396558		e2 20		sep #$20	                SEP #$20        ; set A short
.39655a		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.39655c		f0 06		beq $396564	                    BEQ vky_border                      ; Yes: get the border from Vicky
.39655e		af 04 1e ae	lda $ae1e04	                    LDA @l EVID_BORDER_CTRL_REG         ; No: Check EVID to see if we have a border
.396562		80 04		bra $396568	                    BRA border
.396564		af 04 00 af	lda $af0004	vky_border          LDA @l BORDER_CTRL_REG              ; Check Vicky to see if we have a border
.396568		89 01		bit #$01	border              BIT #Border_Ctrl_Enable
.39656a		f0 76		beq $3965e2	                    BEQ done                            ; No border... the sizes are correct now
.39656c		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.39656e		f0 06		beq $396576	                    BEQ vky_border_size                 ; Yes: get the border size from Vicky
.396570		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the horizontal border width from EVID
.396574		80 04		bra $39657a	                    BRA get_border_x_size
.396576		af 08 00 af	lda $af0008	vky_border_size     LDA @l BORDER_X_SIZE                ; Get the horizontal border width from Vicky
.39657a		29 3f		and #$3f	get_border_x_size   AND #$3F
.39657c		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.39657e		d0 04		bne $396584	                    BNE frac_width
.396580		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.396581		4a		lsr a		                    LSR A
.396582		80 03		bra $396587	                    BRA store_width
.396584		4a		lsr a		frac_width          LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.396585		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.396586		1a		inc a		                    INC A
.396587		85 19		sta $0339	store_width         STA #S_ANSI_VARS.TMPPTR1,D
.396589		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.39658b		e2 20		sep #$20	                SEP #$20        ; set A short
.39658d		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.39658f		f0 0c		beq $39659d	                    BEQ adjust_width                    ; Yes: skip the pixel doubling check
.396591		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check Vucky if we're pixel doubling
.396595		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.396597		f0 04		beq $39659d	                    BEQ adjust_width                    ; No... just adjust the width of the screen
.396599		c2 20		rep #$20	                REP #$20        ; set A long
.39659b		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.39659d						adjust_width
.39659d		c2 20		rep #$20	                REP #$20        ; set A long
.39659f		38		sec		                    SEC
.3965a0		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.3965a2		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.3965a4		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D
.3965a6		e2 20		sep #$20	                SEP #$20        ; set A short
.3965a8		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.3965aa		f0 06		beq $3965b2	                    BEQ vky_border_y_size               ; Yes: get the border Y size from Vicky
.3965ac		af 09 1e ae	lda $ae1e09	                    LDA @l EVID_BORDER_Y_SIZE           ; No: Get the vertical border width from EVID
.3965b0		80 04		bra $3965b6	                    BRA get_border_y_size
.3965b2		af 09 00 af	lda $af0009	vky_border_y_size   LDA @l BORDER_Y_SIZE                ; Get the vertical border width from Vicky
.3965b6		29 3f		and #$3f	get_border_y_size   AND #$3F
.3965b8		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.3965ba		d0 04		bne $3965c0	                    BNE frac_height
.3965bc		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.3965bd		4a		lsr a		                    LSR A
.3965be		80 03		bra $3965c3	                    BRA store_height
.3965c0		4a		lsr a		frac_height         LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.3965c1		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.3965c2		1a		inc a		                    INC A
.3965c3		85 19		sta $0339	store_height        STA #S_ANSI_VARS.TMPPTR1,D
.3965c5		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.3965c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3965c9		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.3965cb		f0 0c		beq $3965d9	                    BEQ adjust_height                   ; Yes: skip the pixel doubling check
.3965cd		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check if we're pixel doubling
.3965d1		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.3965d3		f0 04		beq $3965d9	                    BEQ adjust_height                   ; No... just adjust the height of the screen
.3965d5		c2 20		rep #$20	                REP #$20        ; set A long
.3965d7		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.3965d9						adjust_height
.3965d9		c2 20		rep #$20	                REP #$20        ; set A long
.3965db		38		sec		                    SEC
.3965dc		a5 09		lda $0329	                    LDA #S_ANSI_VARS.LINES_MAX,D
.3965de		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.3965e0		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D
.3965e2		28		plp		done                PLP
.3965e3		6b		rtl		                    RTL
>3965e4		50 00 64 00 28 00 32 00		cols_by_res         .word 80,100,40,50
>3965ec		3c 00 4b 00 1e 00 25 00		lines_by_res        .word 60,75,30,37
.3965f4						ANSI_SETDEVICE
.3965f4		48		pha		                    PHA
.3965f5		08		php		                    PHP
.3965f6		e2 20		sep #$20	                SEP #$20        ; set A short
.3965f8		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check the current output channel
.3965fc		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE               ; Is it the console?
.3965fe		f0 08		beq $396608	                    BEQ console                     ; Yes: point to the console
.396600		c9 04		cmp #$04	                    CMP #CHAN_EVID                  ; Is it the EVID?
.396602		f0 0b		beq $39660f	                    BEQ evid                        ; Check to see if the EVID is present
.396604		28		plp		bad_device          PLP
.396605		68		pla		                    PLA
.396606		38		sec		                    SEC
.396607		6b		rtl		                    RTL
.396608						console
.396608		c2 20		rep #$20	                REP #$20        ; set A long
.39660a		a9 0c 00	lda #$000c	                    LDA #<>SCREENBEGIN              ; Point to the the main screen's variables
.39660d		80 0d		bra $39661c	                    BRA set_dp
.39660f						evid
.39660f		e2 20		sep #$20	                SEP #$20        ; set A short
.396611		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Is the EVID present?
.396615		f0 ed		beq $396604	                    BEQ bad_device                  ; No: return that the device is bad
.396617		c2 20		rep #$20	                REP #$20        ; set A long
.396619		a9 60 00	lda #$0060	                    LDA #<>EVID_SCREENBEGIN         ; Yes: point to the EVID's variables
.39661c		5b		tcd		set_dp              TCD
.39661d		28		plp		                    PLP
.39661e		68		pla		                    PLA
.39661f		18		clc		                    CLC
.396620		6b		rtl		                    RTL
.396621						ANSI_PUTC
.396621		da		phx		                    PHX
.396622		5a		phy		                    PHY
.396623		0b		phd		                    PHD
.396624		08		php		                    PHP
.396625		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396627		22 f4 65 39	jsl $3965f4	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.39662b		90 03		bcc $396630	                    BCC get_state               ; If valid, check the current state
.39662d		82 9d 00	brl $3966cd	                    BRL done                    ; If invalid, just return
.396630		a6 1e		ldx $033e	get_state           LDX #S_ANSI_VARS.STATE,D    ; Get the current state
.396632		f0 0c		beq $396640	                    BEQ do_st_init              ; Dispatch to the correct code for the state
.396634		e0 01		cpx #$01	                    CPX #ST_ESCAPE
.396636		f0 21		beq $396659	                    BEQ do_st_escape
.396638		e0 02		cpx #$02	                    CPX #ST_CSI
.39663a		f0 3f		beq $39667b	                    BEQ do_st_csi
.39663c		64 1e		stz $033e	pr_and_reset        STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.39663e		80 06		bra $396646	                    BRA print_raw
.396640		c9 1b		cmp #$1b	do_st_init          CMP #CHAR_ESC               ; Is it ESC?
.396642		f0 09		beq $39664d	                    BEQ go_escape               ; Yes, handle the ESC
.396644		90 0d		bcc $396653	                    BLT do_control              ; If less than, handle as a control code
.396646		22 ae 67 39	jsl $3967ae	print_raw           JSL ANSI_PUTRAWC            ; Otherwise: Just print the raw character
.39664a		82 80 00	brl $3966cd	                    BRL done
.39664d		a9 01		lda #$01	go_escape           LDA #ST_ESCAPE
.39664f		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the ESCAPE state
.396651		80 7a		bra $3966cd	                    BRA done
.396653		22 65 67 39	jsl $396765	do_control          JSL ANSI_PR_CONTROL         ; Hand a single byte control code
.396657		80 74		bra $3966cd	                    BRA done
.396659		c9 5c		cmp #$5c	do_st_escape        CMP #'\'                    ; Have we gotten 'ESC\' (String terminator)?
.39665b		f0 08		beq $396665	                    BEQ go_init                 ; Yes: go back to the init state (we do nothing with this)
.39665d		c9 5f		cmp #$5f	chk_apc             CMP #'_'                    ; Have we gotten 'ESC_' (Application Program Command)?
.39665f		d0 0a		bne $39666b	                    BNE chk_csi                 ; No: check to see if we have a CSI
.396661		22 e6 10 39	jsl $3910e6	                    JSL SHOW_CREDITS            ; Yes: show the credits
.396665		a9 00		lda #$00	go_init             LDA #ST_INIT
.396667		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the INIT state
.396669		80 62		bra $3966cd	                    BRA done
.39666b		c9 5b		cmp #$5b	chk_csi             CMP #'['                    ; Have we gotten 'ESC['?
.39666d		d0 cd		bne $39663c	                    BNE pr_and_reset            ; No: print this and return to ST_INIT
.39666f		64 21		stz $0341	                    STZ #S_ANSI_VARS.ARG0,D     ; Clear the arguments
.396671		64 22		stz $0342	                    STZ #S_ANSI_VARS.ARG1,D
.396673		64 20		stz $0340	                    STZ #S_ANSI_VARS.ARGC,D
.396675		a9 02		lda #$02	                    LDA #ST_CSI
.396677		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the CSI state
.396679		80 52		bra $3966cd	                    BRA done
.39667b		c9 30		cmp #$30	do_st_csi           CMP #'0'                    ; Do we have a digit?
.39667d		90 1d		bcc $39669c	                    BLT csi_not_digit
.39667f		c9 3a		cmp #$3a	                    CMP #'9'+1
.396681		b0 19		bcs $39669c	                    BGE csi_not_digit
.396683		38		sec		                    SEC                         ; Have digit... convert to a number
.396684		e9 30		sbc #$30	                    SBC #'0'
.396686		48		pha		                    PHA                         ; Save it
.396687		a6 20		ldx $0340	                    LDX #S_ANSI_VARS.ARGC,D
.396689		16 21		asl $0341,x	                    ASL #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 2
.39668b		b5 21		lda $0341,x	                    LDA #S_ANSI_VARS.ARG0,D,X
.39668d		0a		asl a		                    ASL A                       ; A := arg * 4
.39668e		0a		asl a		                    ASL A                       ; A := arg * 8
.39668f		18		clc		                    CLC
.396690		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10
.396692		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := A
.396694		18		clc		                    CLC
.396695		68		pla		                    PLA                         ; Get the digit back
.396696		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10 + digit
.396698		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 10 + digit
.39669a		80 31		bra $3966cd	                    BRA done                    ; And we're done with this particular character
.39669c		c9 3b		cmp #$3b	csi_not_digit       CMP #';'                    ; Is it an argument separator?
.39669e		d0 0e		bne $3966ae	                    BNE csi_not_sep
.3966a0		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D     ; Get the argument count
.3966a2		c9 02		cmp #$02	                    CMP #ANSI_MAX_ARG           ; Are we at the maximum argument count?
.3966a4		d0 03		bne $3966a9	                    BNE csi_next_arg            ; No: move to the next argument
.3966a6		82 93 ff	brl $39663c	                    BRL pr_and_reset            ; Yes: print and reset state
.3966a9		1a		inc a		csi_next_arg        INC A
.3966aa		85 20		sta $0340	                    STA #S_ANSI_VARS.ARGC,D     ; Set the new argument count
.3966ac		80 1f		bra $3966cd	                    BRA done                    ; And we're done with this character
.3966ae		c9 40		cmp #$40	csi_not_sep         CMP #'@'
.3966b0		90 0a		bcc $3966bc	                    BLT csi_not_upper
.3966b2		c9 5b		cmp #$5b	                    CMP #'Z'+1
.3966b4		b0 06		bcs $3966bc	                    BGE csi_not_upper
.3966b6		22 dd 66 39	jsl $3966dd	                    JSL ANSI_ANSI_UPPER         ; Process an ANSI upper case code
.3966ba		80 11		bra $3966cd	                    BRA done
.3966bc		c9 61		cmp #$61	csi_not_upper       CMP #'a'
.3966be		90 0a		bcc $3966ca	                    BLT csi_not_lower
.3966c0		c9 7b		cmp #$7b	                    CMP #'z'+1
.3966c2		b0 06		bcs $3966ca	                    BGE csi_not_lower
.3966c4		22 22 67 39	jsl $396722	                    JSL ANSI_ANSI_LOWER         ; Process an ANSI lower case code
.3966c8		80 03		bra $3966cd	                    BRA done
.3966ca		82 6f ff	brl $39663c	csi_not_lower       BRL pr_and_reset            ; Invalid sequence: print it and reset
.3966cd		28		plp		done                PLP
.3966ce		2b		pld		                    PLD
.3966cf		7a		ply		                    PLY
.3966d0		fa		plx		                    PLX
.3966d1		6b		rtl		                    RTL
.3966d2						ANSI_INVALID
.3966d2		08		php		                    PHP
.3966d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3966d5		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.3966d7		22 ae 67 39	jsl $3967ae	                    JSL ANSI_PUTRAWC            ; Print the character
.3966db		28		plp		                    PLP
.3966dc		6b		rtl		                    RTL
.3966dd						ANSI_ANSI_UPPER
.3966dd		08		php		                    PHP
.3966de		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3966e0		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.3966e2		38		sec		                    SEC
.3966e3		e9 40		sbc #$40	                    SBC #'@'
.3966e5		0a		asl a		                    ASL A
.3966e6		aa		tax		                    TAX
.3966e7		fc ec 66	jsr ($3966ec,x)	                    JSR (ansi_table,X)
.3966ea		28		plp		                    PLP
.3966eb		6b		rtl		                    RTL
>3966ec		46 6a				ansi_table          .word <>ANSI_ICH        ; '@' -- ICH -- Insert Character
>3966ee		c9 67				                    .word <>ANSI_CUU        ; 'A' -- CUU -- Cursor Up
>3966f0		dd 67				                    .word <>ANSI_CUD        ; 'B' -- CUD -- Cursor Down
>3966f2		f1 67				                    .word <>ANSI_CUF        ; 'C' -- CUF -- Cursor Forward
>3966f4		05 68				                    .word <>ANSI_CUB        ; 'D' -- CUB -- Cursor Back
>3966f6		d2 66				                    .word <>ANSI_INVALID    ; 'E' -- CNL -- Cursor Next Line
>3966f8		d2 66				                    .word <>ANSI_INVALID    ; 'F' -- CPL -- Cursor Previous Line
>3966fa		d2 66				                    .word <>ANSI_INVALID    ; 'G' -- CHA -- Cursor Horizontal Absolute
>3966fc		19 68				                    .word <>ANSI_CUP        ; 'H' -- CUP -- Cursor Position
>3966fe		d2 66				                    .word <>ANSI_INVALID    ; 'I'
>396700		98 69				                    .word <>ANSI_ED         ; 'J' -- ED -- Erase In Display
>396702		f5 69				                    .word <>ANSI_EL         ; 'K' -- EL -- Erase In Line
>396704		d2 66				                    .word <>ANSI_INVALID    ; 'L'
>396706		d2 66				                    .word <>ANSI_INVALID    ; 'M'
>396708		d2 66				                    .word <>ANSI_INVALID    ; 'N'
>39670a		d2 66				                    .word <>ANSI_INVALID    ; 'O'
>39670c		8a 6a				                    .word <>ANSI_DCH        ; 'P' -- DCH -- Delete Character
>39670e		d2 66				                    .word <>ANSI_INVALID    ; 'Q'
>396710		d2 66				                    .word <>ANSI_INVALID    ; 'R'
>396712		d2 66				                    .word <>ANSI_INVALID    ; 'S' -- SU -- Scroll Up
>396714		d2 66				                    .word <>ANSI_INVALID    ; 'T' -- SD -- Scroll Down
>396716		d2 66				                    .word <>ANSI_INVALID    ; 'U'
>396718		d2 66				                    .word <>ANSI_INVALID    ; 'V'
>39671a		d2 66				                    .word <>ANSI_INVALID    ; 'W'
>39671c		d2 66				                    .word <>ANSI_INVALID    ; 'X'
>39671e		d2 66				                    .word <>ANSI_INVALID    ; 'Y'
>396720		d2 66				                    .word <>ANSI_INVALID    ; 'Z'
.396722						ANSI_ANSI_LOWER
.396722		08		php		                    PHP
.396723		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396725		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.396727		38		sec		                    SEC
.396728		e9 61		sbc #$61	                    SBC #'a'
.39672a		0a		asl a		                    ASL A
.39672b		aa		tax		                    TAX
.39672c		fc 31 67	jsr ($396731,x)	                    JSR (ansi_table,X)
.39672f		28		plp		                    PLP
.396730		6b		rtl		                    RTL
>396731		d2 66				ansi_table          .word <>ANSI_INVALID    ; 'a'
>396733		d2 66				                    .word <>ANSI_INVALID    ; 'b'
>396735		d2 66				                    .word <>ANSI_INVALID    ; 'c'
>396737		d2 66				                    .word <>ANSI_INVALID    ; 'd'
>396739		d2 66				                    .word <>ANSI_INVALID    ; 'e'
>39673b		d2 66				                    .word <>ANSI_INVALID    ; 'f' -- HVP -- Horizontal Vertical Position
>39673d		d2 66				                    .word <>ANSI_INVALID    ; 'g'
>39673f		32 68				                    .word <>ANSI_SET_MODE   ; 'h'
>396741		d2 66				                    .word <>ANSI_INVALID    ; 'i'
>396743		d2 66				                    .word <>ANSI_INVALID    ; 'j'
>396745		d2 66				                    .word <>ANSI_INVALID    ; 'k'
>396747		6f 68				                    .word <>ANSI_RESET_MODE ; 'l'
>396749		ac 68				                    .word <>ANSI_SGR        ; 'm' -- SGR -- Select Graphics Rendition
>39674b		d2 66				                    .word <>ANSI_INVALID    ; 'n'
>39674d		d2 66				                    .word <>ANSI_INVALID    ; 'o'
>39674f		d2 66				                    .word <>ANSI_INVALID    ; 'p'
>396751		d2 66				                    .word <>ANSI_INVALID    ; 'q'
>396753		d2 66				                    .word <>ANSI_INVALID    ; 'r'
>396755		d2 66				                    .word <>ANSI_INVALID    ; 's'
>396757		d2 66				                    .word <>ANSI_INVALID    ; 't'
>396759		d2 66				                    .word <>ANSI_INVALID    ; 'u'
>39675b		d2 66				                    .word <>ANSI_INVALID    ; 'v'
>39675d		d2 66				                    .word <>ANSI_INVALID    ; 'w'
>39675f		d2 66				                    .word <>ANSI_INVALID    ; 'x'
>396761		d2 66				                    .word <>ANSI_INVALID    ; 'y'
>396763		d2 66				                    .word <>ANSI_INVALID    ; 'z'
.396765						ANSI_PR_CONTROL
.396765		08		php		                    PHP
.396766		e2 20		sep #$20	                SEP #$20        ; set A short
.396768		c2 10		rep #$10	                REP #$10        ; set X long
.39676a		c9 0d		cmp #$0d	                    CMP #CHAR_CR                ; Handle carriage return
.39676c		f0 12		beq $396780	                    BEQ do_cr
.39676e		c9 0a		cmp #$0a	                    CMP #CHAR_LF                ; Handle line feed
.396770		f0 1a		beq $39678c	                    BEQ do_lf
.396772		c9 08		cmp #$08	                    CMP #CHAR_BS                ; Handle back space
.396774		f0 1c		beq $396792	                    BEQ do_bs
.396776		c9 09		cmp #$09	                    CMP #CHAR_TAB               ; Handle TAB
.396778		f0 1e		beq $396798	                    BEQ do_tab
.39677a		22 ae 67 39	jsl $3967ae	                    JSL ANSI_PUTRAWC            ; Otherwise, just print it raw and wriggling!
.39677e		80 2c		bra $3967ac	                    BRA done
.396780		a2 00 00	ldx #$0000	do_cr               LDX #0                      ; Move to the beginning of the next line
.396783		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.396785		c8		iny		                    INY
.396786		22 63 6b 39	jsl $396b63	                    JSL ANSI_LOCATE
.39678a		80 20		bra $3967ac	                    BRA done
.39678c		22 40 6b 39	jsl $396b40	do_lf               JSL ANSI_CSRDOWN            ; Move the cursor down a line
.396790		80 1a		bra $3967ac	                    BRA done
.396792		22 04 6b 39	jsl $396b04	do_bs               JSL ANSI_CSRLEFT            ; Move the cursor to the left (TODO: delete to the left?)
.396796		80 14		bra $3967ac	                    BRA done
.396798						do_tab
.396798		c2 30		rep #$30	                REP #$30        ; set A&X long
.39679a		a5 0e		lda $032e	                    LDA #S_ANSI_VARS.CURSORX,D  ; Move to the next power 8th column
.39679c		29 f8 ff	and #$fff8	                    AND #$FFF8
.39679f		18		clc		                    CLC
.3967a0		69 08 00	adc #$0008	                    ADC #$0008
.3967a3		aa		tax		                    TAX
.3967a4		e2 20		sep #$20	                SEP #$20        ; set A short
.3967a6		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.3967a8		22 63 6b 39	jsl $396b63	                    JSL ANSI_LOCATE
.3967ac		28		plp		done                PLP
.3967ad		6b		rtl		                    RTL
.3967ae						ANSI_PUTRAWC
.3967ae		da		phx		                    PHX
.3967af		5a		phy		                    PHY
.3967b0		0b		phd		                    PHD
.3967b1		08		php		                    PHP
.3967b2		e2 20		sep #$20	                SEP #$20        ; set A short
.3967b4		22 f4 65 39	jsl $3965f4	                    JSL ANSI_SETDEVICE              ; Look at the current output channel and point
.3967b8		b0 0a		bcs $3967c4	                    BCS done                        ; If invalid, just return
.3967ba		87 0b		sta [$032b]	                    STA [#S_ANSI_VARS.CURSORPOS,D]  ; Save the character on the screen
.3967bc		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Set the color based on CURCOLOR
.3967be		87 13		sta [$0333]	                    STA [#S_ANSI_VARS.COLORPOS,D]
.3967c0		22 d9 6a 39	jsl $396ad9	                    JSL ANSI_CSRRIGHT              ; And advance the cursor
.3967c4		28		plp		done                PLP
.3967c5		2b		pld		                    PLD
.3967c6		7a		ply		                    PLY
.3967c7		fa		plx		                    PLX
.3967c8		6b		rtl		                    RTL
.3967c9						ANSI_CUU
.3967c9		08		php		                    PHP
.3967ca		e2 20		sep #$20	                SEP #$20        ; set A short
.3967cc		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.3967ce		d0 02		bne $3967d2	                    BNE loop                        ; Move so long as not 0
.3967d0		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.3967d2		48		pha		loop                PHA                             ; Save the count
.3967d3		22 22 6b 39	jsl $396b22	                    JSL ANSI_CSRUP                  ; Cursor Up
.3967d7		68		pla		                    PLA                             ; Restore the count
.3967d8		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.3967d9		d0 f7		bne $3967d2	                    BNE loop
.3967db		28		plp		                    PLP
.3967dc		60		rts		                    RTS
.3967dd						ANSI_CUD
.3967dd		08		php		                    PHP
.3967de		e2 20		sep #$20	                SEP #$20        ; set A short
.3967e0		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.3967e2		d0 02		bne $3967e6	                    BNE loop                        ; Move so long as not 0
.3967e4		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.3967e6		48		pha		loop                PHA                             ; Save the count
.3967e7		22 40 6b 39	jsl $396b40	                    JSL ANSI_CSRDOWN                ; Cursor Down
.3967eb		68		pla		                    PLA                             ; Restore the count
.3967ec		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.3967ed		d0 f7		bne $3967e6	                    BNE loop
.3967ef		28		plp		                    PLP
.3967f0		60		rts		                    RTS
.3967f1						ANSI_CUF
.3967f1		08		php		                    PHP
.3967f2		e2 20		sep #$20	                SEP #$20        ; set A short
.3967f4		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.3967f6		d0 02		bne $3967fa	                    BNE loop                        ; Move so long as not 0
.3967f8		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.3967fa		48		pha		loop                PHA                             ; Save the count
.3967fb		22 d9 6a 39	jsl $396ad9	                    JSL ANSI_CSRRIGHT               ; Cursor right
.3967ff		68		pla		                    PLA                             ; Restore the count
.396800		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.396801		d0 f7		bne $3967fa	                    BNE loop
.396803		28		plp		                    PLP
.396804		60		rts		                    RTS
.396805						ANSI_CUB
.396805		08		php		                    PHP
.396806		e2 20		sep #$20	                SEP #$20        ; set A short
.396808		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.39680a		d0 02		bne $39680e	                    BNE loop                        ; Move so long as not 0
.39680c		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.39680e		48		pha		loop                PHA                             ; Save the count
.39680f		22 04 6b 39	jsl $396b04	                    JSL ANSI_CSRLEFT                ; Cursor left
.396813		68		pla		                    PLA                             ; Restore the count
.396814		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.396815		d0 f7		bne $39680e	                    BNE loop
.396817		28		plp		                    PLP
.396818		60		rts		                    RTS
.396819						ANSI_CUP
.396819		08		php		                    PHP
.39681a		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39681c		a6 21		ldx $0341	                    LDX #S_ANSI_VARS.ARG0,D         ; Get the first argument
.39681e		d0 02		bne $396822	                    BNE get_row
.396820		a2 01		ldx #$01	                    LDX #1                          ; Default to 1
.396822		a4 22		ldy $0342	get_row             LDY #S_ANSI_VARS.ARG1,D         ; Get the second argument
.396824		d0 02		bne $396828	                    BNE adjust_coords
.396826		a0 01		ldy #$01	                    LDY #1                          ; Default to 1
.396828		ca		dex		adjust_coords       DEX                             ; Translate from base 1 to base 0 coordinates
.396829		88		dey		                    DEY
.39682a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39682c		22 63 6b 39	jsl $396b63	                    JSL ANSI_LOCATE                 ; Set the cursor position
.396830		28		plp		                    PLP
.396831		60		rts		                    RTS
.396832						ANSI_SET_MODE
.396832		08		php		                    PHP
.396833		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396835		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396837		c9 19		cmp #$19	                    CMP #25
.396839		d0 24		bne $39685f	                    BNE chk_break
.39683b		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.39683f		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.396841		d0 0c		bne $39684f	                    BNE check_evid
.396843		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.396847		09 01		ora #$01	                    ORA #Vky_Cursor_Enable
.396849		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.39684d		80 1e		bra $39686d	                    BRA done
.39684f		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.396851		d0 1a		bne $39686d	                    BNE done
.396853		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.396857		09 01		ora #$01	                    ORA #EVID_Cursor_Enable
.396859		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.39685d		80 0e		bra $39686d	                    BRA done
.39685f		c9 1c		cmp #$1c	chk_break           CMP #28
.396861		d0 0a		bne $39686d	                    BNE done
.396863		22 06 70 39	jsl $397006	                    JSL KBD_GET_CONTROL
.396867		09 80		ora #$80	                    ORA #KBD_CTRL_BREAK
.396869		22 19 70 39	jsl $397019	                    JSL KBD_SET_CONTROL
.39686d		28		plp		done                PLP
.39686e		60		rts		                    RTS
.39686f						ANSI_RESET_MODE
.39686f		08		php		                    PHP
.396870		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396872		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396874		c9 19		cmp #$19	                    CMP #25
.396876		d0 24		bne $39689c	                    BNE chk_break
.396878		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.39687c		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.39687e		d0 0c		bne $39688c	                    BNE check_evid
.396880		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.396884		29 fe		and #$fe	                    AND #~Vky_Cursor_Enable
.396886		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.39688a		80 1e		bra $3968aa	                    BRA done
.39688c		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.39688e		d0 1a		bne $3968aa	                    BNE done
.396890		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.396894		29 fe		and #$fe	                    AND #~EVID_Cursor_Enable
.396896		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.39689a		80 0e		bra $3968aa	                    BRA done
.39689c		c9 1c		cmp #$1c	chk_break           CMP #28
.39689e		d0 0a		bne $3968aa	                    BNE done
.3968a0		22 06 70 39	jsl $397006	                    JSL KBD_GET_CONTROL
.3968a4		29 7f		and #$7f	                    AND #~KBD_CTRL_BREAK
.3968a6		22 19 70 39	jsl $397019	                    JSL KBD_SET_CONTROL
.3968aa		28		plp		done                PLP
.3968ab		60		rts		                    RTS
.3968ac						ANSI_SGR
.3968ac		08		php		                    PHP
.3968ad		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3968af		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.3968b1		d0 0d		bne $3968c0	                    BNE chk_1
.3968b3		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR             ; 0 ==> Return to the default colors
.3968b5		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.3968b7		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Switch off inversion
.3968b9		29 3f		and #$3f	                    AND #~(CONTROL_INVERT | CONTROL_BOLD)
.3968bb		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.3968bd		82 d6 00	brl $396996	                    BRL done
.3968c0		c9 01		cmp #$01	chk_1               CMP #1
.3968c2		d0 0f		bne $3968d3	                    BNE chk_2
.3968c4		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Make the current color bold
.3968c6		09 80		ora #$80	                    ORA #$80
.3968c8		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.3968ca		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be bold
.3968cc		09 40		ora #$40	                    ORA #CONTROL_BOLD
.3968ce		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.3968d0		82 c3 00	brl $396996	                    BRL done
.3968d3		c9 02		cmp #$02	chk_2               CMP #2
.3968d5		f0 04		beq $3968db	                    BEQ normal_intensity
.3968d7		c9 16		cmp #$16	chk_22              CMP #22
.3968d9		d0 0f		bne $3968ea	                    BNE chk_7
.3968db		a5 12		lda $0332	normal_intensity    LDA #S_ANSI_VARS.CURCOLOR,D     ; 2 ==> Set the foreground to normal intensity
.3968dd		29 7f		and #$7f	                    AND #~$80
.3968df		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.3968e1		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be normal
.3968e3		29 bf		and #$bf	                    AND #~CONTROL_BOLD
.3968e5		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.3968e7		82 ac 00	brl $396996	                    BRL done
.3968ea		c9 07		cmp #$07	chk_7               CMP #7
.3968ec		d0 2c		bne $39691a	                    BNE chk_27
.3968ee		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors already inverted?
.3968f0		89 80		bit #$80	                    BIT #CONTROL_INVERT
.3968f2		f0 03		beq $3968f7	                    BEQ invert_on
.3968f4		82 9f 00	brl $396996	                    BRL done                        ; Yes: just finish
.3968f7		09 80		ora #$80	invert_on           ORA #CONTROL_INVERT             ; No: Mark that the colors are inverted
.3968f9		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.3968fb		a5 12		lda $0332	swap_colors         LDA #S_ANSI_VARS.CURCOLOR,D     ; Exchange the upper and lower nibbles
.3968fd		0a		asl a		                    ASL  A
.3968fe		69 80		adc #$80	                    ADC  #$80
.396900		2a		rol a		                    ROL  A
.396901		0a		asl a		                    ASL  A
.396902		69 80		adc #$80	                    ADC  #$80
.396904		2a		rol a		                    ROL  A
.396905		29 f7		and #$f7	                    AND #%11110111                  ; Make sure the background is not bolded
.396907		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396909		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.39690b		89 40		bit #$40	                    BIT #CONTROL_BOLD
.39690d		d0 03		bne $396912	                    BNE bold_on
.39690f		82 84 00	brl $396996	                    BRL done                        ; No: we're done
.396912		a5 12		lda $0332	bold_on             LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.396914		09 80		ora #$80	                    ORA #$80
.396916		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396918		80 7c		bra $396996	                    BRA done
.39691a		c9 1b		cmp #$1b	chk_27              CMP #27
.39691c		d0 0c		bne $39692a	                    BNE chk_39
.39691e		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors inverted?
.396920		89 80		bit #$80	                    BIT #CONTROL_INVERT
.396922		f0 72		beq $396996	                    BEQ done                        ; No: just finish
.396924		29 7f		and #$7f	                    AND #~CONTROL_INVERT            ; Yes: Mark that the colors are back to normal
.396926		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.396928		80 d1		bra $3968fb	                    BRA swap_colors                 ; And go swap the colors
.39692a		c9 27		cmp #$27	chk_39              CMP #39
.39692c		d0 10		bne $39693e	                    BNE chk_49
.39692e		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396930		29 0f		and #$0f	                    AND #$0F
.396932		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396934		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.396936		29 f0		and #$f0	                    AND #$F0
.396938		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.39693a		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.39693c		80 58		bra $396996	                    BRA done
.39693e		c9 31		cmp #$31	chk_49              CMP #49
.396940		d0 10		bne $396952	                    BNE chk_foreground
.396942		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396944		29 f0		and #$f0	                    AND #$F0
.396946		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396948		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.39694a		29 0f		and #$0f	                    AND #$0F
.39694c		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.39694e		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396950		80 44		bra $396996	                    BRA done
.396952		c9 1e		cmp #$1e	chk_foreground      CMP #30                         ; If [30..37], set the foreground color
.396954		90 29		bcc $39697f	                    BLT chk_background
.396956		c9 26		cmp #$26	                    CMP #38
.396958		b0 25		bcs $39697f	                    BGE chk_background
.39695a		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.39695c		29 0f		and #$0f	                    AND #$0F
.39695e		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396960		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.396962		38		sec		                    SEC
.396963		e9 1e		sbc #$1e	                    SBC #30
.396965		0a		asl a		                    ASL A
.396966		0a		asl a		                    ASL A
.396967		0a		asl a		                    ASL A
.396968		0a		asl a		                    ASL A
.396969		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.39696b		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.39696d		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.39696f		89 40		bit #$40	                    BIT #CONTROL_BOLD
.396971		d0 03		bne $396976	                    BNE bold_fore                   ; No: we're done
.396973		82 20 00	brl $396996	                    BRL done
.396976		a5 12		lda $0332	bold_fore           LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.396978		09 80		ora #$80	                    ORA #$80
.39697a		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.39697c		82 17 00	brl $396996	                    BRL done
.39697f		c9 28		cmp #$28	chk_background      CMP #40                         ; If [40..47], set the background color
.396981		90 13		bcc $396996	                    BLT done
.396983		c9 30		cmp #$30	                    CMP #48
.396985		b0 0f		bcs $396996	                    BGE done
.396987		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396989		29 f0		and #$f0	                    AND #$F0
.39698b		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.39698d		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.39698f		38		sec		                    SEC
.396990		e9 28		sbc #$28	                    SBC #40
.396992		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.396994		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396996		28		plp		done                PLP
.396997		60		rts		                    RTS
.396998						ANSI_ED
.396998		5a		phy		                    PHY
.396999		08		php		                    PHP
.39699a		e2 20		sep #$20	                SEP #$20        ; set A short
.39699c		c2 10		rep #$10	                REP #$10        ; set X long
.39699e		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.3969a0		d0 1b		bne $3969bd	                    BNE not_0                           ; Is the code 0?
.3969a2						code_0
.3969a2		c2 20		rep #$20	                REP #$20        ; set A long
.3969a4		38		sec		                    SEC                                 ; Calculate min index to erase
.3969a5		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.3969a7		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.3969a9		a8		tay		                    TAY
.3969aa		e2 20		sep #$20	                SEP #$20        ; set A short
.3969ac		a9 20		lda #$20	code_2_loop         LDA #' '
.3969ae		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.3969b0		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.3969b2		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.3969b4		c8		iny		                    INY
.3969b5		c0 00 20	cpy #$2000	                    CPY #$2000
.3969b8		d0 f2		bne $3969ac	                    BNE code_2_loop
.3969ba		82 35 00	brl $3969f2	                    BRL done
.3969bd		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.3969bf		d0 18		bne $3969d9	                    BNE not_1
.3969c1						code_1
.3969c1		c2 20		rep #$20	                REP #$20        ; set A long
.3969c3		38		sec		                    SEC                                 ; Calculate max index to erase
.3969c4		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.3969c6		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.3969c8		a8		tay		                    TAY
.3969c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3969cb		a9 20		lda #$20	code_1_loop         LDA #' '
.3969cd		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.3969cf		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.3969d1		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.3969d3		88		dey		                    DEY                                 ; Move to the previous index
.3969d4		10 f5		bpl $3969cb	                    BPL code_1_loop                     ; And loop until we're done
.3969d6		82 19 00	brl $3969f2	                    BRL done
.3969d9		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.3969db		f0 04		beq $3969e1	                    BEQ cls_all
.3969dd		c9 03		cmp #$03	                    CMP #3
.3969df		d0 11		bne $3969f2	                    BNE done                            ; No: just ignore the sequence
.3969e1		a0 00 00	ldy #$0000	cls_all             LDY #0                              ; Start with the cursor's position
.3969e4		a9 20		lda #$20	cls_all_loop        LDA #' '
.3969e6		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.3969e8		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.3969ea		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.3969ec		c8		iny		                    INY                                 ; Go to the next position
.3969ed		c0 00 20	cpy #$2000	                    CPY #$2000                          ; Have we reached the end?
.3969f0		d0 f2		bne $3969e4	                    BNE cls_all_loop                    ; No: keep going
.3969f2		28		plp		done                PLP
.3969f3		7a		ply		                    PLY
.3969f4		60		rts		                    RTS
.3969f5						ANSI_EL
.3969f5		da		phx		                    PHX
.3969f6		5a		phy		                    PHY
.3969f7		08		php		                    PHP
.3969f8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3969fa		38		sec		                    SEC
.3969fb		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D        ; Compute the address of the first character of the line
.3969fd		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.3969ff		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.396a01		e2 20		sep #$20	                SEP #$20        ; set A short
.396a03		a5 02		lda $0322	                    LDA #S_ANSI_VARS.SCREENBEGIN+2,D    ; Get the bank of the screen
.396a05		85 1b		sta $033b	                    STA #S_ANSI_VARS.TMPPTR1+2,D        ; And put it in the TMPPTR1
.396a07		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.396a09		d0 0e		bne $396a19	                    BNE not_0                           ; Is the code 0?
.396a0b						code_0
.396a0b		a9 20		lda #$20	                    LDA #' '
.396a0d		a4 0e		ldy $032e	                    LDY #S_ANSI_VARS.CURSORX,D          ; Start at the cursor position
.396a0f		97 19		sta [$0339],y	code_0_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.396a11		c8		iny		                    INY
.396a12		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.396a14		d0 f9		bne $396a0f	                    BNE code_0_loop                     ; No: keep looping
.396a16		82 29 00	brl $396a42	                    BRL done
.396a19		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.396a1b		d0 11		bne $396a2e	                    BNE not_1
.396a1d						code_1
.396a1d		a9 20		lda #$20	                    LDA #' '
.396a1f		a0 00 00	ldy #$0000	                    LDY #0
.396a22		97 19		sta [$0339],y	code_1_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.396a24		c8		iny		                    INY
.396a25		c4 0e		cpy $032e	                    CPY #S_ANSI_VARS.CURSORX,D          ; Have we reached the cursor?
.396a27		d0 f9		bne $396a22	                    BNE code_1_loop                     ; No: keep looping
.396a29		97 19		sta [$0339],y	                    STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; And clear under the cursor
.396a2b		82 14 00	brl $396a42	                    BRL done
.396a2e		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.396a30		f0 04		beq $396a36	                    BEQ code_2_3
.396a32		c9 03		cmp #$03	                    CMP #3
.396a34		d0 0c		bne $396a42	                    BNE done                            ; No: just ignore the sequence
.396a36						code_2_3
.396a36		a9 20		lda #$20	                    LDA #' '
.396a38		a0 00 00	ldy #$0000	                    LDY #0
.396a3b		97 19		sta [$0339],y	code_2_3_loop       STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.396a3d		c8		iny		                    INY
.396a3e		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.396a40		d0 f9		bne $396a3b	                    BNE code_2_3_loop                   ; No: keep looping
.396a42		28		plp		done                PLP
.396a43		7a		ply		                    PLY
.396a44		fa		plx		                    PLX
.396a45		60		rts		                    RTS
.396a46						ANSI_ICH
.396a46		5a		phy		                    PHY
.396a47		08		php		                    PHP
.396a48		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396a4a		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.396a4c		f0 04		beq $396a52	                    BEQ default_1                       ; If 0, default to 1
.396a4e		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.396a50		d0 04		bne $396a56	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.396a52		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.396a54		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.396a56		38		sec		calc_src_dest       SEC
.396a57		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D     ; TMPPTR1 := COLS_VISIBLE - CURSORX (destination index)
.396a59		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.396a5b		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.396a5d		38		sec		                    SEC
.396a5e		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D             ; TMPPTR1+1 := TMPPTR1 - n (source index)
.396a60		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D
.396a62		a4 1a		ldy $033a	insert_loop         LDY #S_ANSI_VARS.TMPPTR1+1,D        ; text[dest] := text[source]
.396a64		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.396a66		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.396a68		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.396a6a		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D        ; color[dest] := color[source]
.396a6c		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.396a6e		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.396a70		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.396a72		c6 19		dec $0339	                    DEC #S_ANSI_VARS.TMPPTR1,D          ; Move to the previous position
.396a74		c6 1a		dec $033a	                    DEC #S_ANSI_VARS.TMPPTR1+1,D
.396a76		10 ea		bpl $396a62	                    BPL insert_loop                     ; Keep looping until we reach the end
.396a78		a0 00		ldy #$00	                    LDY #0
.396a7a		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.396a7c		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.396a7e		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396a80		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.396a82		c8		iny		                    INY                                 ; Move to the next byte
.396a83		c4 21		cpy $0341	                    CPY #S_ANSI_VARS.ARG0,D             ; Until we reach the end
.396a85		d0 f3		bne $396a7a	                    BNE fill_loop
.396a87		28		plp		                    PLP
.396a88		7a		ply		                    PLY
.396a89		60		rts		                    RTS
.396a8a						ANSI_DCH
.396a8a		5a		phy		                    PHY
.396a8b		08		php		                    PHP
.396a8c		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396a8e		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.396a90		f0 04		beq $396a96	                    BEQ default_1                       ; If 0, default to 1
.396a92		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.396a94		d0 04		bne $396a9a	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.396a96		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.396a98		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.396a9a		a9 00		lda #$00	calc_src_dest       LDA #0
.396a9c		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D        ; TMPPTR+1 := 0 (destination)
.396a9e		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.396aa0		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D          ; TMPPTR+1 := n (source)
.396aa2		38		sec		                    SEC                                 ; Calculate end offset
.396aa3		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D
.396aa5		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.396aa7		85 22		sta $0342	                    STA #S_ANSI_VARS.ARG1,D
.396aa9		a4 19		ldy $0339	del_loop            LDY #S_ANSI_VARS.TMPPTR1,D          ; text[dest] := text[source]
.396aab		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.396aad		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.396aaf		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.396ab1		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D          ; color[dest] := color[source]
.396ab3		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.396ab5		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.396ab7		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.396ab9		e6 19		inc $0339	                    INC #S_ANSI_VARS.TMPPTR1,D          ; Move to the next position
.396abb		e6 1a		inc $033a	                    INC #S_ANSI_VARS.TMPPTR1+1,D
.396abd		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396abf		c5 22		cmp $0342	                    CMP #S_ANSI_VARS.ARG1,D
.396ac1		90 e6		bcc $396aa9	                    BLT del_loop                        ; Keep looping until we reach the end
.396ac3		38		sec		                    SEC                                 ; Calculate the starting point to fill with blanks
.396ac4		a5 1a		lda $033a	                    LDA #S_ANSI_VARS.TMPPTR1+1,D
.396ac6		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D
.396ac8		a8		tay		                    TAY
.396ac9		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.396acb		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.396acd		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396acf		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.396ad1		c8		iny		                    INY                                 ; Move to the next byte
.396ad2		c4 22		cpy $0342	                    CPY #S_ANSI_VARS.ARG1,D             ; Until we reach the end
.396ad4		90 f3		bcc $396ac9	                    BLT fill_loop
.396ad6		28		plp		                    PLP
.396ad7		7a		ply		                    PLY
.396ad8		60		rts		                    RTS
.396ad9						ANSI_CSRRIGHT
.396ad9		da		phx		                    PHX
.396ada		5a		phy		                    PHY
.396adb		0b		phd		                    PHD
.396adc		08		php		                    PHP
.396add		c2 30		rep #$30	                REP #$30        ; set A&X long
.396adf		22 f4 65 39	jsl $3965f4	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.396ae3		b0 1a		bcs $396aff	                    BCS done                            ; If invalid, just return
.396ae5		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the new column
.396ae7		e8		inx		                    INX
.396ae8		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the current row
.396aea		e4 03		cpx $0323	                    CPX #S_ANSI_VARS.COLS_VISIBLE,D     ; Are we off screen?
.396aec		90 0d		bcc $396afb	                    BCC nowrap                          ; No: just set the position
.396aee		a2 00 00	ldx #$0000	                    LDX #0                              ; Yes: move to the first column
.396af1		c8		iny		                    INY                                 ; And move to the next row
.396af2		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Are we still off screen?
.396af4		90 05		bcc $396afb	                    BCC nowrap                          ; No: just set the position
.396af6		88		dey		                    DEY                                 ; Yes: lock to the last row
.396af7		22 c7 6b 39	jsl $396bc7	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.396afb		22 63 6b 39	jsl $396b63	nowrap              JSL ANSI_LOCATE                     ; Set the cursor position
.396aff		28		plp		done                PLP
.396b00		2b		pld		                    PLD
.396b01		7a		ply		                    PLY
.396b02		fa		plx		                    PLX
.396b03		6b		rtl		                    RTL
.396b04						ANSI_CSRLEFT
.396b04		da		phx		                    PHX
.396b05		5a		phy		                    PHY
.396b06		0b		phd		                    PHD
.396b07		08		php		                    PHP
.396b08		c2 30		rep #$30	                REP #$30        ; set A&X long
.396b0a		22 f4 65 39	jsl $3965f4	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.396b0e		b0 0d		bcs $396b1d	                    BCS done                    ; If invalid, just return
.396b10		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D  ; Check that we are not already @ Zero
.396b12		f0 09		beq $396b1d	                    BEQ done                    ; If so, just ignore this call
.396b14		ca		dex		                    DEX
.396b15		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.396b17		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.396b19		22 63 6b 39	jsl $396b63	                    JSL ANSI_LOCATE
.396b1d		28		plp		done                PLP
.396b1e		2b		pld		                    PLD
.396b1f		7a		ply		                    PLY
.396b20		fa		plx		                    PLX
.396b21		6b		rtl		                    RTL
.396b22						ANSI_CSRUP
.396b22		da		phx		                    PHX
.396b23		5a		phy		                    PHY
.396b24		0b		phd		                    PHD
.396b25		08		php		                    PHP
.396b26		c2 30		rep #$30	                REP #$30        ; set A&X long
.396b28		22 f4 65 39	jsl $3965f4	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.396b2c		b0 0d		bcs $396b3b	                    BCS done                    ; If invalid, just return
.396b2e		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D  ; Check if we are not already @ Zero
.396b30		f0 09		beq $396b3b	                    BEQ done                    ; If we are, just ignore the call
.396b32		88		dey		                    DEY
.396b33		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.396b35		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D
.396b37		22 63 6b 39	jsl $396b63	                    JSL ANSI_LOCATE
.396b3b		28		plp		done                PLP
.396b3c		2b		pld		                    PLD
.396b3d		7a		ply		                    PLY
.396b3e		fa		plx		                    PLX
.396b3f		6b		rtl		                    RTL
.396b40						ANSI_CSRDOWN
.396b40		da		phx		                    PHX
.396b41		5a		phy		                    PHY
.396b42		0b		phd		                    PHD
.396b43		08		php		                    PHP
.396b44		c2 30		rep #$30	                REP #$30        ; set A&X long
.396b46		22 f4 65 39	jsl $3965f4	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.396b4a		b0 12		bcs $396b5e	                    BCS done                            ; If invalid, just return
.396b4c		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the current column
.396b4e		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the new row
.396b50		c8		iny		                    INY
.396b51		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Check to see if we're off screen
.396b53		90 05		bcc $396b5a	                    BCC noscroll                        ; No: go ahead and set the position
.396b55		88		dey		                    DEY                                 ; Yes: go back to the last row
.396b56		22 c7 6b 39	jsl $396bc7	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.396b5a		22 63 6b 39	jsl $396b63	noscroll            JSL ANSI_LOCATE                     ; And set the cursor position
.396b5e		28		plp		done                PLP
.396b5f		2b		pld		                    PLD
.396b60		7a		ply		                    PLY
.396b61		fa		plx		                    PLX
.396b62		6b		rtl		                    RTL
.396b63						ANSI_LOCATE
.396b63		da		phx		                    PHX
.396b64		5a		phy		                    PHY
.396b65		0b		phd		                    PHD
.396b66		08		php		                    PHP
.396b67		22 f4 65 39	jsl $3965f4	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.396b6b		b0 55		bcs $396bc2	                    BCS done                    ; If invalid, just return
.396b6d		c2 30		rep #$30	                REP #$30        ; set A&X long
.396b6f						locate_scroll
.396b6f		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D
.396b71		90 07		bcc $396b7a	                    BCC locate_scrolldone
.396b73		22 c7 6b 39	jsl $396bc7	                    JSL ANSI_SCROLLUP
.396b77		88		dey		                    DEY
.396b78		80 f5		bra $396b6f	                    BRA locate_scroll
.396b7a						locate_scrolldone
.396b7a		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.396b7c		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.396b7e		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.396b80						locate_row
.396b80		c0 00 00	cpy #$0000	                    CPY #$0
.396b83		f0 08		beq $396b8d	                    BEQ locate_right
.396b85		18		clc		locate_down         CLC
.396b86		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.396b88		88		dey		                    DEY
.396b89		f0 02		beq $396b8d	                    BEQ locate_right
.396b8b		80 f8		bra $396b85	                    BRA locate_down
.396b8d		18		clc		locate_right        CLC
.396b8e		65 0e		adc $032e	                    ADC #S_ANSI_VARS.CURSORX,D      ; move the cursor right X columns
.396b90		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D
.396b92		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.396b94		e2 20		sep #$20	                SEP #$20        ; set A short
.396b96		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT
.396b9a		c9 04		cmp #$04	                    CMP #CHAN_EVID
.396b9c		f0 0e		beq $396bac	                    beq locate_evid
.396b9e		c2 20		rep #$20	                REP #$20        ; set A long
.396ba0		98		tya		                    TYA
.396ba1		8f 16 00 af	sta $af0016	                    STA @l VKY_TXT_CURSOR_Y_REG_L
.396ba5		8a		txa		                    TXA
.396ba6		8f 14 00 af	sta $af0014	                    STA @l VKY_TXT_CURSOR_X_REG_L
.396baa		80 0c		bra $396bb8	                    BRA update_colorpos
.396bac						locate_evid
.396bac		c2 20		rep #$20	                REP #$20        ; set A long
.396bae		98		tya		                    TYA
.396baf		8f 16 1e ae	sta $ae1e16	                    STA @l EVID_TXT_CURSOR_Y_REG_L
.396bb3		8a		txa		                    TXA
.396bb4		8f 14 1e ae	sta $ae1e14	                    STA @l EVID_TXT_CURSOR_X_REG_L
.396bb8						update_colorpos
.396bb8		c2 20		rep #$20	                REP #$20        ; set A long
.396bba		18		clc		                    CLC
.396bbb		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.396bbd		69 00 20	adc #$2000	                    ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.396bc0		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D
.396bc2		28		plp		done                PLP
.396bc3		2b		pld		                    PLD
.396bc4		7a		ply		                    PLY
.396bc5		fa		plx		                    PLX
.396bc6		6b		rtl		                    RTL
.396bc7						ANSI_SCROLLUP
.396bc7		da		phx		                    PHX
.396bc8		5a		phy		                    PHY
.396bc9		8b		phb		                    PHB
.396bca		0b		phd		                    PHD
.396bcb		08		php		                    PHP
.396bcc		22 f4 65 39	jsl $3965f4	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.396bd0		90 03		bcc $396bd5	                    BCC calc_size
.396bd2		82 81 00	brl $396c56	                    BRL done                    ; If invalid, just return
.396bd5						calc_size
.396bd5		c2 30		rep #$30	                REP #$30        ; set A&X long
.396bd7		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.396bd9		8f 00 01 00	sta $000100	                    STA @l UNSIGNED_MULT_A_LO
.396bdd		a5 07		lda $0327	                    LDA #S_ANSI_VARS.LINES_VISIBLE,D
.396bdf		8f 02 01 00	sta $000102	                    STA @l UNSIGNED_MULT_B_LO
.396be3		af 04 01 00	lda $000104	                    LDA @l UNSIGNED_MULT_AL_LO
.396be7		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.396be9		18		clc		                    CLC
.396bea		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.396bec		a8		tay		                    TAY
.396bed		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.396bef		aa		tax		                    TAX
.396bf0		e2 20		sep #$20	                SEP #$20        ; set A short
.396bf2		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID
.396bf6		c9 04		cmp #$04	                    CMP #CHAN_EVID
.396bf8		f0 09		beq $396c03	                    BEQ move_text_1                             ; Yes: do the move on the EVID memory
.396bfa						move_text_0
.396bfa		c2 20		rep #$20	                REP #$20        ; set A long
.396bfc		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396bfe		54 af af	mvn #$af,#$af	                    MVN `CS_TEXT_MEM_PTR,`CS_TEXT_MEM_PTR       ; Move the data on the main screen
.396c01		80 07		bra $396c0a	                    BRA scroll_color
.396c03						move_text_1
.396c03		c2 20		rep #$20	                REP #$20        ; set A long
.396c05		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396c07		54 ae ae	mvn #$ae,#$ae	                    MVN `EVID_TEXT_MEM,`EVID_TEXT_MEM           ; Move the data on the EVID screen
.396c0a						scroll_color
.396c0a		c2 30		rep #$30	                REP #$30        ; set A&X long
.396c0c		18		clc		                    CLC
.396c0d		a5 16		lda $0336	                    LDA #S_ANSI_VARS.COLORBEGIN,D
.396c0f		a8		tay		                    TAY
.396c10		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.396c12		aa		tax		                    TAX
.396c13		e2 20		sep #$20	                SEP #$20        ; set A short
.396c15		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID?
.396c19		c9 04		cmp #$04	                    CMP #CHAN_EVID
.396c1b		f0 09		beq $396c26	                    BEQ move_color_1                            ; Yes: scroll the EVID color matrix
.396c1d						move_color_0
.396c1d		c2 20		rep #$20	                REP #$20        ; set A long
.396c1f		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396c21		54 af af	mvn #$af,#$af	                    MVN `CS_COLOR_MEM_PTR,`CS_COLOR_MEM_PTR     ; Move the data on the main screen
.396c24		80 07		bra $396c2d	                    BRA vicky_lastline
.396c26						move_color_1
.396c26		c2 20		rep #$20	                REP #$20        ; set A long
.396c28		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396c2a		54 ae ae	mvn #$ae,#$ae	                    MVN `EVID_COLOR_MEM,`EVID_COLOR_MEM         ; Move the data on the EVID screen
.396c2d						vicky_lastline
.396c2d		c2 20		rep #$20	                REP #$20        ; set A long
.396c2f		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396c31		48		pha		                    PHA
.396c32		18		clc		                    CLC
.396c33		65 00		adc $0320	                    ADC #S_ANSI_VARS.SCREENBEGIN,D
.396c35		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.396c37		a0 00 00	ldy #$0000	start_clear         LDY #0
.396c3a		a9 20 00	lda #$0020	                    LDA #' '
.396c3d		97 19		sta [$0339],y	clr_text            STA [#S_ANSI_VARS.TMPPTR1,D],Y
.396c3f		c8		iny		                    INY
.396c40		c4 0f		cpy $032f	                    CPY #COLS_VISIBLE,D
.396c42		d0 f9		bne $396c3d	                    BNE clr_text
.396c44		68		pla		vicky_lastcolor     PLA
.396c45		18		clc		                    CLC
.396c46		65 16		adc $0336	                    ADC #S_ANSI_VARS.COLORBEGIN,D
.396c48		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.396c4a		a0 00 00	ldy #$0000	start_color         LDY #0
.396c4d		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396c4f		97 19		sta [$0339],y	clr_color           STA [#S_ANSI_VARS.TMPPTR1,D],Y
.396c51		c8		iny		                    INY
.396c52		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D
.396c54		d0 f9		bne $396c4f	                    BNE clr_color
.396c56		28		plp		done                PLP
.396c57		2b		pld		                    PLD
.396c58		ab		plb		                    PLB
.396c59		7a		ply		                    PLY
.396c5a		fa		plx		                    PLX
.396c5b		6b		rtl		                    RTL
.396c5c						ANSI_CLRSCREEN
.396c5c		da		phx		                    PHX
.396c5d		5a		phy		                    PHY
.396c5e		0b		phd		                    PHD
.396c5f		08		php		                    PHP
.396c60		22 f4 65 39	jsl $3965f4	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.396c64		b0 1e		bcs $396c84	                    BCS done                            ; If invalid, just return
.396c66		e2 20		sep #$20	                SEP #$20        ; set A short
.396c68		c2 10		rep #$10	                REP #$10        ; set X long
.396c6a		a0 00 00	ldy #$0000	                    LDY #0
.396c6d		a9 20		lda #$20	                    LDA #$20		                    ; Fill the Entire Screen with Space
.396c6f		97 00		sta [$0320],y	iclearloop0	        STA [#S_ANSI_VARS.SCREENBEGIN,D],Y
.396c71		c8		iny		                    INY
.396c72		c0 00 20	cpy #$2000	                    CPY #$2000
.396c75		d0 f8		bne $396c6f	                    BNE iclearloop0
.396c77		a0 00 00	ldy #$0000	                    LDY	#0
.396c7a		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D         ; Fill the current color
.396c7c		97 16		sta [$0336],y	evid_clearloop1     STA [#S_ANSI_VARS.COLORBEGIN,D],Y
.396c7e		c8		iny		                    INY
.396c7f		c0 00 20	cpy #$2000	                    CPY #$2000
.396c82		d0 f8		bne $396c7c	                    BNE evid_clearloop1
.396c84		28		plp		done                PLP
.396c85		2b		pld		                    PLD
.396c86		7a		ply		                    PLY
.396c87		fa		plx		                    PLX
.396c88		6b		rtl		                    RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/drivers/kbd_driver.asm

=16						KBD_INBUF_SIZE = 16         ; Number of scan codes that can be buffered
=0						KBD_STATE_IDLE = 0          ; Keyboard is IDLE
=1						KBD_STATE_E0 = 1            ; Keyboard has sent E0
=2						KBD_STATE_E02A = 2          ; Keybaord has sent E0 2A (leading to Print Screen E02AE037)
=3						KBD_STATE_E02AE0 = 3
=4						KBD_STATE_E1 = 4            ; Keyboard has sent E1 (leading to Pause/Break)
=5						KBD_STATE_E11D = 5
=6						KBD_STATE_E11D45 = 6
=7						KBD_STATE_E11D45E1 = 7
=8						KBD_STATE_E11D45E19D = 8
=9						KBD_STATE_E0B7 = 9          ; Keyboard has sent E0 B7 (leading to break of Print Screen E0 B7 E0 AA)
=10						KBD_STATE_E0B7E0 = 10
=0						KBD_ACTION_IGNORE = 0       ; State machine action: do nothing with the current byte
=1						KBD_ACTION_EMIT_BASE = 1    ; State machine action: translate scancode from base table and emit it
=2						KBD_ACTION_EMIT_E0 = 2      ; State machine action: translate scancode from E0 prefix table and emit it
=$01						KBD_STAT_OBF = $01          ; Keyboard status: Output Buffer is Full
=$02						KBD_STAT_IBF = $02          ; Keyboard status: Input Buffer is Full
=$a7						KBD_CTRL_CMD_DISABLE2 = $A7 ; Keybaord controller command: disable output device #2
=$a9						KBD_CTRL_CMD_ENABLE2 = $A9  ; Keybaord controller command: enable output device #2
=$aa						KBD_CTRL_CMD_SELFTEST = $AA ; Keyboard controller command: start self test
=$ab						KBD_CTRL_CMD_KBDTEST = $AB  ; Keyboard controller command: start keyboard test
=$ad						KBD_CTRL_CMD_DISABLE1 = $AD ; Keybaord controller command: disable output device #1
=$ae						KBD_CTRL_CMD_ENABLE1 = $AE  ; Keybaord controller command: enable output device #1
=$60						KBD_CTRL_CMD_WRITECMD = $60 ; Keyboard controller command: write to the command register
=$ff						KBD_CMD_RESET = $FF         ; Keyboard command: reset the keyboard
=$f4						KBD_CMD_ENABLE = $F4        ; Keyboard command: enable to keyboard
=$ed						KBD_CMD_SET_LED = $ED       ; Keyboard command: set the LEDs
=$55						KBD_RESP_OK = $55           ; Keyboard response: Command was OK
=$fa						KBD_RESP_ACK = $FA          ; Keyboard response: command acknowledged
=$01						KBD_LOCK_SCROLL = $01       ; LED/lock mask for Scroll Lock key
=$02						KBD_LOCK_NUMBER = $02       ; LED/lock mask for Num Lock key
=$04						KBD_LOCK_CAPS = $04         ; LED/lock mask for Caps Lock key
=$01						KBD_MOD_LSHIFT  = %00000001     ; Left shift is pressed
=$02						KBD_MOD_RSHIFT  = %00000010     ; Right shift is pressed
=$04						KBD_MOD_LCTRL   = %00000100     ; Left CTRL is pressed
=$08						KBD_MOD_RCTRL   = %00001000     ; Right CTRL is pressed
=$10						KBD_MOD_LALT    = %00010000     ; Left ALT is pressed
=$20						KBD_MOD_RALT    = %00100000     ; Right ALT is pressed
=$40						KBD_MOD_OS      = %01000000     ; OS key (e.g. Windows Key) is pressed
=$80						KBD_MOD_MENU    = %10000000     ; Menu key is pressed
=$80						KBD_CTRL_BREAK      = %10000000 ; CONTROL Flag to indicate if keyboard should capture BREAK
=$40						KBD_CTRL_MONITOR    = %01000000 ; CONTROL Flag to indicate if keyboard should trap ALT-BREAK to go to the monitor
=$80						KBD_STAT_BREAK  = %10000000     ; STATUS flag, BREAK has been pressed recently
=$01						KBD_STAT_SCAN   = %00000001     ; STATUS flag to indicate if there are scan codes in the queue
=$02						KBD_STAT_CHAR   = %00000010     ; STATUS flag to indicate if there are characters in the queue
=$61						KBD_SC_BREAK = $61              ; Scan code for the PAUSE/BREAK key
=$3a						KBD_SC_CAPSLOCK = $3A           ; Scan code for the CAPS lock key
=$45						KBD_SC_NUMLOCK = $45            ; Scan code for the NUM lock key
=$46						KBD_SC_SCROLL = $46             ; Scan code for the SCROLL lock key
=$2a						KBD_SC_LSHIFT = $2A             ; Scan code for the left SHIFT key
=$1d						KBD_SC_LCTRL = $1D              ; Scan code for the left CTLR key
=$38						KBD_SC_LALT = $38               ; Scan code for the left ALT key
=$36						KBD_SC_RSHIFT = $36             ; Scan code for the right SHIFT key
=$5e						KBD_SC_RCTRL = $5E              ; Scan code for the right CTRL key
=$5c						KBD_SC_RALT = $5C               ; Scan code for the right ALT key
=$38						KBD_SC_PIVOT = $38              ; Scan code we will use as a pivot for checking NUM lock
.0000						S_KBD_CONTROL
>0000						STATE               .byte ?                     ; The state of the keyboard controller state machine
>0001						CONTROL             .byte ?                     ; Control register
>0002						STATUS              .byte ?                     ; Status register
>0003						SC_BUF              .fill KBD_INBUF_SIZE        ; Buffer for keyboard scancodes read
>0013						SC_HEAD             .byte ?                     ; Index of the first scancode cell to write to
>0014						CHAR_BUF            .fill KBD_INBUF_SIZE        ; Character buffer
>0024						CHAR_HEAD           .byte ?                     ; Number of characters in the character buffer
>0025						MODIFIERS           .byte ?                     ; State of the modifier keys
>0026						LOCKS               .byte ?                     ; State of the lock keys: Caps, Num, Scroll
>0027						TBL_UNMOD           .dword ?                    ; Pointer to the scan code translation table for unmodified keys
>002b						TBL_SHIFT           .dword ?                    ; Pointer to the scan code translation table for shifted keys
>002f						TBL_CTRL            .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL
>0033						TBL_LOCK            .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
>0037						TBL_LOCK_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
>003b						TBL_CTRL_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL and SHIFT
.396c89						IINITKEYBOARD
.396c89		da		phx		                    PHX
.396c8a		5a		phy		                    PHY
.396c8b		0b		phd		                    PHD
.396c8c		08		php		                    PHP
.396c8d		48		pha		                PHA             ; begin setdp macro
.396c8e		08		php		                PHP
.396c8f		c2 20		rep #$20	                REP #$20        ; set A long
.396c91		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.396c94		5b		tcd		                TCD
.396c95		28		plp		                PLP
.396c96		68		pla		                PLA             ; end setdp macro
.396c97		e2 20		sep #$20	                SEP #$20        ; set A short
.396c99		c2 10		rep #$10	                REP #$10        ; set X long
.396c9b		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1                        ; Disable the keyboard interrupts while we get things started
.396c9f		09 01		ora #$01	                    ORA #FNX1_INT00_KBD
.396ca1		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.396ca5		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                         ; Set the state machine to the starting IDLE state
.396ca7		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.396ca9		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D                ; Mark the scancode buffer as empty
.396cab		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D              ; Mark the character buffer as empty
.396cad		64 25		stz $0f25	                    STZ #S_KBD_CONTROL.MODIFIERS,D              ; Default to modifiers being off
.396caf		64 02		stz $0f02	                    STZ #S_KBD_CONTROL.STATUS,D                 ; Clear the status register
.396cb1		a9 80		lda #$80	                    LDA #KBD_CTRL_BREAK                         ; Enable BREAK processing
.396cb3		85 01		sta $0f01	                    STA #S_KBD_CONTROL.CONTROL,D
.396cb5		c2 20		rep #$20	                REP #$20        ; set A long
.396cb7		a9 00 74	lda #$7400	                    LDA #<>SC_US_UNMOD
.396cba		85 27		sta $0f27	                    STA #S_KBD_CONTROL.TBL_UNMOD,D
.396cbc		a9 80 74	lda #$7480	                    LDA #<>SC_US_SHFT
.396cbf		85 2b		sta $0f2b	                    STA #S_KBD_CONTROL.TBL_SHIFT,D
.396cc1		a9 00 75	lda #$7500	                    LDA #<>SC_US_CTRL
.396cc4		85 2f		sta $0f2f	                    STA #S_KBD_CONTROL.TBL_CTRL,D
.396cc6		a9 80 75	lda #$7580	                    LDA #<>SC_US_LOCK
.396cc9		85 33		sta $0f33	                    STA #S_KBD_CONTROL.TBL_LOCK,D
.396ccb		a9 00 76	lda #$7600	                    LDA #<>SC_US_LOCK_SHFT
.396cce		85 37		sta $0f37	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.396cd0		a9 80 76	lda #$7680	                    LDA #<>SC_US_CTRL_SHFT
.396cd3		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.396cd5		e2 20		sep #$20	                SEP #$20        ; set A short
.396cd7		a9 39		lda #$39	                    LDA #`SC_US_UNMOD
.396cd9		85 29		sta $0f29	                    STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.396cdb		a9 39		lda #$39	                    LDA #`SC_US_SHFT
.396cdd		85 2d		sta $0f2d	                    STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.396cdf		a9 39		lda #$39	                    LDA #`SC_US_CTRL
.396ce1		85 31		sta $0f31	                    STA #S_KBD_CONTROL.TBL_CTRL+2,D
.396ce3		a9 39		lda #$39	                    LDA #`SC_US_LOCK
.396ce5		85 35		sta $0f35	                    STA #S_KBD_CONTROL.TBL_LOCK+2,D
.396ce7		a9 39		lda #$39	                    LDA #`SC_US_LOCK_SHFT
.396ce9		85 39		sta $0f39	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.396ceb		a9 39		lda #$39	                    LDA #`SC_US_CTRL_SHFT
.396ced		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.396cef		a9 ad		lda #$ad	                    LDA #KBD_CTRL_CMD_DISABLE1  ; Disable the keyboard sending data
.396cf1		22 80 6d 39	jsl $396d80	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.396cf5		8f 64 10 af	sta $af1064	                    STA @l KBD_CMD_BUF
.396cf9		af 60 10 af	lda $af1060	flush_output        LDA @l KBD_DATA_BUF         ; We just throw that away
.396cfd		a9 aa		lda #$aa	                    LDA #KBD_CTRL_CMD_SELFTEST  ; Send the self test command
.396cff		22 8b 6d 39	jsl $396d8b	                    JSL KBD_CTRL_SND_CMD
.396d03		c9 55		cmp #$55	                    CMP #KBD_RESP_OK            ; Did we get an OK?
.396d05		f0 05		beq $396d0c	                    BEQ test_AB
.396d07		a9 02		lda #$02	                    LDA #2                      ; Return error #2
.396d09		82 64 00	brl $396d70	                    BRL done
.396d0c		a9 ab		lda #$ab	test_AB             LDA #KBD_CTRL_CMD_KBDTEST   ; Send the keyboard test command
.396d0e		22 8b 6d 39	jsl $396d8b	                    JSL KBD_CTRL_SND_CMD
.396d12		c9 00		cmp #$00	                    CMP #0                      ; Did we get a good response?
.396d14		f0 05		beq $396d1b	                    BEQ write_command
.396d16		a9 03		lda #$03	                    LDA #3                      ; Return error #3
.396d18		82 55 00	brl $396d70	                    BRL done
.396d1b		a9 60		lda #$60	write_command       LDA #KBD_CTRL_CMD_WRITECMD
.396d1d		a2 43 00	ldx #$0043	                    LDX #%01000011              ; Translate to set 1, no interrupts
.396d20		22 e5 6d 39	jsl $396de5	                    JSL KBD_CTRL_SND_CMD_P
.396d24		a9 ae		lda #$ae	enable_dev1         LDA #KBD_CTRL_CMD_ENABLE1   ; Re-enable the keyboard sending data
.396d26		22 80 6d 39	jsl $396d80	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.396d2a		8f 64 10 af	sta $af1064	                    STA @l KBD_CMD_BUF
.396d2e		a9 ff		lda #$ff	reset_kbd           LDA #KBD_CMD_RESET          ; Send a reset command to the keyboard
.396d30		a2 ff ff	ldx #$ffff	                    LDX #$FFFF                  ; And wait a while for it to complete the reset
.396d33		22 9c 6d 39	jsl $396d9c	                    JSL KBD_SND_CMD
.396d37		a0 80 00	ldy #$0080	                    LDY #128                    ; Attemp enabling the keyboard 128 times
.396d3a		a9 f4		lda #$f4	enable_loop         LDA #KBD_CMD_ENABLE         ; Try to enable the keyboard
.396d3c		a2 00 00	ldx #$0000	                    LDX #0
.396d3f		22 9c 6d 39	jsl $396d9c	                    JSL KBD_SND_CMD
.396d43		c9 fa		cmp #$fa	                    CMP #KBD_RESP_ACK           ; Did the keyboard acknowledge the command?
.396d45		f0 07		beq $396d4e	                    BEQ set_led                 ; Yes: try to set the LEDs
.396d47		88		dey		                    DEY                         ; No: try again... counting down
.396d48		d0 f0		bne $396d3a	                    BNE enable_loop             ; If we are out of attempts...
.396d4a		a9 05		lda #$05	                    LDA #5                      ; Return error #5
.396d4c		80 22		bra $396d70	                    BRA done
.396d4e		a9 36		lda #$36	set_led             LDA #"6"
.396d50		22 18 10 00	jsl $001018	                    JSL PUTC
.396d54		a9 00		lda #$00	                    LDA #0                      ; Set the state of the locks
.396d56		22 ec 6f 39	jsl $396fec	                    JSL KBD_SETLOCKS
.396d5a		af 41 01 00	lda $000141	                    LDA @l INT_PENDING_REG1     ; Read the Pending Register &
.396d5e		29 01		and #$01	                    AND #FNX1_INT00_KBD
.396d60		8f 41 01 00	sta $000141	                    STA @l INT_PENDING_REG1     ; Writing it back will clear the Active Bit
.396d64		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.396d68		29 fe		and #$fe	                    AND #~FNX1_INT00_KBD
.396d6a		8f 4d 01 00	sta $00014d	                    STA @l INT_MASK_REG1
.396d6e		a9 00		lda #$00	return_0            LDA #0                      ; Return status code for success
.396d70		28		plp		done                PLP
.396d71		2b		pld		                    PLD
.396d72		7a		ply		                    PLY
.396d73		fa		plx		                    PLX
.396d74		6b		rtl		                    RTL
.396d75						KBD_WAIT_OUT
.396d75		48		pha		                    PHA
.396d76		af 64 10 af	lda $af1064	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.396d7a		89 01		bit #$01	                    BIT #KBD_STAT_OBF       ; Check to see if the output buffer is full
.396d7c		f0 f8		beq $396d76	                    BEQ wait                ; If it isn't, keep waiting
.396d7e		68		pla		                    PLA
.396d7f		6b		rtl		                    RTL
.396d80						KBD_WAIT_IN
.396d80		48		pha		                    PHA
.396d81		af 64 10 af	lda $af1064	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.396d85		89 02		bit #$02	                    BIT #KBD_STAT_IBF       ; Check to see if the input buffer has data
.396d87		d0 f8		bne $396d81	                    BNE wait                ; If not, wait for it to have something
.396d89		68		pla		                    PLA
.396d8a		6b		rtl		                    RTL
.396d8b						KBD_CTRL_SND_CMD
.396d8b		22 80 6d 39	jsl $396d80	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.396d8f		8f 64 10 af	sta $af1064	                    STA @l KBD_CMD_BUF
.396d93		22 75 6d 39	jsl $396d75	                    JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.396d97		af 60 10 af	lda $af1060	                    LDA @l KBD_DATA_BUF
.396d9b		6b		rtl		                    RTL
.396d9c						KBD_SND_CMD
.396d9c		22 80 6d 39	jsl $396d80	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.396da0		8f 60 10 af	sta $af1060	                    STA @l KBD_DATA_BUF
.396da4		c2 10		rep #$10	                REP #$10        ; set X long
.396da6		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.396da9		f0 0b		beq $396db6	                    BEQ get_response        ; If 0, check for a response
.396dab		ca		dex		                    DEX                     ; Count down
.396dac		ea		nop		                    NOP                     ; And do a delay
.396dad		ea		nop		                    NOP
.396dae		ea		nop		                    NOP
.396daf		ea		nop		                    NOP
.396db0		ea		nop		                    NOP
.396db1		ea		nop		                    NOP
.396db2		ea		nop		                    NOP
.396db3		ea		nop		                    NOP
.396db4		80 f0		bra $396da6	                    BRA delay
.396db6		22 75 6d 39	jsl $396d75	get_response        JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.396dba		af 60 10 af	lda $af1060	                    LDA @l KBD_DATA_BUF
.396dbe		6b		rtl		                    RTL
.396dbf						KBD_SND_CMD_P
.396dbf		22 80 6d 39	jsl $396d80	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.396dc3		8f 60 10 af	sta $af1060	                    STA @l KBD_DATA_BUF
.396dc7		8a		txa		                    TXA                     ; Send the parameter to the keyboard
.396dc8		c2 10		rep #$10	                REP #$10        ; set X long
.396dca		a2 e8 03	ldx #$03e8	                    LDX #1000
.396dcd		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.396dd0		f0 0a		beq $396ddc	                    BEQ send_data           ; If 0, check for a response
.396dd2		ca		dex		                    DEX                     ; Count down
.396dd3		ea		nop		                    NOP                     ; And do a delay
.396dd4		ea		nop		                    NOP
.396dd5		ea		nop		                    NOP
.396dd6		ea		nop		                    NOP
.396dd7		ea		nop		                    NOP
.396dd8		ea		nop		                    NOP
.396dd9		ea		nop		                    NOP
.396dda		80 f1		bra $396dcd	                    BRA delay
.396ddc		22 80 6d 39	jsl $396d80	send_data           JSL KBD_WAIT_IN
.396de0		8f 60 10 af	sta $af1060	                    STA @l KBD_DATA_BUF
.396de4						get_response
.396de4		6b		rtl		                    RTL
.396de5						KBD_CTRL_SND_CMD_P
.396de5		22 80 6d 39	jsl $396d80	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.396de9		8f 64 10 af	sta $af1064	                    STA @l KBD_CMD_BUF
.396ded		8a		txa		                    TXA
.396dee		22 80 6d 39	jsl $396d80	                    JSL KBD_WAIT_IN         ; Send the parameter to the controller
.396df2		8f 60 10 af	sta $af1060	                    STA @l KBD_DATA_BUF
.396df6		6b		rtl		                    RTL
.396df7						KBD_PROCESS_BYTE
.396df7		8b		phb		                    PHB
.396df8		0b		phd		                    PHD
.396df9		08		php		                    PHP
.396dfa		48		pha		                PHA             ; begin setdbr macro
.396dfb		08		php		                PHP
.396dfc		e2 20		sep #$20	                SEP #$20        ; set A short
.396dfe		a9 39		lda #$39	                LDA #`KBD_STATE_MACH
.396e00		48		pha		                PHA
.396e01		ab		plb		                PLB
.396e02		28		plp		                PLP
.396e03		68		pla		                PLA             ; end setdbr macro
.396e04		48		pha		                PHA             ; begin setdp macro
.396e05		08		php		                PHP
.396e06		c2 20		rep #$20	                REP #$20        ; set A long
.396e08		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.396e0b		5b		tcd		                TCD
.396e0c		28		plp		                PLP
.396e0d		68		pla		                PLA             ; end setdp macro
.396e0e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396e10		a9 00		lda #$00	                    LDA #0
.396e12		8f e0 00 00	sta $0000e0	                    STA @l MOUSE_IDX                    ; A bit of a hack to try to stabilize the mouse
.396e16		af 60 10 af	lda $af1060	                    LDA @l KBD_DATA_BUF                 ; Get the current scancode byte
.396e1a		d0 03		bne $396e1f	                    BNE save_scancode
.396e1c		82 67 00	brl $396e86	                    BRL done                            ; If it's 0, just ignore it
.396e1f						LOCALS
>0001						l_break             .byte ?                             ; The make/break bit of the scancode
>0002						l_code              .byte ?                             ; The scancode
.396e1f		48		pha		save_scancode       PHA
.396e20		48		pha		                    PHA
.396e21		29 80		and #$80	                    AND #$80
.396e23		83 01		sta $01,s	                    STA l_break                         ; Save the make/break bit
.396e25		a2 00		ldx #$00	                    LDX #0                              ; Start from the beginning
.396e27		bf 00 73 39	lda $397300,x	chk_transition      LDA @l KBD_STATE_MACH,X             ; Get the tranition's start state
.396e2b		c9 ff		cmp #$ff	                    CMP #$FF
.396e2d		d0 03		bne $396e32	                    BNE compare_state
.396e2f		82 54 00	brl $396e86	                    BRL done                            ; If $FF: we've reached the end... this is an error... just ignore it?
.396e32		c5 00		cmp $0f00	compare_state       CMP #S_KBD_CONTROL.STATE,D          ; Compare it to the current state
.396e34		d0 0e		bne $396e44	                    BNE next_transition                 ; If they don't match, go to the next transition
.396e36		bf 01 73 39	lda $397301,x	                    LDA @l KBD_STATE_MACH+1,X           ; Get the tranition's test byte
.396e3a		f0 0e		beq $396e4a	                    BEQ apply                           ; Is it 0? Yes: the default applies
.396e3c		a3 02		lda $02,s	                    LDA l_code                          ; Otherwise: get the scan code back
.396e3e		df 01 73 39	cmp $397301,x	                    CMP @l KBD_STATE_MACH+1,X           ; Compare it to the transition's test byte
.396e42		f0 06		beq $396e4a	                    BEQ apply                           ; If equal: this matches, apply the transition
.396e44		e8		inx		next_transition     INX                                 ; Move to the next transition
.396e45		e8		inx		                    INX
.396e46		e8		inx		                    INX
.396e47		e8		inx		                    INX
.396e48		80 dd		bra $396e27	                    BRA chk_transition                  ; Check to see if the next transition applies
.396e4a		bf 02 73 39	lda $397302,x	apply               LDA @l KBD_STATE_MACH+2,X           ; Get the tranition's destination state
.396e4e		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D          ; And save it as our new state
.396e50		bf 03 73 39	lda $397303,x	                    LDA @l KBD_STATE_MACH+3,X           ; Get the tranition's action
.396e54		c9 00		cmp #$00	                    CMP #KBD_ACTION_IGNORE              ; Is it IGNORE?
.396e56		f0 2e		beq $396e86	                    BEQ done                            ; Yes: we're done for now
.396e58		c9 01		cmp #$01	                    CMP #KBD_ACTION_EMIT_BASE           ; Is it EMIT_BASE?
.396e5a		f0 06		beq $396e62	                    BEQ emit_base                       ; Yes: emit the translation of the base byte
.396e5c		c9 02		cmp #$02	                    CMP #KBD_ACTION_EMIT_E0             ; Is it EMIT_E0?
.396e5e		f0 0f		beq $396e6f	                    BEQ emit_e0                         ; Yes: emit the translation of the E0 prefixed byte
.396e60		80 18		bra $396e7a	                    BRA emit_A                          ; Otherwise: just emit the action byte as the new scan code
.396e62		a3 02		lda $02,s	emit_base           LDA l_code
.396e64		29 7f		and #$7f	                    AND #$7F                            ; Strip off the make/break bit
.396e66		aa		tax		                    TAX
.396e67		bf 00 72 39	lda $397200,x	                    LDA @l TBL_SET1,X                   ; Get the translation of the base scan code
.396e6b		03 01		ora $01,s	                    ORA l_break                         ; Add the make/break bit back
.396e6d		80 0b		bra $396e7a	                    BRA emit_A                          ; Emit the translation
.396e6f		a3 02		lda $02,s	emit_e0             LDA l_code
.396e71		29 7f		and #$7f	                    AND #$7F                            ; Strip off any make/break bit
.396e73		aa		tax		                    TAX
.396e74		bf 80 72 39	lda $397280,x	                    LDA @l TBL_SET1_E0,X                ; Get the translation of the E0 prefixed scan code
.396e78		03 01		ora $01,s	                    ORA l_break                         ; Add in the make/break flag
.396e7a		c9 00		cmp #$00	emit_A              CMP #0                              ; Is the code NUL?
.396e7c		f0 08		beq $396e86	                    BEQ done                            ; If so, skip enqueuing it
.396e7e		22 8e 6e 39	jsl $396e8e	enqueue             JSL KBD_SC_ENQUEUE                  ; Enqueue the scancode
.396e82		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                 ; Set the state machine to the initial state
.396e84		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.396e86						done
.396e86		e2 20		sep #$20	                SEP #$20        ; set A short
.396e88		68		pla		                    PLA                                 ; Clean the scan code byte from the stack
.396e89		68		pla		                    PLA
.396e8a		28		plp		                    PLP
.396e8b		2b		pld		                    PLD
.396e8c		ab		plb		                    PLB
.396e8d		6b		rtl		                    RTL
.396e8e						KBD_SC_ENQUEUE
.396e8e		0b		phd		                    PHD
.396e8f		08		php		                    PHP
.396e90		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.396e91		48		pha		                PHA             ; begin setdp macro
.396e92		08		php		                PHP
.396e93		c2 20		rep #$20	                REP #$20        ; set A long
.396e95		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.396e98		5b		tcd		                TCD
.396e99		28		plp		                PLP
.396e9a		68		pla		                PLA             ; end setdp macro
.396e9b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396e9d		c9 00		cmp #$00	                    CMP #0                          ; Is the scan code a NUL?
.396e9f		f0 2f		beq $396ed0	                    BEQ done                        ; Yes: just ignore
.396ea1		c9 61		cmp #$61	                    CMP #KBD_SC_BREAK               ; Is it the BREAK key?
.396ea3		d0 10		bne $396eb5	                    BNE chk_locks                   ; No: check the various lock keys
.396ea5		a5 01		lda $0f01	                    LDA #S_KBD_CONTROL.CONTROL,D
.396ea7		89 80		bit #$80	                    BIT #KBD_CTRL_BREAK                 ; Are we processing BREAK?
.396ea9		f0 08		beq $396eb3	                    BEQ enqueue_break                   ; No: enqueue it as normal
.396eab		a9 80		lda #$80	                    LDA #KBD_STAT_BREAK                 ; Yes: turn on the BREAK bit
.396ead		05 02		ora $0f02	                    ORA #S_KBD_CONTROL.STATUS,D
.396eaf		85 02		sta $0f02	                    STA #S_KBD_CONTROL.STATUS,D
.396eb1		80 1d		bra $396ed0	                    BRA done                            ; And we're done
.396eb3		a9 61		lda #$61	enqueue_break       LDA #KBD_SC_BREAK
.396eb5		c9 3a		cmp #$3a	chk_locks           CMP #KBD_SC_CAPSLOCK            ; Is it the CAPS lock?
.396eb7		f0 1a		beq $396ed3	                    BEQ toggle_caps                 ; Yes: toggle the CAPS lock bits
.396eb9		c9 45		cmp #$45	                    CMP #KBD_SC_NUMLOCK             ; Is it the NUM lock?
.396ebb		f0 20		beq $396edd	                    BEQ toggle_num                  ; Yes: toggle the NUM lock bits
.396ebd		c9 46		cmp #$46	                    CMP #KBD_SC_SCROLL              ; Is it the SCROLL lock?
.396ebf		f0 22		beq $396ee3	                    BEQ toggle_scroll               ; Yes: toggle the SCROLL lock bits
.396ec1		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.396ec3		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.396ec5		f0 09		beq $396ed0	                    BEQ done                        ; Yes: we're full... ignore the scancode
.396ec7		95 03		sta $0f03,x	                    STA #S_KBD_CONTROL.SC_BUF,D,X   ; No: we have room, write the scan code to the buffer
.396ec9		e8		inx		                    INX                             ; Advance to the next location
.396eca		86 13		stx $0f13	                    STX #S_KBD_CONTROL.SC_HEAD,D
.396ecc		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Set the KBD_STAT_SCAN bit
.396ece		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.396ed0		28		plp		done                PLP
.396ed1		2b		pld		                    PLD
.396ed2		6b		rtl		                    RTL
.396ed3		a5 26		lda $0f26	toggle_caps         LDA #S_KBD_CONTROL.LOCKS,D
.396ed5		49 04		eor #$04	                    EOR #KBD_LOCK_CAPS              ; Toggle the CAPS lock
.396ed7		22 ec 6f 39	jsl $396fec	save_locks          JSL KBD_SETLOCKS                ; Set the locks
.396edb		80 f3		bra $396ed0	                    BRA done
.396edd		a5 26		lda $0f26	toggle_num          LDA #S_KBD_CONTROL.LOCKS,D
.396edf		49 02		eor #$02	                    EOR #KBD_LOCK_NUMBER            ; Toggle the NUM lock
.396ee1		80 f4		bra $396ed7	                    BRA save_locks
.396ee3		a5 26		lda $0f26	toggle_scroll       LDA #S_KBD_CONTROL.LOCKS,D
.396ee5		49 01		eor #$01	                    EOR #KBD_LOCK_SCROLL            ; Toggle the SCROLL lock
.396ee7		80 ee		bra $396ed7	                    BRA save_locks
.396ee9						KBD_CHAR_ENQUEUE
.396ee9		0b		phd		                    PHD
.396eea		08		php		                    PHP
.396eeb		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.396eec		48		pha		                PHA             ; begin setdp macro
.396eed		08		php		                PHP
.396eee		c2 20		rep #$20	                REP #$20        ; set A long
.396ef0		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.396ef3		5b		tcd		                TCD
.396ef4		28		plp		                PLP
.396ef5		68		pla		                PLA             ; end setdp macro
.396ef6		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396ef8		c9 00		cmp #$00	                    CMP #0                          ; Is the character a NUL?
.396efa		f0 0f		beq $396f0b	                    BEQ done                        ; Yes: just ignore
.396efc		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D  ; Get the index of the next free spot
.396efe		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.396f00		f0 09		beq $396f0b	                    BEQ done                        ; Yes: we're full... ignore the scancode
.396f02		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X ; No: we have room, write the scan code to the buffer
.396f04		e8		inx		                    INX                             ; Advance to the next location
.396f05		86 24		stx $0f24	                    STX #S_KBD_CONTROL.CHAR_HEAD,D
.396f07		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR              ; Set the KBD_STAT_CHAR bit
.396f09		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.396f0b		28		plp		done                PLP
.396f0c		2b		pld		                    PLD
.396f0d		6b		rtl		                    RTL
.396f0e						KBD_CHAR_DEQUEUE
.396f0e		da		phx		                    PHX
.396f0f		0b		phd		                    PHD
.396f10		08		php		                    PHP
.396f11		48		pha		                PHA             ; begin setdp macro
.396f12		08		php		                PHP
.396f13		c2 20		rep #$20	                REP #$20        ; set A long
.396f15		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.396f18		5b		tcd		                TCD
.396f19		28		plp		                PLP
.396f1a		68		pla		                PLA             ; end setdp macro
.396f1b		78		sei		                    SEI                                 ; Disable IRQ for the duration of this routine to avoid race conditions
.396f1c		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396f1e		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; Get the index of the next free spot
.396f20		f0 21		beq $396f43	                    BEQ return_empty                    ; If it's 0, we have no data
.396f22		a5 14		lda $0f14	                    LDA #S_KBD_CONTROL.CHAR_BUF,D       ; Get the character at the head of the queue
.396f24		48		pha		                    PHA                                 ; Save it
.396f25		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; How many bytes were there?
.396f27		e0 01		cpx #$01	                    CPX #1                              ; Is it one?
.396f29		d0 08		bne $396f33	                    BNE copy_down                       ; No: we need to copy down the remaining bytes
.396f2b		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D      ; Yes: mark that we have no data in the queue now
.396f2d		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR                  ; Clear the KBD_STAT_CHAR bit
.396f2f		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.396f31		80 0d		bra $396f40	                    BRA return_head                     ; And return the character we found
.396f33		a2 00		ldx #$00	copy_down           LDX #0                              ; Starting at the beginning of the buffer...
.396f35		b5 15		lda $0f15,x	loop                LDA #S_KBD_CONTROL.CHAR_BUF+1,D,X   ; Get the next byte
.396f37		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X     ; Move it down
.396f39		e8		inx		                    INX                                 ; And move to the next byte
.396f3a		e4 24		cpx $0f24	                    CPX #S_KBD_CONTROL.CHAR_HEAD,D      ; Have we reached the end?
.396f3c		d0 f7		bne $396f35	                    BNE loop                            ; No: keep copying bytes
.396f3e		c6 24		dec $0f24	                    DEC #S_KBD_CONTROL.CHAR_HEAD,D      ; Decrement the index
.396f40		68		pla		return_head         PLA                                 ; Get the character back
.396f41		80 02		bra $396f45	                    BRA done                            ; And return it
.396f43		a9 00		lda #$00	return_empty        LDA #0                              ; Return: 0 for no character
.396f45		28		plp		done                PLP
.396f46		2b		pld		                    PLD
.396f47		fa		plx		                    PLX
.396f48		6b		rtl		                    RTL
.396f49						KBD_GET_SCANCODE
.396f49		da		phx		                    PHX
.396f4a		0b		phd		                    PHD
.396f4b		08		php		                    PHP
.396f4c		48		pha		                PHA             ; begin setdp macro
.396f4d		08		php		                PHP
.396f4e		c2 20		rep #$20	                REP #$20        ; set A long
.396f50		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.396f53		5b		tcd		                TCD
.396f54		28		plp		                PLP
.396f55		68		pla		                PLA             ; end setdp macro
.396f56		78		sei		                    SEI                             ; Disable IRQ for the duration of this routine to avoid race conditions
.396f57		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396f59		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.396f5b		f0 21		beq $396f7e	                    BEQ return_empty                ; If it's 0, we have no data
.396f5d		a5 03		lda $0f03	                    LDA #S_KBD_CONTROL.SC_BUF,D     ; Get the scan code at the head of the queue
.396f5f		48		pha		                    PHA                             ; Save it
.396f60		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; How many bytes were there?
.396f62		e0 01		cpx #$01	                    CPX #1                          ; Is it one?
.396f64		d0 08		bne $396f6e	                    BNE copy_down                   ; No: we need to copy down the remaining bytes
.396f66		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D    ; Yes: mark that we have no data in the queue now
.396f68		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Clear the KBD_STAT_SCAN bit
.396f6a		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.396f6c		80 0d		bra $396f7b	                    BRA return_head                 ; And return the scan code we found
.396f6e		a2 00		ldx #$00	copy_down           LDX #0                          ; Starting at the beginning of the buffer...
.396f70		b5 04		lda $0f04,x	loop                LDA #S_KBD_CONTROL.SC_BUF+1,D,X ; Get the next byte
.396f72		85 03		sta $0f03	                    STA #S_KBD_CONTROL.SC_BUF,D     ; Move it down
.396f74		e8		inx		                    INX                             ; And move to the next byte
.396f75		e4 13		cpx $0f13	                    CPX #S_KBD_CONTROL.SC_HEAD,D    ; Have we reached the end?
.396f77		d0 f7		bne $396f70	                    BNE loop                        ; No: keep copying bytes
.396f79		c6 13		dec $0f13	                    DEC #S_KBD_CONTROL.SC_HEAD,D    ; Reduce the index to the next free byte
.396f7b		68		pla		return_head         PLA                             ; Get the scan code back
.396f7c		80 02		bra $396f80	                    BRA done                        ; And return it
.396f7e		a9 00		lda #$00	return_empty        LDA #0                          ; Return: 0 for no scan code
.396f80		28		plp		done                PLP
.396f81		2b		pld		                    PLD
.396f82		fa		plx		                    PLX
.396f83		6b		rtl		                    RTL
.396f84						KBD_TEST_BREAK
.396f84		0b		phd		                PHD
.396f85		08		php		                PHP
.396f86		48		pha		                PHA             ; begin setdp macro
.396f87		08		php		                PHP
.396f88		c2 20		rep #$20	                REP #$20        ; set A long
.396f8a		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.396f8d		5b		tcd		                TCD
.396f8e		28		plp		                PLP
.396f8f		68		pla		                PLA             ; end setdp macro
.396f90		e2 20		sep #$20	                SEP #$20        ; set A short
.396f92		a9 80		lda #$80	                LDA #KBD_STAT_BREAK             ; Check the BREAK bit in STATUS
.396f94		14 02		trb $0f02	                TRB #S_KBD_CONTROL.STATUS,D     ; ... and clear it
.396f96		d0 04		bne $396f9c	                BNE ret_true                    ; If it was set, return TRUE
.396f98		28		plp		ret_false       PLP                             ; Otherwise, return false
.396f99		2b		pld		                PLD
.396f9a		18		clc		                CLC
.396f9b		6b		rtl		                RTL
.396f9c		28		plp		ret_true        PLP
.396f9d		2b		pld		                PLD
.396f9e		38		sec		                SEC
.396f9f		6b		rtl		                RTL
.396fa0						KBD_GETMODS_ANSI
.396fa0		0b		phd		                    PHD
.396fa1		08		php		                    PHP
.396fa2		48		pha		                PHA             ; begin setdp macro
.396fa3		08		php		                PHP
.396fa4		c2 20		rep #$20	                REP #$20        ; set A long
.396fa6		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.396fa9		5b		tcd		                TCD
.396faa		28		plp		                PLP
.396fab		68		pla		                PLA             ; end setdp macro
.396fac		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396fae		a9 00		lda #$00	                    LDA #0                      ; Make space for the result code
.396fb0		48		pha		                    PHA
>0001						l_result            .byte ?
.396fb1		a5 25		lda $0f25	                    LDA #S_KBD_CONTROL.MODIFIERS,D
.396fb3		89 03		bit #$03	                    BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT
.396fb5		f0 06		beq $396fbd	                    BEQ check_alt
.396fb7		a3 01		lda $01,s	                    LDA l_result
.396fb9		09 02		ora #$02	                    ORA #%00000010
.396fbb		83 01		sta $01,s	                    STA l_result
.396fbd		a5 25		lda $0f25	check_alt           LDA #S_KBD_CONTROL.MODIFIERS,D
.396fbf		89 30		bit #$30	                    BIT #KBD_MOD_LALT | KBD_MOD_RALT
.396fc1		f0 06		beq $396fc9	                    BEQ check_ctrl
.396fc3		a3 01		lda $01,s	                    LDA l_result
.396fc5		09 04		ora #$04	                    ORA #%00000100
.396fc7		83 01		sta $01,s	                    STA l_result
.396fc9		a5 25		lda $0f25	check_ctrl          LDA #S_KBD_CONTROL.MODIFIERS,D
.396fcb		89 0c		bit #$0c	                    BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL
.396fcd		f0 06		beq $396fd5	                    BEQ return_result
.396fcf		a3 01		lda $01,s	                    LDA l_result
.396fd1		09 08		ora #$08	                    ORA #%00001000
.396fd3		83 01		sta $01,s	                    STA l_result
.396fd5		68		pla		return_result       PLA
.396fd6		28		plp		                    PLP
.396fd7		2b		pld		                    PLD
.396fd8		6b		rtl		                    RTL
.396fd9						KBD_GETLOCKS
.396fd9		0b		phd		                PHD
.396fda		08		php		                PHP
.396fdb		48		pha		                PHA             ; begin setdp macro
.396fdc		08		php		                PHP
.396fdd		c2 20		rep #$20	                REP #$20        ; set A long
.396fdf		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.396fe2		5b		tcd		                TCD
.396fe3		28		plp		                PLP
.396fe4		68		pla		                PLA             ; end setdp macro
.396fe5		e2 20		sep #$20	                SEP #$20        ; set A short
.396fe7		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D
.396fe9		28		plp		                PLP
.396fea		2b		pld		                PLD
.396feb		6b		rtl		                RTL
.396fec						KBD_SETLOCKS
.396fec		0b		phd		                PHD
.396fed		08		php		                PHP
.396fee		48		pha		                PHA             ; begin setdp macro
.396fef		08		php		                PHP
.396ff0		c2 20		rep #$20	                REP #$20        ; set A long
.396ff2		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.396ff5		5b		tcd		                TCD
.396ff6		28		plp		                PLP
.396ff7		68		pla		                PLA             ; end setdp macro
.396ff8		e2 20		sep #$20	                SEP #$20        ; set A short
.396ffa		85 26		sta $0f26	                STA #S_KBD_CONTROL.LOCKS,D
.396ffc		aa		tax		                TAX                         ; Move the new status to X...
.396ffd		a9 ed		lda #$ed	                LDA #KBD_CMD_SET_LED        ; Set the LEDs...
.396fff		22 bf 6d 39	jsl $396dbf	                JSL KBD_SND_CMD_P
.397003		28		plp		                PLP
.397004		2b		pld		                PLD
.397005		6b		rtl		                RTL
.397006						KBD_GET_CONTROL
.397006		0b		phd		                PHD
.397007		08		php		                PHP
.397008		48		pha		                PHA             ; begin setdp macro
.397009		08		php		                PHP
.39700a		c2 20		rep #$20	                REP #$20        ; set A long
.39700c		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.39700f		5b		tcd		                TCD
.397010		28		plp		                PLP
.397011		68		pla		                PLA             ; end setdp macro
.397012		e2 20		sep #$20	                SEP #$20        ; set A short
.397014		a5 01		lda $0f01	                LDA #S_KBD_CONTROL.CONTROL,D
.397016		28		plp		                PLP
.397017		2b		pld		                PLD
.397018		6b		rtl		                RTL
.397019						KBD_SET_CONTROL
.397019		0b		phd		                PHD
.39701a		08		php		                PHP
.39701b		48		pha		                PHA             ; begin setdp macro
.39701c		08		php		                PHP
.39701d		c2 20		rep #$20	                REP #$20        ; set A long
.39701f		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397022		5b		tcd		                TCD
.397023		28		plp		                PLP
.397024		68		pla		                PLA             ; end setdp macro
.397025		e2 20		sep #$20	                SEP #$20        ; set A short
.397027		85 01		sta $0f01	                STA #S_KBD_CONTROL.CONTROL,D
.397029		28		plp		                PLP
.39702a		2b		pld		                PLD
.39702b		6b		rtl		                RTL
.39702c						KBD_GETCW
.39702c		22 38 70 39	jsl $397038	                JSL KBD_GETC
.397030		c9 00		cmp #$00	                CMP #0
.397032		f0 01		beq $397035	                BEQ wait
.397034		6b		rtl		                RTL
.397035		cb		wai		wait            WAI
.397036		80 f4		bra $39702c	                BRA KBD_GETCW
.397038						KBD_GETC
.397038		0b		phd		                PHD
.397039		08		php		                PHP
.39703a		48		pha		                PHA             ; begin setdp macro
.39703b		08		php		                PHP
.39703c		c2 20		rep #$20	                REP #$20        ; set A long
.39703e		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397041		5b		tcd		                TCD
.397042		28		plp		                PLP
.397043		68		pla		                PLA             ; end setdp macro
.397044		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397046		22 0e 6f 39	jsl $396f0e	                JSL KBD_CHAR_DEQUEUE        ; Try to fetch a character from the character queue
.39704a		c9 00		cmp #$00	                CMP #0                      ; Did we get anything back?
.39704c		f0 03		beq $397051	                BEQ get_scancode            ; No: try to get a scan code
.39704e		82 cb 00	brl $39711c	                BRL done                    ; Yes: return the character we had queued
.397051		22 49 6f 39	jsl $396f49	get_scancode    JSL KBD_GET_SCANCODE        ; Fetch the next scancode
.397055		c9 00		cmp #$00	                CMP #0                      ; Is it NUL?
.397057		d0 04		bne $39705d	                BNE chk_make_break
.397059		28		plp		                PLP                         ; Yes: return 0... we got nothin
.39705a		38		sec		                SEC
.39705b		2b		pld		                PLD
.39705c		6b		rtl		                RTL
.39705d		89 80		bit #$80	chk_make_break  BIT #$80                    ; Is it a break scan code?
.39705f		d0 08		bne $397069	                BNE handle_break            ; Yes: process the break
.397061		c9 2a		cmp #$2a	handle_make     CMP #KBD_SC_LSHIFT          ; Is it a make LSHIFT?
.397063		d0 0c		bne $397071	                BNE not_make_ls
.397065		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.397067		80 4e		bra $3970b7	                BRA set_modifier
.397069		c9 aa		cmp #$aa	handle_break    CMP #KBD_SC_LSHIFT | $80    ; Is it a break LSHIFT?
.39706b		d0 0c		bne $397079	                BNE not_break_ls
.39706d		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.39706f		80 50		bra $3970c1	                BRA clr_modifier
.397071		c9 1d		cmp #$1d	not_make_ls     CMP #KBD_SC_LCTRL           ; Is it a make LCTRL?
.397073		d0 0c		bne $397081	                BNE not_make_lc
.397075		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.397077		80 3e		bra $3970b7	                BRA set_modifier
.397079		c9 9d		cmp #$9d	not_break_ls    CMP #KBD_SC_LCTRL | $80     ; Is it a break LCTRL?
.39707b		d0 0c		bne $397089	                BNE not_break_lc
.39707d		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.39707f		80 40		bra $3970c1	                BRA clr_modifier
.397081		c9 38		cmp #$38	not_make_lc     CMP #KBD_SC_LALT            ; Is it a make LALT?
.397083		d0 0c		bne $397091	                BNE not_make_la
.397085		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.397087		80 2e		bra $3970b7	                BRA set_modifier
.397089		c9 b8		cmp #$b8	not_break_lc    CMP #KBD_SC_LALT | $80      ; Is it a break LALT?
.39708b		d0 0c		bne $397099	                BNE not_break_la
.39708d		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.39708f		80 30		bra $3970c1	                BRA clr_modifier
.397091		c9 36		cmp #$36	not_make_la     CMP #KBD_SC_RSHIFT          ; Is it a make RSHIFT?
.397093		d0 0c		bne $3970a1	                BNE not_make_rs
.397095		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.397097		80 1e		bra $3970b7	                BRA set_modifier
.397099		c9 b6		cmp #$b6	not_break_la    CMP #KBD_SC_RSHIFT | $80    ; Is it a break RSHIFT?
.39709b		d0 0c		bne $3970a9	                BNE not_break_rs
.39709d		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.39709f		80 20		bra $3970c1	                BRA clr_modifier
.3970a1		c9 5e		cmp #$5e	not_make_rs     CMP #KBD_SC_RCTRL           ; Is it a make RCTRL?
.3970a3		d0 0c		bne $3970b1	                BNE not_make_rc
.3970a5		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.3970a7		80 0e		bra $3970b7	                BRA set_modifier
.3970a9		c9 de		cmp #$de	not_break_rs    CMP #KBD_SC_RCTRL | $80     ; Is it a break RCTRL?
.3970ab		d0 0e		bne $3970bb	                BNE not_break_rc
.3970ad		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.3970af		80 10		bra $3970c1	                BRA clr_modifier
.3970b1		c9 5c		cmp #$5c	not_make_rc     CMP #KBD_SC_RALT            ; Is it a make RALT?
.3970b3		d0 12		bne $3970c7	                BNE not_make_ra
.3970b5		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.3970b7		04 25		tsb $0f25	set_modifier    TSB #S_KBD_CONTROL.MODIFIERS,D  ; Set the indicated modifier bit
.3970b9		80 08		bra $3970c3	                BRA return_null
.3970bb		c9 dc		cmp #$dc	not_break_rc    CMP #KBD_SC_RALT | $80          ; Is it a break RALT?
.3970bd		d0 04		bne $3970c3	                BNE return_null                 ; No: we don't use any other break scan codes
.3970bf		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.3970c1		14 25		trb $0f25	clr_modifier    TRB #S_KBD_CONTROL.MODIFIERS,D  ; Clear the indicated modifier bit
.3970c3		a9 00		lda #$00	return_null     LDA #0
.3970c5		80 55		bra $39711c	                BRA done
.3970c7		a8		tay		not_make_ra     TAY                                     ; Use the scan code as an index...
.3970c8		c9 38		cmp #$38	                CMP #KBD_SC_PIVOT
.3970ca		90 0e		bcc $3970da	                BLT below_38
.3970cc		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D              ; Check the NUM lock
.3970ce		89 02		bit #$02	                BIT #KBD_LOCK_NUMBER
.3970d0		f0 2a		beq $3970fc	                BEQ fetch_unmod                         ; No: translate the keys as unmodified
.3970d2		a5 25		lda $0f25	chk_num_shift   LDA #S_KBD_CONTROL.MODIFIERS,D
.3970d4		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Check for a shift key being pressed
.3970d6		d0 24		bne $3970fc	                BNE fetch_unmod                         ; If so: translate the keys as modified
.3970d8		80 30		bra $39710a	                BRA fetch_caps                          ; No: translate the key using the lock table
.3970da		a5 25		lda $0f25	below_38        LDA #S_KBD_CONTROL.MODIFIERS,D
.3970dc		89 0c		bit #$0c	                BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL      ; Is either control key pressed?
.3970de		f0 0c		beq $3970ec	                BEQ chk_capslock                        ; No: check for capslock
.3970e0		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.3970e2		f0 04		beq $3970e8	                BEQ fetch_control                       ; No: translate just based off of control
.3970e4		b7 3b		lda [$0f3b],y	                LDA [#S_KBD_CONTROL.TBL_CTRL_SHIFT,D],Y ; Look up the key modfified by CTRL and SHIFT
.3970e6		80 26		bra $39710e	                BRA chk_ansi
.3970e8		b7 2f		lda [$0f2f],y	fetch_control   LDA [#S_KBD_CONTROL.TBL_CTRL,D],Y       ; Look up the key modified by CONTROL
.3970ea		80 22		bra $39710e	                BRA chk_ansi
.3970ec		a5 26		lda $0f26	chk_capslock    LDA #S_KBD_CONTROL.LOCKS,D              ; Check the CAPS lock
.3970ee		89 04		bit #$04	                BIT #KBD_LOCK_CAPS
.3970f0		d0 0e		bne $397100	                BNE chk_caps_shift                      ; Yes: check the state of the SHIFT key
.3970f2		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.3970f4		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.3970f6		f0 04		beq $3970fc	                BEQ fetch_unmod                         ; No: translate just based off of control
.3970f8		b7 2b		lda [$0f2b],y	fetch_shifted   LDA [#S_KBD_CONTROL.TBL_SHIFT,D],Y      ; Look up the key modified by SHIFT
.3970fa		80 12		bra $39710e	                BRA chk_ansi
.3970fc		b7 27		lda [$0f27],y	fetch_unmod     LDA [#S_KBD_CONTROL.TBL_UNMOD,D],Y      ; Look up the unmodified key
.3970fe		80 0e		bra $39710e	                BRA chk_ansi
.397100		a5 25		lda $0f25	chk_caps_shift  LDA #S_KBD_CONTROL.MODIFIERS,D
.397102		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.397104		f0 04		beq $39710a	                BEQ fetch_caps                          ; No: translate just based off of control
.397106		b7 37		lda [$0f37],y	                LDA [#S_KBD_CONTROL.TBL_LOCK_SHIFT,D],Y ; Look up the key modified by CAPS and SHIFT
.397108		80 04		bra $39710e	                BRA chk_ansi
.39710a		b7 33		lda [$0f33],y	fetch_caps      LDA [#S_KBD_CONTROL.TBL_LOCK,D],Y       ; Look up the key modified by CAPSLOCK
.39710c		80 00		bra $39710e	                BRA chk_ansi
.39710e		c9 80		cmp #$80	chk_ansi        CMP #$80                                ; Check to see if we have an ANSI escape sequence to send
.397110		90 0a		bcc $39711c	                BLT done                                ; If not, just return the character
.397112		c9 96		cmp #$96	                CMP #$96
.397114		b0 06		bcs $39711c	                BGE done
.397116		22 58 71 39	jsl $397158	                JSL KBD_ENQ_ANSI                        ; Expand and enqueue the ANSI sequence
.39711a		a9 1b		lda #$1b	                LDA #CHAR_ESC                           ; And return the ESC key to start the sequence
.39711c		28		plp		done            PLP
.39711d		2b		pld		                PLD
.39711e		18		clc		                CLC
.39711f		6b		rtl		                RTL
.397120						KBD_ENQUEUE_BCD
.397120		08		php		                PHP
.397121		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397123		48		pha		                PHA                     ; Save the value
.397124		4a		lsr a		                LSR A                   ; Get the 10s digit
.397125		4a		lsr a		                LSR A
.397126		4a		lsr a		                LSR A
.397127		4a		lsr a		                LSR A
.397128		c9 00		cmp #$00	                CMP #0                  ; If it's 0, move to the 1s digit
.39712a		f0 0b		beq $397137	                BEQ enqueue_1
.39712c		c9 0a		cmp #$0a	                CMP #$0A                ; If it's out of range, ignore this whole call
.39712e		b0 13		bcs $397143	                BGE done_A
.397130		18		clc		                CLC                     ; Enqueue the tens digit
.397131		69 30		adc #$30	                ADC #'0'
.397133		22 e9 6e 39	jsl $396ee9	                JSL KBD_CHAR_ENQUEUE
.397137		68		pla		enqueue_1       PLA                     ; Enqueue the ones digit
.397138		29 0f		and #$0f	                AND #$0F
.39713a		18		clc		                CLC
.39713b		69 30		adc #$30	                ADC #'0'
.39713d		22 e9 6e 39	jsl $396ee9	                JSL KBD_CHAR_ENQUEUE
.397141		28		plp		done            PLP
.397142		6b		rtl		                RTL
.397143		68		pla		done_A          PLA
.397144		80 fb		bra $397141	                BRA done
.397146						KBD_BIN_TO_BCD
.397146		da		phx		                PHX
.397147		08		php		                PHP
.397148		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39714a		aa		tax		                TAX
.39714b		a9 99		lda #$99	                LDA #$99                ; Start with -1 in BCD form
.39714d		f8		sed		                SED                     ; Switch to Decimal arithmetic
.39714e		18		clc		loop            CLC
.39714f		69 01		adc #$01	                ADC #1                  ; Add 1 with BCD arithmetic
.397151		ca		dex		                DEX                     ; Decrement input value in X
.397152		10 fa		bpl $39714e	                BPL loop                ; loop until input value < 0
.397154		d8		cld		                CLD                     ; Switch back to Binary arithmetic
.397155		28		plp		                PLP
.397156		fa		plx		                PLX
.397157		6b		rtl		                RTL
.397158						KBD_ENQ_ANSI
.397158		08		php		                PHP
.397159		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39715b		c9 80		cmp #$80	                CMP #$80                        ; check to make sure the code is within range
.39715d		b0 03		bcs $397162	                BGE chk_high_end
.39715f		82 4a 00	brl $3971ac	                BRL done                        ; Out of range, just ignore it
.397162		c9 96		cmp #$96	chk_high_end    CMP #$96
.397164		90 03		bcc $397169	                BLT save_value
.397166		82 43 00	brl $3971ac	                BRL done                        ; Out of range, just ignore it
.397169		48		pha		save_value      PHA
.39716a		a9 5b		lda #$5b	                LDA #'['
.39716c		22 e9 6e 39	jsl $396ee9	                JSL KBD_CHAR_ENQUEUE
.397170		68		pla		                PLA
.397171		38		sec		                SEC
.397172		e9 80		sbc #$80	                SBC #$80                ; Convert to an offset
.397174		aa		tax		                TAX                     ; And use it as an index to...
.397175		bf ae 71 39	lda $3971ae,x	                LDA @l ENCODE_CODE,X    ; Get the number
.397179		10 0b		bpl $397186	                BPL send_number         ; If MSB is not set, send the number as-is
.39717b		29 7f		and #$7f	                AND #$7F                ; Remove the MSB
.39717d		18		clc		                CLC
.39717e		69 41		adc #$41	                ADC #'A'                ; Convert to 'A' .. 'D'
.397180		22 e9 6e 39	jsl $396ee9	                JSL KBD_CHAR_ENQUEUE    ; Enqueue the code
.397184		80 26		bra $3971ac	                BRA done
.397186		22 46 71 39	jsl $397146	send_number     JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.39718a		22 20 71 39	jsl $397120	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.39718e		22 a0 6f 39	jsl $396fa0	chk_modifier    JSL KBD_GETMODS_ANSI    ; Get the modifiers
.397192		c9 00		cmp #$00	                CMP #0                  ; Are there any?
.397194		f0 10		beq $3971a6	                BEQ close               ; No: close the sequence
.397196		48		pha		                PHA
.397197		a9 3b		lda #$3b	                LDA #';'                ; Enqueue the separator
.397199		22 e9 6e 39	jsl $396ee9	                JSL KBD_CHAR_ENQUEUE
.39719d		68		pla		                PLA
.39719e		22 46 71 39	jsl $397146	                JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.3971a2		22 20 71 39	jsl $397120	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.3971a6		a9 7e		lda #$7e	close           LDA #'~'                ; Enqueue closing code
.3971a8		22 e9 6e 39	jsl $396ee9	                JSL KBD_CHAR_ENQUEUE
.3971ac		28		plp		done            PLP
.3971ad		6b		rtl		                RTL
>3971ae		01 02 03 04 05 06		ENCODE_CODE     .byte 1, 2, 3, 4, 5, 6      ; Insert, etc...
>3971b4		80 81 82 83			                .byte $80, $81, $82, $83    ; Cursor keys
>3971b8		0b 0c 0d 0e 0f			                .byte 11, 12, 13, 14, 15    ; F1 - F5
>3971bd		11 12 13 14 15			                .byte 17, 18, 19, 20, 21    ; F6 - F10
>3971c2		17 18				                .byte 23, 24                ; F11 - F12
.3971c4						KBD_SETTABLE
.3971c4		48		pha		                PHA
.3971c5		8b		phb		                PHB
.3971c6		0b		phd		                PHD
.3971c7		08		php		                PHP
.3971c8		48		pha		                PHA             ; begin setdp macro
.3971c9		08		php		                PHP
.3971ca		c2 20		rep #$20	                REP #$20        ; set A long
.3971cc		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.3971cf		5b		tcd		                TCD
.3971d0		28		plp		                PLP
.3971d1		68		pla		                PLA             ; end setdp macro
.3971d2		e2 20		sep #$20	                SEP #$20        ; set A short
.3971d4		8b		phb		                PHB                 ; Get the data bank into A
.3971d5		68		pla		                PLA
.3971d6		c2 20		rep #$20	                REP #$20        ; set A long
.3971d8		29 ff 00	and #$00ff	                AND #$00FF
.3971db		85 29		sta $0f29	                STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.3971dd		85 2d		sta $0f2d	                STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.3971df		85 31		sta $0f31	                STA #S_KBD_CONTROL.TBL_CTRL+2,D
.3971e1		85 35		sta $0f35	                STA #S_KBD_CONTROL.TBL_LOCK+2,D
.3971e3		85 39		sta $0f39	                STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.3971e5		85 3d		sta $0f3d	                STA #S_KBD_CONTROL.TBL_CTRL_SHIFT+2,D
.3971e7		86 27		stx $0f27	                STX #S_KBD_CONTROL.TBL_UNMOD,D
.3971e9		86 2b		stx $0f2b	                STX #S_KBD_CONTROL.TBL_SHIFT,D
.3971eb		86 2f		stx $0f2f	                STX #S_KBD_CONTROL.TBL_CTRL,D
.3971ed		86 33		stx $0f33	                STX #S_KBD_CONTROL.TBL_LOCK,D
.3971ef		86 37		stx $0f37	                STX #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.3971f1		86 3b		stx $0f3b	                STX #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.3971f3		28		plp		                PLP
.3971f4		2b		pld		                PLD
.3971f5		ab		plb		                PLB
.3971f6		68		pla		                PLA
.3971f7		6b		rtl		                RTL
>3971f8						.align 256
>397200		00 01 02 03 04 05 06 07		TBL_SET1        .byte $00, $01, $02, $03, $04, $05, $06, $07    ; $00 - $07
>397208		08 09 0a 0b 0c 0d 0e 0f		                .byte $08, $09, $0A, $0B, $0C, $0D, $0E, $0F    ; $08 - $0F
>397210		10 11 12 13 14 15 16 17		                .byte $10, $11, $12, $13, $14, $15, $16, $17    ; $10 - $17
>397218		18 19 1a 1b 1c 1d 1e 1f		                .byte $18, $19, $1A, $1B, $1C, $1D, $1E, $1F    ; $18 - $1F
>397220		20 21 22 23 24 25 26 27		                .byte $20, $21, $22, $23, $24, $25, $26, $27    ; $20 - $27
>397228		28 29 2a 2b 2c 2d 2e 2f		                .byte $28, $29, $2A, $2B, $2C, $2D, $2E, $2F    ; $28 - $2F
>397230		30 31 32 33 34 35 36 37		                .byte $30, $31, $32, $33, $34, $35, $36, $37    ; $30 - $37
>397238		38 39 3a 3b 3c 3d 3e 3f		                .byte $38, $39, $3A, $3B, $3C, $3D, $3E, $3F    ; $38 - $3F
>397240		40 41 42 43 44 45 46 47		                .byte $40, $41, $42, $43, $44, $45, $46, $47    ; $40 - $47
>397248		48 49 4a 4b 4c 4d 4e 4f		                .byte $48, $49, $4A, $4B, $4C, $4D, $4E, $4F    ; $48 - $4F
>397250		50 51 52 53 54 55 56 57		                .byte $50, $51, $52, $53, $54, $55, $56, $57    ; $50 - $57
>397258		58 00 00 00 00 00 00 00		                .byte $58, $00, $00, $00, $00, $00, $00, $00    ; $58 - $5F
>397260		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>397268		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>397270		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>397278		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
>397280		00 00 00 00 00 00 00 00		TBL_SET1_E0     .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $00 - $07
>397288		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $08 - $0F
>397290		70 00 00 00 00 00 00 00		                .byte $70, $00, $00, $00, $00, $00, $00, $00    ; $10 - $17
>397298		00 71 00 00 6d 5e 00 00		                .byte $00, $71, $00, $00, $6D, $5E, $00, $00    ; $18 - $1F
>3972a0		72 00 6e 00 6f 00 00 00		                .byte $72, $00, $6E, $00, $6F, $00, $00, $00    ; $20 - $27
>3972a8		00 00 00 00 00 00 73 00		                .byte $00, $00, $00, $00, $00, $00, $73, $00    ; $28 - $2F
>3972b0		74 00 00 00 00 6c 00 00		                .byte $74, $00, $00, $00, $00, $6C, $00, $00    ; $30 - $37
>3972b8		5c 00 00 00 00 00 00 00		                .byte $5C, $00, $00, $00, $00, $00, $00, $00    ; $38 - $3F
>3972c0		00 00 00 00 00 00 61 63		                .byte $00, $00, $00, $00, $00, $00, $61, $63    ; $40 - $47
>3972c8		68 64 00 69 00 6b 00 66		                .byte $68, $64, $00, $69, $00, $6B, $00, $66    ; $48 - $4F
>3972d0		6a 67 62 65 00 00 00 00		                .byte $6A, $67, $62, $65, $00, $00, $00, $00    ; $50 - $57
>3972d8		00 00 00 00 00 5d 00 00		                .byte $00, $00, $00, $00, $00, $5D, $00, $00    ; $58 - $5F
>3972e0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>3972e8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>3972f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>3972f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
.397300						KBD_STATE_MACH
>397300		00 e0 01 00			                .byte KBD_STATE_IDLE, $E0, KBD_STATE_E0, 0                          ; IDLE =[E0]=> STATE_E0
>397304		00 e1 04 00			                .byte KBD_STATE_IDLE, $E1, KBD_STATE_E1, 0                          ; IDLE =[E1]=> STATE_E1
>397308		00 00 00 01			                .byte KBD_STATE_IDLE, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_BASE       ; IDLE =[default]=> IDLE / emit(TBL_SET1[x])
>39730c		01 2a 02 00			                .byte KBD_STATE_E0, $2A, KBD_STATE_E02A, 0                          ; STATE_E0 =[2A]=> STATE_E02A
>397310		01 b7 09 00			                .byte KBD_STATE_E0, $B7, KBD_STATE_E0B7, 0                          ; STATE_E0 =[B7]=> STATE_E0B7
>397314		01 00 00 02			                .byte KBD_STATE_E0, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_E0           ; STATE_E0 =[default]=> IDLE, emit(TBL_SET1_E0[x])
>397318		02 e0 03 00			                .byte KBD_STATE_E02A, $E0, KBD_STATE_E02AE0, 0                      ; STATE_E02A =[E0]=> STATE_E02AE0
>39731c		02 00 00 00			                .byte KBD_STATE_E02A, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E02A =[default]=> IDLE, ignore(x)
>397320		03 37 00 60			                .byte KBD_STATE_E02AE0, $37, KBD_STATE_IDLE, $60                    ; STATE_E02AE0 =[37]=> IDLE, emit(make{PrintScreen})
>397324		03 00 00 00			                .byte KBD_STATE_E02AE0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E02AE0 =[default]=> IDLE, ignore(x)
>397328		09 e0 0a 00			                .byte KBD_STATE_E0B7, $E0, KBD_STATE_E0B7E0, 0                      ; STATE_E0B7 =[E0]=> STATE_E0B7E0
>39732c		09 00 00 00			                .byte KBD_STATE_E0B7, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E0B7 =[default]=> IDLE, ignore(x)
>397330		0a aa 00 e0			                .byte KBD_STATE_E0B7E0, $AA, KBD_STATE_IDLE, $E0                    ; STATE_E0B7E0 =[AA]=> IDLE, emit(break{PrintScreen})
>397334		0a 00 00 00			                .byte KBD_STATE_E0B7E0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E0B7E0 =[default]=> IDLE, ignore(x)
>397338		04 1d 05 00			                .byte KBD_STATE_E1, $1D, KBD_STATE_E11D, 0                          ; STATE_E1 =[1D]=> STATE_E11D
>39733c		04 00 00 00			                .byte KBD_STATE_E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE            ; STATE_E1 =[default]=> IDLE, ignore(x)
>397340		05 45 06 00			                .byte KBD_STATE_E11D, $45, KBD_STATE_E11D45, 0                      ; STATE_E11D =[45]=> STATE_E11D45
>397344		05 00 00 00			                .byte KBD_STATE_E11D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E11D =[default]=> IDLE, ignore(x)
>397348		06 e1 07 00			                .byte KBD_STATE_E11D45, $E1, KBD_STATE_E11D45E1, 0                  ; STATE_E11D45 =[E1]=> STATE_E11D45E1
>39734c		06 00 00 00			                .byte KBD_STATE_E11D45, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E11D45 =[default]=> IDLE, ignore(x)
>397350		07 9d 08 00			                .byte KBD_STATE_E11D45E1, $9D, KBD_STATE_E11D45E19D, 0              ; STATE_E11D45E1 =[9D]=> STATE_E11D45E19D
>397354		07 00 00 00			                .byte KBD_STATE_E11D45E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE      ; STATE_E11D45E1 =[default]=> IDLE, ignore(x)
>397358		08 c5 00 61			                .byte KBD_STATE_E11D45E19D, $C5, KBD_STATE_IDLE, $61                ; STATE_E11D45E19D =[C5]=> IDLE, emit(make{Pause})
>39735c		08 00 00 00			                .byte KBD_STATE_E11D45E19D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE    ; STATE_E11D45E19D =[default]=> IDLE, ignore(x)
>397360		ff ff ff ff			                .byte $FF, $FF, $FF, $FF                                            ; End of state machine
>397364						.align 256
>397400		00 1b 31 32 33 34 35 36		SC_US_UNMOD     .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>397408		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>397410		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>397418		6f 70 5b 5d 0d 00 61 73		                .byte 'o', 'p', '[', ']', $0D, $00, 'a', 's'                        ; $18 - $1F
>397420		64 66 67 68 6a 6b 6c 3b		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';'                        ; $20 - $27
>397428		27 60 00 5c 7a 78 63 76		                .byte $27, '`', $00, '\', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>397430		62 6e 6d 2c 2e 2f 00 2a		                .byte 'b', 'n', 'm', ',', '.', '/', $00, '*'                        ; $30 - $37
>397438		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>397440		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>397448		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>397450		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>397458		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>397460		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>397468		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>397470		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>397478		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397480		00 1b 21 40 23 24 25 5e		SC_US_SHFT      .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>397488		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>397490		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>397498		4f 50 7b 7d 0a 00 41 53		                .byte 'O', 'P', '{', '}', $0A, $00, 'A', 'S'                        ; $18 - $1F
>3974a0		44 46 47 48 4a 4b 4c 3a		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':'                        ; $20 - $27
>3974a8		22 7e 00 7c 5a 58 43 56		                .byte $22, '~', $00, '|', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>3974b0		42 4e 4d 3c 3e 3f 00 00		                .byte 'B', 'N', 'M', '<', '>', '?', $00, $00                        ; $30 - $37
>3974b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>3974c0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>3974c8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>3974d0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>3974d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>3974e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>3974e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>3974f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>3974f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397500		00 1b 31 32 33 34 35 1e		SC_US_CTRL      .byte $00, $1B, '1', '2', '3', '4', '5', $1E                        ; $00 - $07
>397508		37 38 39 30 1f 3d 08 09		                .byte '7', '8', '9', '0', $1F, '=', $08, $09                        ; $08 - $0F
>397510		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>397518		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>397520		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>397528		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>397530		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>397538		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>397540		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>397548		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>397550		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>397558		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>397560		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>397568		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>397570		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>397578		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397580		00 1b 31 32 33 34 35 36		SC_US_LOCK      .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>397588		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>397590		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>397598		4f 50 5b 5d 0d 00 41 53		                .byte 'O', 'P', '[', ']', $0D, $00, 'A', 'S'                        ; $18 - $1F
>3975a0		44 46 47 48 4a 4b 4c 3b		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';'                        ; $20 - $27
>3975a8		27 60 00 5c 5a 58 43 56		                .byte $27, '`', $00, '\', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>3975b0		42 4e 4d 2c 2e 2f 00 00		                .byte 'B', 'N', 'M', ',', '.', '/', $00, $00                        ; $30 - $37
>3975b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>3975c0		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>3975c8		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>3975d0		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>3975d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>3975e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>3975e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>3975f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>3975f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397600		00 1b 21 40 23 24 25 5e		SC_US_LOCK_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>397608		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>397610		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>397618		6f 70 7b 7d 0a 00 61 73		                .byte 'o', 'p', '{', '}', $0A, $00, 'a', 's'                        ; $18 - $1F
>397620		64 66 67 68 6a 6b 6c 3a		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':'                        ; $20 - $27
>397628		22 7e 00 7c 7a 78 63 76		                .byte $22, '~', $00, '|', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>397630		62 6e 6d 3c 3e 3f 00 00		                .byte 'b', 'n', 'm', '<', '>', '?', $00, $00                        ; $30 - $37
>397638		00 20 00 00 00 00 00 00		                .byte $00, ' ', $00, $00, $00, $00, $00, $00                        ; $38 - $3F
>397640		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>397648		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>397650		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>397658		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>397660		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>397668		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>397670		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>397678		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397680		00 1b 21 40 23 24 25 5e		SC_US_CTRL_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>397688		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>397690		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>397698		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>3976a0		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>3976a8		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>3976b0		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>3976b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>3976c0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>3976c8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>3976d0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>3976d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>3976e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>3976e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>3976f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>3976f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F

;******  Return to file: src/kernel.asm


;******  Processing file: src/drivers/mouse_driver.asm

.397700						IINITMOUSE
.397700		48		pha		                PHA
.397701		da		phx		                PHX
.397702		8b		phb		                PHB
.397703		0b		phd		                PHD
.397704		08		php		                PHP
.397705		48		pha		                PHA             ; begin setdbr macro
.397706		08		php		                PHP
.397707		e2 20		sep #$20	                SEP #$20        ; set A short
.397709		a9 00		lda #$00	                LDA #0
.39770b		48		pha		                PHA
.39770c		ab		plb		                PLB
.39770d		28		plp		                PLP
.39770e		68		pla		                PLA             ; end setdbr macro
.39770f		48		pha		                PHA             ; begin setdp macro
.397710		08		php		                PHP
.397711		c2 20		rep #$20	                REP #$20        ; set A long
.397713		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.397716		5b		tcd		                TCD
.397717		28		plp		                PLP
.397718		68		pla		                PLA             ; end setdp macro
.397719		78		sei		                SEI
.39771a		e2 20		sep #$20	                SEP #$20        ; set A short
.39771c		c2 10		rep #$10	                REP #$10        ; set X long
.39771e		18		clc		                CLC
.39771f		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.397722		20 00 78	jsr $397800	DO_CMD_A9_AGAIN JSR Poll_Inbuf_Mouse_TimeOut
.397725		b0 0b		bcs $397732	                BCS mouse_init_fail
.397727		a9 a9		lda #$a9	                LDA #$A9                        ; Tests second PS2 Channel
.397729		8f 64 10 af	sta $af1064	                STA @l KBD_CMD_BUF
.39772d		20 d8 77	jsr $3977d8	                JSR Poll_Outbuf_Mouse_TimeOut
.397730		90 2b		bcc $39775d	                BCC mouse_found
.397732		a9 00		lda #$00	mouse_init_fail LDA #0                          ; Disable the mouse pointer
.397734		8f 00 07 af	sta $af0700	                STA @l MOUSE_PTR_CTRL_REG_L
.397738		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Make sure the mouse interrupt is disabled
.39773c		09 80		ora #$80	                ORA #FNX0_INT07_MOUSE
.39773e		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.397742		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1         ; Read the Pending Register &
.397746		29 01		and #$01	                AND #FNX1_INT00_KBD
.397748		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1         ; Writing it back will clear the Active Bit
.39774c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.397750		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.397752		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.397756		28		plp		                PLP                             ; Return failure
.397757		2b		pld		                PLD
.397758		ab		plb		                PLB
.397759		fa		plx		                PLX
.39775a		68		pla		                PLA
.39775b		38		sec		                SEC
.39775c		6b		rtl		                RTL
.39775d		af 60 10 af	lda $af1060	mouse_found     LDA @l KBD_OUT_BUF              ; Clear the Output buffer
.397761		c9 00		cmp #$00	                CMP #$00
.397763		d0 bd		bne $397722	                BNE DO_CMD_A9_AGAIN
.397765		a9 f5		lda #$f5	                LDA #$F5                        ; Disable the mouse
.397767		20 b7 77	jsr $3977b7	                JSR MOUSE_WRITE
.39776a		20 cc 77	jsr $3977cc	                JSR MOUSE_READ
.39776d		b0 c3		bcs $397732	                BCS mouse_init_fail
.39776f		a9 f6		lda #$f6	                LDA #$F6                        ;Tell the mouse to use default settings
.397771		20 b7 77	jsr $3977b7	                JSR MOUSE_WRITE
.397774		20 cc 77	jsr $3977cc	                JSR MOUSE_READ
.397777		b0 b9		bcs $397732	                BCS mouse_init_fail
.397779		a9 e8		lda #$e8	                LDA #$E8
.39777b		20 b7 77	jsr $3977b7	                JSR MOUSE_WRITE
.39777e		20 cc 77	jsr $3977cc	                JSR MOUSE_READ
.397781		b0 af		bcs $397732	                BCS mouse_init_fail
.397783		a9 00		lda #$00	                LDA #$00
.397785		20 b7 77	jsr $3977b7	                JSR MOUSE_WRITE
.397788		20 cc 77	jsr $3977cc	                JSR MOUSE_READ
.39778b		b0 a5		bcs $397732	                BCS mouse_init_fail
.39778d		a9 f4		lda #$f4	                LDA #$F4                        ; Enable the Mouse
.39778f		20 b7 77	jsr $3977b7	                JSR MOUSE_WRITE
.397792		20 cc 77	jsr $3977cc	                JSR MOUSE_READ
.397795		b0 9b		bcs $397732	                BCS mouse_init_fail
.397797		a9 00		lda #$00	                LDA #$00
.397799		8d e0 00	sta $00e0	                STA @w MOUSE_IDX
.39779c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.3977a0		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3977a2		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.3977a6		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Enable the mouse interrupt
.3977aa		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.3977ac		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.3977b0		28		plp		mouse_init_ok   PLP
.3977b1		2b		pld		                PLD
.3977b2		ab		plb		                PLB
.3977b3		fa		plx		                PLX
.3977b4		68		pla		                PLA
.3977b5		18		clc		                CLC
.3977b6		6b		rtl		                RTL
.3977b7						MOUSE_WRITE
.3977b7		e2 20		sep #$20	                SEP #$20        ; set A short
.3977b9		48		pha		                PHA
.3977ba		20 f3 77	jsr $3977f3	                JSR Poll_Inbuf          ; Test bit $01 (if 2, Full)
.3977bd		a9 d4		lda #$d4	                LDA #$D4
.3977bf		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF         ; KBD_CMD_BUF		= $AF1064
.3977c3		20 f3 77	jsr $3977f3	                JSR Poll_Inbuf
.3977c6		68		pla		                PLA
.3977c7		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF        ; KBD_DATA_BUF	= $AF1060
.3977cb		60		rts		                RTS
.3977cc						MOUSE_READ
.3977cc		e2 20		sep #$20	                SEP #$20        ; set A short
.3977ce		20 d8 77	jsr $3977d8	                JSR Poll_Outbuf_Mouse_TimeOut   ; Test bit $01 (if 1, Full)
.3977d1		b0 04		bcs $3977d7	                BCS done
.3977d3		af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF        ; KBD_INPT_BUF	= $AF1060
.3977d7		60		rts		done            RTS
.3977d8						Poll_Outbuf_Mouse_TimeOut
.3977d8		e2 20		sep #$20	                SEP #$20        ; set A short
.3977da		c2 10		rep #$10	                REP #$10        ; set X long
.3977dc		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.3977df		af 64 10 af	lda $af1064	wait            LDA STATUS_PORT
.3977e3		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.3977e5		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.3977e7		f0 08		beq $3977f1	                BEQ ret_success
.3977e9		ca		dex		                DEX
.3977ea		e0 00 00	cpx #$0000	                CPX #$0000
.3977ed		d0 f0		bne $3977df	                BNE wait
.3977ef		38		sec		                SEC                     ; Return timeout error
.3977f0		60		rts		                RTS
.3977f1		18		clc		ret_success     CLC                     ; Return success
.3977f2		60		rts		                RTS
.3977f3						Poll_Inbuf
.3977f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3977f5		af 64 10 af	lda $af1064	wait            LDA STATUS_PORT         ; Load Status Byte
.3977f9		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.3977fb		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.3977fd		f0 f6		beq $3977f5	                BEQ wait
.3977ff		60		rts		                RTS
.397800						Poll_Inbuf_Mouse_TimeOut
.397800		e2 20		sep #$20	                SEP #$20        ; set A short
.397802		c2 10		rep #$10	                REP #$10        ; set X long
.397804		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.397807		af 64 10 af	lda $af1064	wait            LDA STATUS_PORT
.39780b		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.39780d		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.39780f		d0 08		bne $397819	                BNE ret_success
.397811		ca		dex		                DEX
.397812		e0 00 00	cpx #$0000	                CPX #$0000
.397815		d0 f0		bne $397807	                BNE wait
.397817		38		sec		                SEC                     ; Return timeout error
.397818		60		rts		                RTS
.397819		18		clc		ret_success     CLC                     ; Return success
.39781a		60		rts		                RTS
.39781b						MOUSE_INTERRUPT
.39781b		8b		phb		                PHB
.39781c		0b		phd		                PHD
.39781d		08		php		                PHP
.39781e						                setasx
.39781e		78		sei		                SEI
.39781f		48		pha		                PHA             ; begin setdbr macro
.397820		08		php		                PHP
.397821		e2 20		sep #$20	                SEP #$20        ; set A short
.397823		a9 00		lda #$00	                LDA #0
.397825		48		pha		                PHA
.397826		ab		plb		                PLB
.397827		28		plp		                PLP
.397828		68		pla		                PLA             ; end setdbr macro
.397829		48		pha		                PHA             ; begin setdp macro
.39782a		08		php		                PHP
.39782b		c2 20		rep #$20	                REP #$20        ; set A long
.39782d		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.397830		5b		tcd		                TCD
.397831		28		plp		                PLP
.397832		68		pla		                PLA             ; end setdp macro
.397833		ae e0 00	ldx $00e0	                LDX @w MOUSE_IDX                ; Get the # of the mouse byte to write
.397836		af 60 10 af	lda $af1060	                LDA @l KBD_INPT_BUF             ; Get the byte from the PS/2 interface
.39783a		9f 06 07 af	sta $af0706,x	                STA @l MOUSE_PTR_BYTE0,X        ; Store it into the correct Vicky register
.39783e		e8		inx		next_byte       INX                             ; Move to the next byte
.39783f		e0 03 00	cpx #$0003	                CPX #$03                        ; Have we written 3 bytes?
.397842		d0 1b		bne $39785f	                BNE save_ptr                    ; No: return and wait for the next mouse interrupt
.397844		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.397848		85 e1		sta $e1		                STA @b MOUSE_POS_X_LO
.39784a		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.39784e		85 e2		sta $e2		                STA @b MOUSE_POS_X_HI
.397850		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.397854		85 e3		sta $e3		                STA @b MOUSE_POS_Y_LO
.397856		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.39785a		85 e4		sta $e4		                STA @b MOUSE_POS_Y_HI
.39785c		a2 00 00	ldx #$0000	                LDX #0                          ; Reset our state machine to the beginning
.39785f		8e e0 00	stx $00e0	save_ptr        STX @w MOUSE_IDX                ; Save our next byte position (state)
.397862		28		plp		                PLP
.397863		2b		pld		                PLD
.397864		ab		plb		                PLB
.397865		6b		rtl		                RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/SplashScreenCode/boot_sound.asm

.397866						BOOT_SOUND
.397866		48		pha		                PHA
.397867		da		phx		                PHX
.397868		08		php		                PHP
.397869		e2 20		sep #$20	                SEP #$20        ; set A short
.39786b		a9 00		lda #$00	                LDA #0
.39786d		a2 00 00	ldx #$0000	                LDX #0
.397870		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.397874		e8		inx		                INX                             ; Move to the next SID register
.397875		e0 18 00	cpx #$0018	                CPX #24
.397878		d0 f6		bne $397870	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.39787a		a9 29		lda #$29	                LDA #$29                        ; Attack = 2, Decay = 9
.39787c		8f 05 e4 af	sta $afe405	                STA @l SID0_V1_ATCK_DECY
.397880		8f 0c e4 af	sta $afe40c	                STA @l SID0_V2_ATCK_DECY
.397884		8f 13 e4 af	sta $afe413	                STA @l SID0_V3_ATCK_DECY
.397888		a9 1f		lda #$1f	                LDA #$1F                        ; Sustain = 1, Release = 5
.39788a		8f 06 e4 af	sta $afe406	                STA @l SID0_V1_SSTN_RLSE
.39788e		8f 0d e4 af	sta $afe40d	                STA @l SID0_V2_SSTN_RLSE
.397892		8f 14 e4 af	sta $afe414	                STA @l SID0_V3_SSTN_RLSE
.397896		a9 0f		lda #$0f	                LDA #15                         ; Set the volume to max
.397898		8f 18 e4 af	sta $afe418	                STA @l SID0_MODE_VOL
.39789c		a9 60		lda #$60	                LDA #96                         ; Set voice 1 to F-3
.39789e		8f 00 e4 af	sta $afe400	                STA @l SID0_V1_FREQ_LO
.3978a2		a9 16		lda #$16	                LDA #22
.3978a4		8f 01 e4 af	sta $afe401	                STA @l SID0_V1_FREQ_HI
.3978a8		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.3978aa		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.3978ae		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.3978b1		22 5f 10 39	jsl $39105f	                JSL ILOOP_MS
.3978b5		a9 31		lda #$31	                LDA #49                         ; Set voice 2 to A-3
.3978b7		8f 07 e4 af	sta $afe407	                STA @l SID0_V2_FREQ_LO
.3978bb		a9 08		lda #$08	                LDA #8
.3978bd		8f 08 e4 af	sta $afe408	                STA @l SID0_V2_FREQ_HI
.3978c1		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.3978c3		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.3978c7		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.3978ca		22 5f 10 39	jsl $39105f	                JSL ILOOP_MS
.3978ce		a9 87		lda #$87	                LDA #135                        ; Set voice 3 to C-3
.3978d0		8f 0e e4 af	sta $afe40e	                STA @l SID0_V3_FREQ_LO
.3978d4		a9 21		lda #$21	                LDA #33
.3978d6		8f 0f e4 af	sta $afe40f	                STA @l SID0_V3_FREQ_HI
.3978da		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.3978dc		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.3978e0		a2 20 4e	ldx #$4e20	                LDX #20000                      ; Hold down the keys, so to speak... for a while
.3978e3		22 5f 10 39	jsl $39105f	                JSL ILOOP_MS
.3978e7		a9 10		lda #$10	                LDA #$10                        ; Release the keys...
.3978e9		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.3978ed		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.3978f1		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.3978f5		a9 0e		lda #$0e	                LDA #14
.3978f7		8f 18 e4 af	sta $afe418	dampen          STA @l SID0_MODE_VOL
.3978fb		a2 64 00	ldx #$0064	                LDX #100
.3978fe		22 5f 10 39	jsl $39105f	                JSL ILOOP_MS
.397902		3a		dec a		                DEC A
.397903		d0 f2		bne $3978f7	                BNE dampen
.397905		28		plp		                PLP
.397906		fa		plx		                PLX
.397907		68		pla		                PLA
.397908		6b		rtl		                RTL

;******  Return to file: src/kernel.asm

.397909						KERNEL_DATA
>397909		20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>397911		0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>397921		4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>397931		58 20 0d
>397934		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>39793c		0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>39794c		20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>39795c		20 20 0d
>39795f		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>397967		0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>397977		4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>397987		20 20 0d
>39798a		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>397992		0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>3979a2		4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>3979b2		20 20 0d
>3979b5		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>3979bd		0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>3979cd		20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>3979dd		20 20 0d
>3979e0		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>3979e8		45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>3979f8		30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>397a08		0d
>397a09		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com -- Kernel: "
>397a11		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 2d 20 4b 65
>397a21		72 6e 65 6c 3a 20

;******  Processing file: src/version.asm

>397a27		76 30 2e 34 2e 30 2d 61		.text "v0.4.0-alpha+320 (2021-05-31)"
>397a2f		6c 70 68 61 2b 33 32 30 20 28 32 30 32 31 2d 30
>397a3f		35 2d 33 31 29

;******  Return to file: src/kernel.asm

>397a44		0d 00				                .text $0D,$00
>397a46		90 90 90 90 90 90 d0 d0		  greet_clr_line1 .text $90, $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>397a4e		b0 b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397a5e		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397a6e		f0 f0
>397a70		90 90 90 90 90 d0 d0 b0		  greet_clr_line2 .text $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>397a78		b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397a88		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397a98		f0 f0
>397a9a		90 90 90 90 d0 d0 b0 b0		  greet_clr_line3 .text $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>397aa2		a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397ab2		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397ac2		f0 f0
>397ac4		90 90 90 d0 d0 b0 b0 a0		  greet_clr_line4 .text $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>397acc		a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397adc		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397aec		f0 f0
>397aee		90 90 d0 d0 b0 b0 a0 a0		  greet_clr_line5 .text $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>397af6		e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397b06		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>397b16		f0 f0
>397b18		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>397b1c		00 00 80 ff			                .text $00, $00, $80, $FF
>397b20		00 80 00 ff			                .text $00, $80, $00, $FF
>397b24		80 00 00 ff			                .text $80, $00, $00, $FF
>397b28		00 80 80 ff			                .text $00, $80, $80, $FF
>397b2c		80 80 00 ff			                .text $80, $80, $00, $FF
>397b30		80 00 80 ff			                .text $80, $00, $80, $FF
>397b34		80 80 80 ff			                .text $80, $80, $80, $FF
>397b38		00 45 ff ff			                .text $00, $45, $FF, $FF
>397b3c		13 45 8b ff			                .text $13, $45, $8B, $FF
>397b40		00 00 20 ff			                .text $00, $00, $20, $FF
>397b44		00 20 00 ff			                .text $00, $20, $00, $FF
>397b48		20 00 00 ff			                .text $20, $00, $00, $FF
>397b4c		20 20 20 ff			                .text $20, $20, $20, $FF
>397b50		40 40 40 ff			                .text $40, $40, $40, $FF
>397b54		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>397b58		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>397b5c		00 00 80 ff			                .text $00, $00, $80, $FF
>397b60		00 80 00 ff			                .text $00, $80, $00, $FF
>397b64		80 00 00 ff			                .text $80, $00, $00, $FF
>397b68		00 20 20 ff			                .text $00, $20, $20, $FF
>397b6c		20 20 00 ff			                .text $20, $20, $00, $FF
>397b70		20 00 20 ff			                .text $20, $00, $20, $FF
>397b74		20 20 20 ff			                .text $20, $20, $20, $FF
>397b78		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>397b7c		13 45 8b ff			                .text $13, $45, $8B, $FF
>397b80		00 00 20 ff			                .text $00, $00, $20, $FF
>397b84		00 20 00 ff			                .text $00, $20, $00, $FF
>397b88		40 00 00 ff			                .text $40, $00, $00, $FF
>397b8c		10 10 10 ff			                .text $10, $10, $10, $FF
>397b90		40 40 40 ff			                .text $40, $40, $40, $FF
>397b94		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>397b98		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>397ba0		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>397bb0		00
>397bb1		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>397bb9		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>397bc9		00
>397bca		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>397bd2		20 45 78 65 63 75 74 65 64 2e 0d 00
>397bde		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>397be6		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>397bf6		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>397bfe		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>397c0e		64 2e 2e 2e 0d 00
>397c14		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>397c1c		20 50 72 65 73 65 6e 74 0d 00
>397c26		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>397c2e		65 73 65 6e 74 0d 00
>397c35		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>397c3d		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>397c4d		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>397c5d		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>397c65		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>397c75		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>397c82		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>397c8a		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>397c96		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>397c9e		54 55 52 45 20 46 4f 55 4e 44 2e 00
>397caa		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>397cb2		45 44 2e 00
>397cb6		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>397cbe		47 20 42 4d 50 20 50 41 52 53 45 52 00
>397ccb		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>397cd3		50 72 65 73 65 6e 74 3a 00
>397cdc		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>397ce4		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>397cf4		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>397d02		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>397d0a		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>397d1a		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>397d27		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>397d2f		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>397d3f		72 64 2e 00
>397d43		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>397d4b		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>397d5b		49 44 45 20 64 72 69 76 65 2e 00
>397d66		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>397d6e		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>397d7e		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>397d8c		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>397d94		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>397da3		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>397dab		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>397dba		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>397dc2		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>397dd2		2e 2e 00
>397dd5		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>397ddd		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>397de5		52 4f 52 00
>397de9		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>397df1		38 39 41 42 43 44 45 46 00
>397dfa						.align 256
>397e00		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397e08		37 38 39 30 2d 3d 08 09
>397e10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397e18		6f 70 5b 5d 0d 00 61 73
>397e20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397e28		27 60 00 5c 7a 78 63 76
>397e30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>397e38		00 20 00 81 82 83 84 85
>397e40		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>397e48		11 00 00 9d 00 1d 00 00
>397e50		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>397e58		8c 00 00 00 00 00 00 00
>397e60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397e68		00 00 00 00 00 00 00 00
>397e70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397e78		00 00 00 00 00 00 00 00
>397e80		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>397e88		26 2a 28 29 5f 2b 08 09
>397e90		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>397e98		4f 50 7b 7d 0d 00 41 53
>397ea0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>397ea8		22 7e 00 7c 5a 58 43 56
>397eb0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397eb8		00 20 00 00 00 00 00 00
>397ec0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397ec8		00 00 00 00 00 00 00 00
>397ed0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397ed8		00 00 00 00 00 00 00 00
>397ee0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397ee8		00 00 00 00 00 00 00 00
>397ef0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397ef8		00 00 00 00 00 00 00 00
>397f00		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397f08		37 38 39 30 2d 3d 08 09
>397f10		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>397f18		0f 10 5b 5d 0d 00 01 13
>397f20		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>397f28		27 00 00 5c 1a 18 03 16
>397f30		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397f38		00 20 00 00 00 00 00 00
>397f40		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397f48		00 00 00 00 00 00 00 00
>397f50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397f58		00 00 00 00 00 00 00 00
>397f60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397f68		00 00 00 00 00 00 00 00
>397f70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397f78		00 00 00 00 00 00 00 00
>397f80		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397f88		37 38 39 30 2d 3d 08 09
>397f90		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397f98		6f 70 5b 5d 0d 00 61 73
>397fa0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397fa8		27 60 00 5c 7a 78 63 76
>397fb0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397fb8		00 20 00 00 00 00 00 00
>397fc0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397fc8		00 00 00 00 00 00 00 00
>397fd0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397fd8		00 00 00 00 00 00 00 00
>397fe0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397fe8		00 00 00 00 00 00 00 00
>397ff0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397ff8		00 00 00 00 00 00 00 00
>398000		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398008		37 38 39 30 2d 3d 08 09
>398010		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398018		6f 70 5b 5d 0d 00 61 73
>398020		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>398028		27 60 00 5c 7a 78 63 76
>398030		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398038		00 20 00 00 00 00 00 00
>398040		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398048		00 00 00 00 00 00 00 00
>398050		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398058		00 00 00 00 00 00 00 00
>398060		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398068		00 00 00 00 00 00 00 00
>398070		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398078		00 00 00 00 00 00 00 00
>398080		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>398088		00 00 00 00 00 00 00 00
>398090		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>398098		00 00 00 00 00 00 00 00
>3980a0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3980a8		00 00 00 00 00 00 00 00
>3980b0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3980b8		00 00 00 00 00 00 00 00
>3980c0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>3980c8		11 00 00 9d 00 1d 00 05
>3980d0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3980d8		00 00 00 00 00 00 00 00
>3980e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3980e8		00 00 00 00 00 00 00 00
>3980f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3980f8		00 00 00 00 00 00 00 00
>398100						.align 256
>398100		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>398108		34 37 3a 3d 3f 41 44 46
>398110		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>398118		57 58 5a 5b 5d 5e 60 61
>398120		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>398128		6d 6f 70 71 72 73 75 76
>398130		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>398138		80 81 82 83 84 85 86 87
>398140		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>398148		8f 90 91 92 93 93 94 95
>398150		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>398158		9d 9e 9e 9f a0 a1 a2 a2
>398160		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>398168		a9 aa ab ab ac ad ae ae
>398170		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>398178		b5 b5 b6 b7 b7 b8 b9 b9
>398180		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>398188		bf c0 c0 c1 c2 c2 c3 c4
>398190		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>398198		c9 ca ca cb cb cc cd cd
>3981a0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3981a8		d2 d3 d4 d4 d5 d5 d6 d6
>3981b0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3981b8		db dc dc dd de de df df
>3981c0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3981c8		e4 e4 e5 e5 e6 e6 e7 e7
>3981d0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3981d8		ec ec ed ed ee ee ef ef
>3981e0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3981e8		f4 f4 f5 f5 f6 f6 f7 f7
>3981f0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3981f8		fb fc fc fd fd fe fe ff
>398200						.align 256
>398200		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>398208		25 27 2a 2c 2e 30 32 34
>398210		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>398218		44 46 47 49 4a 4c 4d 4f
>398220		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>398228		5b 5c 5d 5e 60 61 62 63
>398230		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>398238		6d 6e 70 71 72 73 74 75
>398240		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>398248		7e 7f 80 81 82 83 84 84
>398250		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>398258		8d 8e 8e 8f 90 91 92 93
>398260		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>398268		9a 9b 9c 9d 9e 9f 9f a0
>398270		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>398278		a7 a8 a9 aa aa ab ac ad
>398280		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>398288		b3 b4 b5 b6 b6 b7 b8 b8
>398290		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>398298		bf bf c0 c1 c2 c2 c3 c4
>3982a0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3982a8		ca ca cb cc cc cd ce ce
>3982b0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3982b8		d4 d5 d6 d6 d7 d7 d8 d9
>3982c0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3982c8		de df e0 e0 e1 e1 e2 e3
>3982d0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3982d8		e8 e9 e9 ea ea eb ec ec
>3982e0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3982e8		f1 f2 f3 f3 f4 f4 f5 f5
>3982f0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3982f8		fb fb fc fc fd fd fe ff
>398300						.align 256
>398300		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>398308		83 dd ce 39 cd c5 3b 15
>398310		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>398318		87 12 31 65 89 27 88 42
>398320		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>398328		94 ce 56 ec fe da 58 c9
>398330		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>398338		d0 10 2c b2 4b ea 32 61
>398340		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>398348		a1 e6 ca 2d b3 ce b0 79
>398350		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>398358		5f e3 fb bd 15 2e be f5
>398360		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>398368		8d 8f 2c 80 0a 5e 99 36
>398370		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>398378		13 52 44 2f e3 ef 44 a2
>398380		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>398388		be 23 02 58 0a 52 5e b4
>398390		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>398398		d5 cf 3e df c4 9e da bb
>3983a0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3983a8		77 7d b1 3b 4a 68 35 6e
>3983b0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3983b8		b5 8f 44 63 55 6f e1 50
>3983c0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3983c8		57 74 b9 bd 05 14 50 eb
>3983d0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3983d8		44 bc ec db 22 58 fc be
>3983e0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3983e8		24 aa 82 11 5c 9f 43 4d
>3983f0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3983f8		3e 3d 66 7e 0a 1c 6b 74
>398400						.align 16
>398400		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>398408		01 01 01 00 00 00 00 00
>398410		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>398418		ff ff ff 01 00 00 00 00
>398420		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>398428		01 55 ff ff 01 00 00 00
>398430		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>398438		ff ff ff ff 01 00 00 00
>398440		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>398448		ff ff 01 ff ff 01 00 00
>398450		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>398458		01 ff ff 01 ff 01 00 00
>398460		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>398468		ff 01 ff ff ff 01 00 00
>398470		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>398478		ff ff ff ff ff 01 01 00
>398480		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>398488		ff ff ff ff 01 ff ff 01
>398490		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>398498		ff ff ff ff ff ff ff 01
>3984a0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3984a8		55 55 01 ff ff 55 01 00
>3984b0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3984b8		01 01 55 ff 55 01 00 00
>3984c0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3984c8		01 55 55 55 01 00 00 00
>3984d0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3984d8		01 55 55 01 00 00 00 00
>3984e0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3984e8		00 01 01 00 00 00 00 00
>3984f0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3984f8		00 00 00 00 00 00 00 00
>3a0000		5c 72 8a 3a 5c 84 70 3a		        .binary "binaries/basic816_3A0000.bin"
>3a0008		5c 76 27 3a 5c ba 02 3a 5c 58 00 3a 5c b8 00 3a
>3a0018		5c 0f 04 3a 5c 5e 02 3a 5c 79 02 3a 5c 80 02 3a
>3a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>3a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>3a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>3a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078		0d d0 03 4c b1 00 c9 08 d0 1a e0 00 00 f0 ed da
>3a0088		bf 01 4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0
>3a0098		fa ca 80 0e c9 20 90 d4 9f 00 4c 00 e8 20 18 00
>3a00a8		80 ca a9 08 20 18 00 80 c3 a9 00 20 1c 00 28 60
>3a00b8		da 5a 8b 0b 08 22 4c 10 00 28 2b ab 7a fa 60 08
>3a00c8		e2 30 48 a9 1b 20 18 00 a9 5b 20 18 00 68 20 18
>3a00d8		00 28 60 0b 8b 08 08 e2 20 48 a9 00 48 ab 68 28
>3a00e8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 3b 38 e9 04
>3a00f8		00 1b e2 20 a9 00 83 02 83 03 83 04 20 14 00 c9
>3a0108		00 f0 f9 83 01 a3 02 d0 35 a3 01 c9 08 d0 0a 20
>3a0118		18 00 a9 50 20 c7 00 80 e3 c9 0d f0 0a c9 1b d0
>3a0128		06 a9 01 83 02 80 d5 20 18 00 a3 01 85 0c c2 20
>3a0138		3b 18 69 04 00 1b e2 20 a5 0c 28 2b ab 60 c9 01
>3a0148		d0 10 a3 01 c9 5b f0 03 82 a9 ff a9 02 83 02 82
>3a0158		aa ff c9 02 d0 29 a3 01 c9 41 90 0c c9 45 b0 08
>3a0168		a3 01 20 c7 00 82 8c ff c9 30 90 10 c9 3a b0 0c
>3a0178		38 e9 30 83 03 a9 03 83 02 82 80 ff 82 75 ff c9
>3a0188		03 d0 41 a3 01 c9 30 90 29 c9 3a b0 25 a3 03 8f
>3a0198		00 01 00 a9 00 8f 01 01 00 8f 03 01 00 a9 0a 8f
>3a01a8		02 01 00 a3 01 38 e9 30 18 6f 04 01 00 83 03 82
>3a01b8		4a ff c9 3b d0 07 a9 04 83 02 82 3f ff c9 7e f0
>3a01c8		40 82 30 ff c9 04 f0 03 82 5f ff a3 01 c9 30 90
>3a01d8		29 c9 3a b0 25 a3 04 8f 00 01 00 a9 00 8f 01 01
>3a01e8		00 8f 03 01 00 a9 0a 8f 02 01 00 a3 01 38 e9 30
>3a01f8		18 6f 04 01 00 83 04 82 02 ff c9 7e f0 03 82 f3
>3a0208		fe a3 03 c9 02 f0 0b c9 03 f0 0b c9 18 f0 0f 82
>3a0218		e2 fe a9 40 80 02 a9 50 20 c7 00 82 d6 fe a5 d2
>3a0228		d0 10 a3 04 c9 08 d0 0a a9 1b 20 18 00 a9 5f 20
>3a0238		18 00 82 bf fe 08 e2 20 af 00 00 af 89 3c f0 08
>3a0248		09 03 8f 00 00 af 80 0c 09 01 8f 00 00 af a9 00
>3a0258		22 3c 10 00 28 60 08 e2 20 c9 00 f0 08 af 10 00
>3a0268		af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af 28
>3a0278		60 08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20 c2
>3a0288		10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f 00
>3a0298		c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00 5b
>3a02a8		68 28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a fa
>3a02b8		68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a02c8		c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2 20
>3a02d8		29 ff 00 85 0a af 11 00 00 8f 08 01 00 af 1c 00
>3a02e8		00 3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08 a5
>3a02f8		0a 69 00 00 85 0a e2 20 af 0f 00 00 85 8f a0 00
>3a0308		00 a2 00 00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0 f4
>3a0318		af 0f 00 00 3a aa bf 00 4f 00 c9 20 d0 09 a9 00
>3a0328		9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 20 69
>3a0338		03 a2 00 00 a9 00 9f 18 f0 3a e8 e0 40 00 d0 f6
>3a0348		a9 80 8f b4 08 00 e2 20 a9 00 8f 89 0f 00 a9 00
>3a0358		8f 00 02 af 8f 0c 02 af 8f 18 02 af 8f 24 02 af
>3a0368		60 08 e2 20 af 0e 08 af 09 08 8f 0e 08 af af 00
>3a0378		08 af 8f 84 e8 af af 02 08 af 8f 85 e8 af a9 03
>3a0388		8f 86 e8 af af 0e 08 af 29 f7 8f 0e 08 af ea ea
>3a0398		ea a9 01 8f 86 e8 af 28 60 08 e2 20 48 48 a9 00
>3a03a8		22 3c 10 00 68 22 18 10 00 af 89 0f 00 29 01 d0
>3a03b8		f8 68 28 60 08 e2 20 48 48 a9 01 22 3c 10 00 68
>3a03c8		22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60 08
>3a03d8		c2 20 48 e2 20 a9 0d 20 18 00 c2 20 68 28 60 08
>3a03e8		22 78 10 00 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a03f8		68 28 e2 20 a5 b6 1a 85 b6 cf 13 00 00 90 05 20
>3a0408		14 00 64 b6 2b 28 60 da 5a 0b 08 08 c2 20 48 a9
>3a0418		00 08 5b 68 28 e2 20 c2 10 8f b5 08 00 af b4 08
>3a0428		00 29 20 f0 07 af b5 08 00 20 28 00 af b4 08 00
>3a0438		29 80 f0 07 af b5 08 00 20 a1 03 af b4 08 00 29
>3a0448		40 f0 14 af b5 08 00 20 bc 03 af b5 08 00 c9 0d
>3a0458		d0 05 a9 0a 20 bc 03 28 2b 7a fa 60 08 e2 20 bd
>3a0468		00 00 f0 06 20 18 00 e8 80 f5 28 60 08 c2 20 48
>3a0478		48 4a 4a 4a 4a 4a 4a 4a 4a 20 8e 04 68 29 ff 00
>3a0488		20 8e 04 68 28 60 08 c2 20 48 e2 20 48 4a 4a 4a
>3a0498		4a 20 a5 04 68 20 a5 04 c2 20 68 28 60 08 c2 30
>3a04a8		da 29 0f 00 aa bf 00 d0 3a 20 18 00 fa 28 60 08
>3a04b8		c2 30 48 da 5a 8b 0b c2 30 a3 0b 18 69 03 00 aa
>3a04c8		e2 20 a9 3a 48 ab bd 00 00 f0 06 20 a1 03 e8 80
>3a04d8		f5 c2 30 2b ab 7a fa 68 28 60 08 e2 20 c9 5b b0
>3a04e8		04 c9 41 b0 0b c9 7b b0 04 c9 61 b0 03 28 18 60
>3a04f8		28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 03 28 18
>3a0508		60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 13 c9
>3a0518		67 b0 04 c9 61 b0 0b c9 47 b0 04 c9 41 b0 03 28
>3a0528		18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 12
>3a0538		c9 67 b0 04 c9 61 b0 0f c9 47 b0 04 c9 41 b0 09
>3a0548		28 60 38 e9 30 80 f9 29 df 38 e9 37 80 f2 08 e2
>3a0558		20 c9 7b b0 06 c9 61 90 02 29 df 28 60 08 e2 20
>3a0568		c2 10 bd 00 00 f0 09 20 56 05 9d 00 00 e8 80 f2
>3a0578		28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>3a0588		48 06 23 26 25 a5 23 85 0c a5 25 85 0e 06 0c 26
>3a0598		0e 06 0c 26 0e 18 a5 23 65 0c 85 23 a5 25 65 0e
>3a05a8		85 25 68 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a05b8		68 28 c2 20 a5 23 8f 1a 01 00 a9 0a 00 8f 18 01
>3a05c8		00 af 1c 01 00 85 23 64 25 af 1e 01 00 85 29 64
>3a05d8		2b e2 20 a9 00 85 27 85 2d 2b 28 60 08 0b 08 c2
>3a05e8		20 48 a9 00 08 5b 68 28 c2 20 a5 23 8f 1a 01 00
>3a05f8		a9 64 00 8f 18 01 00 af 1c 01 00 85 23 64 25 af
>3a0608		1e 01 00 85 29 64 2b e2 20 a9 00 85 27 85 2d 2b
>3a0618		28 60 08 c2 20 a5 23 d0 08 a5 25 d0 04 28 e2 02
>3a0628		60 28 c2 02 60 08 c2 30 a9 ff ff 85 23 85 25 e2
>3a0638		20 a9 00 85 27 28 60 08 c2 30 a9 00 00 85 23 85
>3a0648		25 e2 20 a9 00 85 27 28 60 08 e2 20 a5 27 c9 00
>3a0658		f0 07 c9 01 d0 05 20 0a 5c 28 60 08 c2 20 48 a9
>3a0668		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a0678		ff 00 20 5e 1e e2 20 dc d4 08 08 e2 20 a5 2d c9
>3a0688		00 f0 37 c9 01 d0 35 c2 20 a5 25 48 a5 23 48 c2
>3a0698		20 a5 29 85 23 a5 2b 85 25 e2 20 a9 01 85 27 20
>3a06a8		0a 5c c2 20 a5 23 85 29 a5 25 85 2b e2 20 a9 00
>3a06b8		85 2d c2 20 68 85 23 68 85 25 28 60 08 c2 20 48
>3a06c8		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>3a06d8		29 ff 00 20 5e 1e e2 20 dc d4 08 08 e2 20 a5 27
>3a06e8		c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a06f8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>3a0708		e2 20 dc d4 08 08 e2 20 a5 27 c9 00 f0 07 c9 01
>3a0718		d0 0b 20 0a 5c c2 20 a5 25 d0 21 28 60 08 c2 20
>3a0728		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a0738		20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20 48
>3a0748		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>3a0758		29 ff 00 20 5e 1e e2 20 dc d4 08 08 e2 20 a5 27
>3a0768		c9 00 f0 07 c9 01 d0 11 20 0a 5c a5 26 d0 29 a5
>3a0778		25 d0 25 a5 24 d0 21 28 60 08 c2 20 48 a9 00 08
>3a0788		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a0798		20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a07a8		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a07b8		5e 1e e2 20 dc d4 08 08 e2 20 a5 27 c9 01 f0 26
>3a07c8		c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a07d8		a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>3a07e8		dc d4 08 20 04 5c 28 60 08 e2 20 a5 2d c9 01 f0
>3a07f8		26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0808		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>3a0818		20 dc d4 08 20 21 08 28 60 c2 20 a5 25 48 a5 23
>3a0828		48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9 00 85
>3a0838		27 20 04 5c c2 20 a5 23 85 29 a5 25 85 2b e2 20
>3a0848		a9 01 85 2d c2 20 68 85 23 68 85 25 60 08 e2 20
>3a0858		a5 27 c9 00 f0 23 c9 01 f0 2e 08 c2 20 48 a9 00
>3a0868		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a0878		00 20 5e 1e e2 20 dc d4 08 a5 2d c9 00 f0 16 c9
>3a0888		01 d0 d7 20 04 5c 80 0d a5 2d c9 01 f0 07 c9 00
>3a0898		d0 c8 20 21 08 e2 20 a5 27 28 60 08 e2 20 a5 27
>3a08a8		c9 02 d0 25 a5 2d c9 02 f0 24 08 c2 20 48 a9 00
>3a08b8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a08c8		00 20 5e 1e e2 20 dc d4 08 20 55 08 a5 27 28 60
>3a08d8		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 23
>3a08e8		64 25 e2 20 64 27 a7 00 c9 26 f0 44 e2 20 a7 00
>3a08f8		20 fb 04 90 76 20 7a 05 38 e9 30 c2 20 29 ff 00
>3a0908		18 65 23 85 23 a5 25 69 00 00 85 25 20 1d 21 80
>3a0918		db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a0928		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>3a0938		20 1d 21 a7 00 c9 48 f0 04 c9 68 d0 d4 20 1d 21
>3a0948		e2 20 a7 00 20 0c 05 90 22 20 2d 05 c2 20 06 23
>3a0958		26 25 06 23 26 25 06 23 26 25 06 23 26 25 29 ff
>3a0968		00 18 65 23 85 23 20 1d 21 80 d5 2b 28 60 08 c2
>3a0978		30 a5 04 f0 1c 38 a5 04 e5 1a a8 e2 20 b7 1a f0
>3a0988		10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0 ff ff d0
>3a0998		ec a9 00 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a09a8		c2 30 a5 1a 85 00 e2 20 a5 1c 85 02 20 3e 21 a7
>3a09b8		00 20 fb 04 90 0c 20 d8 08 c2 20 a5 23 85 d7 20
>3a09c8		3e 21 c2 20 a5 00 85 1a e2 20 a5 02 85 1c 20 ea
>3a09d8		09 e2 20 20 5b 0a c9 00 f0 05 20 06 0c 80 f4 2b
>3a09e8		28 60 08 c2 20 a5 1a 85 00 a5 1c 85 02 a2 00 00
>3a09f8		e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0 53 c9 3a
>3a0a08		f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0 10 c9
>3a0a18		72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72 d0 1a c8
>3a0a28		b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7 00 f0
>3a0a38		20 c9 4d f0 0a c9 6d f0 06 e8 20 1d 21 80 b3 a7
>3a0a48		00 c9 3a d0 03 20 1d 21 a9 03 85 1e a9 91 20 06
>3a0a58		0c 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0a68		20 a9 7f 85 1e c2 10 20 bb 0b a5 1e d0 03 4c fb
>3a0a78		0a c2 20 a5 1a 85 00 e2 20 a5 1c 85 02 c2 20 64
>3a0a88		04 64 06 e2 30 a0 00 b7 00 f0 da c9 91 f0 d6 c8
>3a0a98		c4 1e 90 f3 c2 10 a7 00 c9 22 d0 05 20 1d 0b 80
>3a0aa8		28 a5 1e c9 03 90 19 c2 20 a5 00 c5 1a d0 08 e2
>3a0ab8		20 a5 02 c5 1c f0 09 e2 20 a7 04 20 4d 51 b0 09
>3a0ac8		e2 20 20 2d 0b c9 00 d0 11 c2 20 a5 00 85 04 e2
>3a0ad8		20 a5 02 85 06 20 1d 21 80 a9 c9 81 d0 15 20 76
>3a0ae8		09 c9 00 f0 11 89 80 f0 08 c9 90 f0 04 a9 af 80
>3a0af8		02 a9 81 2b 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a0b08		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>3a0b18		e2 20 dc d4 08 08 e2 20 20 1d 21 a7 00 f0 04 c9
>3a0b28		22 d0 f5 28 60 da 5a 08 0b 08 c2 20 48 a9 00 08
>3a0b38		5b 68 28 c2 20 a5 04 d0 0a e2 20 a5 04 d0 04 a9
>3a0b48		00 80 0a e2 20 a7 04 20 4d 51 a9 00 2a 85 28 c2
>3a0b58		30 a9 fb 0c 85 08 e2 20 a9 3a 85 0a a2 80 00 e2
>3a0b68		20 a0 01 00 b7 08 f0 31 c5 1e d0 32 c2 30 a0 02
>3a0b78		00 b7 08 85 0c e2 20 a9 3a 85 0e a5 28 f0 07 a7
>3a0b88		0c 20 4d 51 b0 18 e2 10 a0 00 b7 00 20 56 05 d7
>3a0b98		0c d0 0b c8 c4 1e 90 f2 8a 2b 28 7a fa 60 c2 30
>3a0ba8		18 a5 08 69 08 00 85 08 e2 20 a5 0a 69 00 85 0a
>3a0bb8		e8 80 ac 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a0bc8		c2 30 a9 fb 0c 85 08 a9 3a 00 85 0a 64 0c e2 20
>3a0bd8		a0 01 00 b7 08 f0 1d c5 1e b0 06 c5 0c 90 02 85
>3a0be8		0c c2 20 18 a5 08 69 08 00 85 08 a5 0a 69 00 00
>3a0bf8		85 0a 80 da e2 20 a5 0c 85 1e ab 2b 28 60 08 0b
>3a0c08		08 c2 20 48 a9 00 08 5b 68 28 e2 20 87 00 c2 20
>3a0c18		18 a5 00 69 01 00 85 08 a5 02 69 00 00 85 0a e2
>3a0c28		10 a4 1e 88 e2 20 b7 08 87 08 f0 13 c2 20 18 a5
>3a0c38		08 69 01 00 85 08 a5 0a 69 00 00 85 0a 80 e5 2b
>3a0c48		28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69 fb 0c aa
>3a0c58		28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a0c68		e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 4a 0c
>3a0c78		bd 00 00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b 08
>3a0c88		c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a 48
>3a0c98		ab 68 28 c2 30 20 4a 0c bd 04 00 2b ab 28 60 08
>3a0ca8		8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a0cb8		a9 3a 48 ab 68 28 e2 20 c2 10 20 4a 0c bd 00 00
>3a0cc8		c2 20 29 f0 00 2b ab 28 60 08 8b 0b 08 c2 20 48
>3a0cd8		a9 00 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28
>3a0ce8		e2 20 c2 10 20 4a 0c bd 06 00 c2 20 29 ff 00 2b
>3a0cf8		ab 28 60 03 01 10 d0 e3 27 02 00 03 01 12 d0 23
>3a0d08		28 02 00 02 01 14 d0 5a 28 02 00 02 01 16 d0 91
>3a0d18		28 02 00 02 03 18 d0 9b 28 02 00 00 01 1c d0 ae
>3a0d28		28 02 00 04 02 1e d0 6c 2a 02 00 04 02 21 d0 2c
>3a0d38		2a 02 00 04 02 24 d0 ec 29 02 00 04 01 27 d0 2c
>3a0d48		29 02 00 04 01 29 d0 ac 29 02 00 04 01 2b d0 6c
>3a0d58		29 02 00 05 03 2d d0 16 29 01 00 06 03 31 d0 e8
>3a0d68		28 02 00 07 02 35 d0 ff 28 02 00 ff 01 38 d0 00
>3a0d78		00 00 00 40 01 3a d0 00 00 00 00 20 03 3c d0 7f
>3a0d88		41 00 00 20 05 40 d0 84 45 00 00 20 03 46 d0 cf
>3a0d98		44 00 00 20 04 4a d0 6f 44 00 00 20 03 4f d0 66
>3a0da8		44 00 00 20 02 53 d0 fe 43 00 00 50 04 56 d0 00
>3a0db8		00 00 00 50 04 5b d0 00 00 00 00 20 05 60 d0 41
>3a0dc8		43 00 00 20 06 66 d0 ba 43 00 00 20 03 6d d0 96
>3a0dd8		41 00 00 50 02 71 d0 00 00 00 00 50 04 74 d0 00
>3a0de8		00 00 00 20 04 79 d0 8a 42 00 00 20 02 7e d0 90
>3a0df8		41 00 00 20 04 81 d0 93 41 00 00 50 05 86 d0 00
>3a0e08		00 00 00 50 05 8c d0 00 00 00 00 20 04 92 d0 8d
>3a0e18		41 00 00 20 03 97 d0 c5 44 00 00 20 04 9b d0 60
>3a0e28		41 00 00 20 04 a0 d0 f0 40 00 00 20 05 a5 d0 86
>3a0e38		40 00 00 20 05 ab d0 13 40 00 00 20 03 b1 d0 0f
>3a0e48		40 00 00 20 04 b5 d0 f0 3e 00 00 20 04 ba d0 02
>3a0e58		40 00 00 20 07 bf d0 06 40 00 00 20 03 c7 d0 43
>3a0e68		3e 00 00 20 04 cb d0 ac 3d 00 00 00 01 d0 d0 ac
>3a0e78		2a 01 00 30 03 d2 d0 9c 4b 00 00 30 04 d6 d0 ec
>3a0e88		4b 00 00 30 05 db d0 b5 4c 00 00 30 05 e1 d0 42
>3a0e98		4c 00 00 30 04 e7 d0 14 4d 00 00 30 03 ec d0 69
>3a0ea8		4d 00 00 30 03 f0 d0 ae 4d 00 00 30 03 f4 d0 37
>3a0eb8		4e 00 00 30 03 f8 d0 c0 4e 00 00 30 03 fc d0 22
>3a0ec8		4f 00 00 30 04 00 d1 0e 4b 00 00 30 03 05 d1 ad
>3a0ed8		4a 00 00 30 04 09 d1 5f 4a 00 00 30 03 0e d1 09
>3a0ee8		4a 00 00 30 05 12 d1 40 49 00 00 30 06 18 d1 5f
>3a0ef8		48 00 00 30 04 1f d1 aa 47 00 00 10 03 24 d1 89
>3a0f08		50 00 00 10 03 28 d1 54 50 00 00 10 04 2c d1 5d
>3a0f18		6c 00 00 10 04 31 d1 a0 50 00 00 10 03 36 d1 84
>3a0f28		69 00 00 20 05 3a d1 2f 6b 00 00 10 04 40 d1 0a
>3a0f38		6c 00 00 20 05 45 d1 16 6d 00 00 20 03 4b d1 35
>3a0f48		6e 00 00 10 04 4f d1 a2 6d 00 00 20 06 54 d1 ab
>3a0f58		6e 00 00 20 04 5b d1 cf 6f 00 00 10 07 60 d1 51
>3a0f68		50 00 00 20 03 68 d1 3a 3d 00 00 20 05 6c d1 4a
>3a0f78		3c 00 00 20 09 72 d1 6b 2c 00 00 20 09 7c d1 f8
>3a0f88		2b 00 00 20 0a 86 d1 28 2c 00 00 20 07 91 d1 65
>3a0f98		2b 00 00 30 08 99 d1 61 46 00 00 20 07 a2 d1 fa
>3a0fa8		2a 00 00 30 08 aa d1 cb 46 00 00 20 08 b3 d1 b0
>3a0fb8		2d 00 00 20 08 bc d1 e4 2c 00 00 20 06 c5 d1 ea
>3a0fc8		2e 00 00 20 09 cc d1 f2 2f 00 00 20 04 d6 d1 4f
>3a0fd8		31 00 00 20 04 db d1 c0 31 00 00 20 04 e0 d1 59
>3a0fe8		32 00 00 20 06 e5 d1 95 33 00 00 20 08 ec d1 33
>3a0ff8		34 00 00 20 0a f5 d1 81 34 00 00 20 07 00 d2 b8
>3a1008		35 00 00 20 07 08 d2 36 36 00 00 20 08 10 d2 a8
>3a1018		36 00 00 20 06 19 d2 e5 36 00 00 20 07 20 d2 15
>3a1028		3a 00 00 50 06 28 d2 00 00 00 00 50 04 2f d2 00
>3a1038		00 00 00 20 06 34 d2 2a 3c 00 00 30 03 3b d2 78
>3a1048		4f 00 00 30 03 3f d2 30 47 00 00 30 03 43 d2 8b
>3a1058		4f 00 00 30 03 47 d2 a1 4f 00 00 30 03 4b d2 b7
>3a1068		4f 00 00 30 02 4f d2 cd 4f 00 00 30 04 52 d2 e3
>3a1078		4f 00 00 30 04 57 d2 f9 4f 00 00 30 04 5c d2 0f
>3a1088		50 00 00 30 03 61 d2 25 50 00 00 30 03 65 d2 3b
>3a1098		50 00 00 30 05 69 d2 86 47 00 00 00 00 00 00 00
>3a10a8		00 00 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a10b8		30 a9 ff ff 85 ba e2 20 a9 37 85 bc c2 20 64 b7
>3a10c8		64 bd e2 20 64 b9 64 bf 2b 28 60 5a 08 e2 20 85
>3a10d8		ea c2 10 86 8f c2 20 a5 0e 48 a5 0c 48 a5 12 48
>3a10e8		a5 10 48 20 83 11 b0 03 20 07 11 20 0f 13 c2 20
>3a10f8		68 85 10 68 85 12 68 85 0c 68 85 0e 28 7a 60 08
>3a1108		0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a6 8f ca
>3a1118		86 0c e8 c2 30 38 a5 ba e5 0c 85 c0 e2 20 a5 bc
>3a1128		e9 00 85 c2 20 0f 13 e2 20 a5 ea a0 00 00 97 c3
>3a1138		a9 00 a0 01 00 97 c3 a0 02 00 97 c3 c2 20 a9 00
>3a1148		00 97 c3 c2 20 18 a5 ba 69 01 00 a0 05 00 97 c3
>3a1158		e2 20 c8 c8 a5 bc 69 00 97 c3 c2 20 a5 c0 85 b7
>3a1168		e2 20 a5 c2 85 b9 c2 20 38 a5 c3 e9 01 00 85 ba
>3a1178		e2 20 a5 c5 e9 00 85 bc 2b 28 60 08 0b 08 c2 20
>3a1188		48 a9 00 08 5b 68 28 c2 30 c2 20 a5 bd 85 c9 e2
>3a1198		20 a5 bf 85 cb a5 c9 d0 17 e2 20 a5 cb d0 11 c2
>3a11a8		20 a9 00 00 85 cf e2 20 a9 00 85 d1 2b 28 18 60
>3a11b8		c2 20 a0 05 00 b7 c9 85 cc e2 20 c8 c8 b7 c9 85
>3a11c8		ce c2 20 18 a5 c9 65 8f 85 0c e2 20 a5 cb 69 00
>3a11d8		85 0e c2 20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e
>3a11e8		69 00 85 0e c2 20 a5 0c c5 cc d0 28 e2 20 a5 0e
>3a11f8		c5 ce d0 20 c2 20 a5 cf d0 5d e2 20 a5 d1 d0 57
>3a1208		c2 20 a0 02 00 b7 c9 85 bd e2 20 c8 c8 b7 c9 85
>3a1218		bf 4c c0 12 c2 20 a5 0c 69 08 00 85 10 e2 20 a5
>3a1228		0e 69 00 85 12 e2 20 a5 c6 c5 10 b0 3e 90 08 c2
>3a1238		20 a5 c6 c5 10 b0 34 c2 20 a5 c9 85 cf e2 20 a5
>3a1248		cb 85 d1 c2 20 a0 02 00 b7 cf 85 c9 e2 20 c8 c8
>3a1258		b7 cf 85 cb 4c 9d 11 c2 20 a0 02 00 b7 c9 97 cf
>3a1268		e2 20 c8 c8 b7 c9 97 cf 4c c0 12 c2 20 a0 05 00
>3a1278		b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a0 02
>3a1288		00 b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a5
>3a1298		cf d0 14 e2 20 a5 cf d0 0e c2 20 a5 0c 85 bd e2
>3a12a8		20 a5 0e 85 bf 80 11 c2 20 a0 02 00 a5 0c 97 cf
>3a12b8		e2 20 c8 c8 a5 0e 97 cf c2 20 a5 c9 85 c3 e2 20
>3a12c8		a5 cb 85 c5 c2 20 a5 c3 85 b7 e2 20 a5 c5 85 b9
>3a12d8		c2 20 a0 05 00 a5 0c 97 c3 e2 20 c8 c8 a5 0e 97
>3a12e8		c3 c2 20 a0 02 00 a9 00 00 97 c3 e2 20 c8 c8 97
>3a12f8		c3 e2 20 a5 ea e2 20 a0 00 00 97 c3 a0 01 00 a9
>3a1308		00 97 c3 2b 28 38 60 08 c2 20 38 a5 c0 e9 08 00
>3a1318		85 c3 e2 20 a5 c2 e9 00 85 c5 28 60 08 e2 20 a5
>3a1328		c5 f0 04 c9 38 b0 12 c2 20 a5 c3 f0 0c e2 20 a0
>3a1338		01 00 b7 c3 1a 97 c3 28 60 00 ea 08 e2 20 a5 c5
>3a1348		f0 04 c9 38 b0 17 c2 20 a5 c3 f0 11 e2 20 a0 01
>3a1358		00 b7 c3 3a 97 c3 d0 03 20 67 13 28 60 00 ea 08
>3a1368		c2 20 a5 bd d0 21 e2 20 a5 bf d0 1b a5 c5 85 bf
>3a1378		c2 20 a5 c3 85 bd a9 00 00 a0 02 00 97 c3 c8 c8
>3a1388		e2 20 97 c3 4c 4e 14 e2 20 a5 bf c5 c5 90 28 c2
>3a1398		20 a5 bd c5 c3 90 20 c2 20 a5 bd a0 02 00 97 c3
>3a13a8		e2 20 c8 c8 a5 bf 97 c3 c2 20 a5 c3 85 bd e2 20
>3a13b8		a5 c5 85 bf 4c 4e 14 c2 20 a5 bd 85 08 e2 20 a5
>3a13c8		bf 85 0a e2 20 a0 04 00 b7 08 c5 c8 90 32 d0 0b
>3a13d8		c2 20 a0 02 00 b7 08 c5 c6 90 25 c2 20 a0 02 00
>3a13e8		b7 08 97 c3 e2 20 c8 c8 b7 08 97 c3 c2 20 a5 c3
>3a13f8		a0 02 00 97 08 e2 20 a5 c5 c8 c8 97 08 4c 4e 14
>3a1408		c2 20 a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0
>3a1418		19 c2 20 a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08
>3a1428		85 0a c2 20 a5 0c 85 08 80 99 c2 20 a5 c3 a0 02
>3a1438		00 97 08 e2 20 c8 c8 a5 c5 97 08 a9 00 97 c3 c2
>3a1448		20 a0 02 00 97 c3 20 53 14 28 60 08 c2 20 a5 bd
>3a1458		85 c3 e2 20 a5 bf 85 c5 c2 20 a5 c3 d0 09 e2 20
>3a1468		a5 c5 d0 03 4c f6 14 c2 20 a0 02 00 b7 c3 85 0c
>3a1478		e2 20 c8 c8 b7 c3 85 0e c2 20 a0 05 00 b7 c3 85
>3a1488		10 e2 20 c8 c8 b7 c3 85 12 c2 20 a5 0c c5 10 d0
>3a1498		08 e2 20 a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c3
>3a14a8		85 0c e2 20 c8 c8 b7 c3 85 0e c2 20 a5 0c 85 c3
>3a14b8		e2 20 a5 0e 85 c5 80 a0 c2 20 a0 02 00 b7 c3 85
>3a14c8		0c e2 20 c8 c8 b7 c3 85 0e c2 20 a0 02 00 b7 0c
>3a14d8		97 c3 e2 20 c8 c8 b7 0c 97 c3 c2 20 a0 05 00 b7
>3a14e8		0c 97 c3 e2 20 c8 c8 b7 0c 97 c3 4c 6f 14 28 60
>3a14f8		08 c2 20 64 16 64 18 28 60 08 c2 30 a5 16 d0 16
>3a1508		a5 18 d0 12 e2 20 64 16 a5 e2 1a 1a 85 17 a5 e3
>3a1518		85 18 64 19 80 07 c2 20 a5 17 1a 85 17 c2 20 a5
>3a1528		bb 3a c5 17 f0 02 b0 1f 08 c2 20 48 a9 00 08 5b
>3a1538		68 28 e2 20 a9 03 8f d3 08 00 c2 20 29 ff 00 20
>3a1548		5e 1e e2 20 dc d4 08 28 60 c9 00 d0 05 c0 01 00
>3a1558		f0 05 09 30 97 16 c8 60 08 c2 30 64 0c a5 25 10
>3a1568		1a 18 a5 23 49 ff ff 69 01 00 85 23 a5 25 49 ff
>3a1578		ff 69 00 00 85 25 a9 ff ff 85 0c 64 10 64 12 64
>3a1588		14 a2 1f 00 f8 06 23 26 25 a5 10 65 10 85 10 a5
>3a1598		12 65 12 85 12 a5 14 65 14 85 14 ca 10 e7 d8 e2
>3a15a8		20 20 01 15 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9
>3a15b8		20 97 16 c8 a2 05 00 b5 10 29 f0 4a 4a 4a 4a 20
>3a15c8		51 15 b5 10 29 0f 20 51 15 ca 10 eb c0 01 00 d0
>3a15d8		0c a9 20 87 16 a0 01 00 a9 30 97 16 c8 a9 00 97
>3a15e8		16 28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00
>3a15f8		f0 04 e8 c8 80 f7 28 60 08 0b 08 c2 20 48 a9 00
>3a1608		08 5b 68 28 e2 20 c2 10 a0 00 00 b7 23 d0 04 b7
>3a1618		29 f0 25 b7 23 d7 29 90 12 d0 03 c8 80 ed c2 20
>3a1628		a9 01 00 85 23 e2 20 64 25 80 15 c2 20 a9 ff ff
>3a1638		85 23 e2 20 85 25 80 08 c2 20 64 23 e2 20 64 25
>3a1648		e2 20 a9 00 85 27 2b 28 60 08 0b 8b 08 c2 20 48
>3a1658		a9 00 08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20
>3a1668		a5 25 48 ab c2 20 68 28 a6 23 20 ed 15 84 0c 08
>3a1678		c2 20 48 e2 20 a5 2b 48 ab c2 20 68 28 a6 29 20
>3a1688		ed 15 c2 20 98 38 65 0c aa e2 20 a9 02 20 d3 10
>3a1698		c2 20 a5 b7 85 08 e2 20 a5 b9 85 0a a0 00 00 08
>3a16a8		c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6 23 bd
>3a16b8		00 00 f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48
>3a16c8		e2 20 a5 2b 48 ab c2 20 68 28 a6 29 bd 00 00 97
>3a16d8		08 f0 04 e8 c8 80 f5 c2 20 a5 08 85 23 e2 20 a5
>3a16e8		0a 85 25 a9 02 85 27 ab 2b 28 60 da 5a 08 0b 8b
>3a16f8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 0a 48 a5
>3a1708		08 48 c2 30 08 c2 20 48 e2 20 a5 25 48 ab c2 20
>3a1718		68 28 a6 23 20 ed 15 98 aa e8 e2 20 a9 02 20 d3
>3a1728		10 c2 20 a5 c0 85 08 a5 c2 85 0a a0 00 00 e2 20
>3a1738		b7 23 97 08 f0 03 c8 80 f7 c2 20 a5 08 85 23 a5
>3a1748		0a 85 25 c2 20 68 85 08 68 85 0a ab 2b 28 7a fa
>3a1758		60 08 e2 20 c2 10 a0 00 00 b7 23 f0 05 c8 80 f9
>3a1768		84 92 c2 30 c4 29 90 13 f0 11 a5 8f 30 0d f0 0b
>3a1778		c4 8f b0 12 a5 29 d0 0e 4c d7 17 20 01 15 e2 20
>3a1788		a9 00 87 16 80 39 20 01 15 c2 30 18 a5 23 65 29
>3a1798		85 23 a5 25 69 00 00 85 25 a0 00 00 e2 20 a7 23
>3a17a8		97 16 f0 1b c2 20 18 a5 23 69 01 00 85 23 a5 25
>3a17b8		69 00 00 85 25 c8 c4 8f d0 e2 a9 00 00 97 16 c2
>3a17c8		20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28
>3a17d8		60 08 c2 30 20 00 16 a5 23 c9 ff ff d0 05 20 2d
>3a17e8		06 80 03 20 3f 06 28 60 08 c2 30 20 00 16 a5 23
>3a17f8		c9 01 00 d0 05 20 2d 06 80 03 20 3f 06 28 60 08
>3a1808		c2 30 20 00 16 a5 23 c9 00 00 d0 05 20 2d 06 80
>3a1818		03 20 3f 06 28 60 08 c2 30 20 00 16 a5 23 c9 00
>3a1828		00 f0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2 30
>3a1838		20 00 16 a5 23 c9 ff ff f0 05 20 2d 06 80 03 20
>3a1848		3f 06 28 60 08 c2 30 20 00 16 a5 23 c9 01 00 f0
>3a1858		05 20 2d 06 80 03 20 3f 06 28 60 08 e2 20 a5 27
>3a1868		c9 02 d0 1d a5 23 d0 19 a5 24 d0 15 a5 25 d0 11
>3a1878		20 01 15 a9 00 87 16 c2 20 a5 16 85 23 a5 18 85
>3a1888		25 28 60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a1898		28 c2 30 a9 00 00 85 00 85 1a a9 36 00 85 02 85
>3a18a8		1c 22 3c 11 00 b0 20 a0 02 00 b7 1a f0 0f c5 55
>3a18b8		90 10 c5 59 f0 02 b0 05 20 ee 18 80 e4 28 2b 7a
>3a18c8		68 60 20 fa 21 80 da 08 c2 20 48 a9 00 08 5b 68
>3a18d8		28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20 5e
>3a18e8		1e e2 20 dc d4 08 08 c2 30 85 23 64 25 20 60 15
>3a18f8		a5 16 1a 85 23 a5 18 85 25 20 00 46 18 a5 1a 69
>3a1908		04 00 85 00 a5 1c 69 00 00 85 02 e2 20 a9 20 20
>3a1918		18 00 c2 20 20 2d 19 90 fb e2 20 a9 0d 20 18 00
>3a1928		20 fa 21 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a1938		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>3a1948		a7 00 f0 3a 30 05 20 18 00 80 29 c2 20 29 7f 00
>3a1958		0a 0a 0a 18 69 fb 0c 85 08 a9 3a 00 69 00 00 85
>3a1968		0a 08 e2 20 48 a9 3a 48 ab 68 28 a0 02 00 b7 08
>3a1978		aa 20 64 04 c2 20 20 1d 21 ab 2b 28 18 60 ab 2b
>3a1988		28 38 60 08 c2 20 a9 ff 6f 85 1f a9 ff 7f 85 21
>3a1998		a9 ff ff 85 23 85 25 85 29 85 2b e2 20 85 27 85
>3a19a8		2d 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a19b8		08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a a4 1f bd
>3a19c8		00 00 99 00 00 bd 02 00 99 02 00 e2 20 bd 04 00
>3a19d8		99 04 00 c2 20 38 98 e9 05 00 85 1f 7a ab 2b 28
>3a19e8		60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a19f8		20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5 1f 69 05
>3a1a08		00 85 1f a8 b9 00 00 9d 00 00 b9 02 00 9d 02 00
>3a1a18		e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab 2b 28 60
>3a1a28		08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a1a38		48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 21 99 00
>3a1a48		00 88 84 21 7a ab 2b 28 60 08 0b 8b 08 c2 20 48
>3a1a58		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a1a68		e2 20 c2 10 5a a4 21 c8 84 21 b9 00 00 c2 20 29
>3a1a78		ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20 28 1a 28
>3a1a88		60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>3a1a98		a4 21 b9 01 00 c9 01 d0 08 c2 20 e6 21 ab 28 7a
>3a1aa8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a1ab8		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>3a1ac8		48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a1ad8		20 48 a9 00 48 ab 68 28 e2 20 a4 21 c0 ff 7f f0
>3a1ae8		11 20 5a 0c 85 0c b9 01 00 20 5a 0c c5 0c f0 02
>3a1af8		90 08 c2 20 ab 2b 28 68 18 60 c2 20 ab 2b 28 68
>3a1b08		38 60 4c d8 08 08 e2 20 a9 00 8f 00 4d 00 a2 01
>3a1b18		00 20 0c 1d 20 51 06 c2 20 a5 23 9f 00 4d 00 e2
>3a1b28		20 af 00 4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20 3e
>3a1b38		21 e2 20 a7 00 c9 90 f0 09 c9 2c d0 0a 20 1d 21
>3a1b48		80 cf 20 1d 21 28 60 08 c2 20 48 a9 00 08 5b 68
>3a1b58		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e
>3a1b68		1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>3a1b78		e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>3a1b88		e2 20 dc d4 08 08 20 20 54 90 47 e2 20 a5 ea 29
>3a1b98		80 d0 06 20 21 52 4c d8 1b 20 93 51 90 53 c2 20
>3a1ba8		a5 c2 48 a5 c0 48 a0 09 00 b7 08 85 c0 e2 20 c8
>3a1bb8		c8 b7 08 85 c2 e2 20 a9 8f 20 2a 22 20 7f 1a 20
>3a1bc8		0d 1b 20 f7 68 20 89 1a c2 20 68 85 c2 68 85 c0
>3a1bd8		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a1be8		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>3a1bf8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f
>3a1c08		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>3a1c18		08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10
>3a1c28		20 1d 21 a0 00 00 b7 00 f0 24 c9 22 f0 03 c8 80
>3a1c38		f5 84 0c e2 20 a9 02 a6 0c e8 20 01 15 a0 00 00
>3a1c48		c4 0c f0 29 a7 00 97 16 c8 20 1d 21 80 f2 08 c2
>3a1c58		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a1c68		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 a9 00 97
>3a1c78		16 c2 20 a5 16 85 23 a5 18 85 25 a9 02 00 85 27
>3a1c88		20 1d 21 2b 28 60 08 e2 20 a7 00 c2 20 29 ff 00
>3a1c98		20 84 0c 85 2f 20 7f 1a 08 e2 20 48 a9 00 48 ab
>3a1ca8		68 28 20 b2 1c 20 89 1a 28 60 20 1d 21 6c 2f 08
>3a1cb8		48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a1cc8		20 51 1a 89 80 00 f0 37 48 20 84 0c 85 2f 68 20
>3a1cd8		d1 0c c9 01 00 f0 08 c2 30 a2 29 08 20 e9 19 c2
>3a1ce8		30 a2 23 08 20 e9 19 08 e2 20 48 a9 00 48 ab 68
>3a1cf8		28 20 09 1d a2 23 08 20 ab 19 ab 2b 28 68 60 00
>3a1d08		ea 6c 2f 08 08 08 c2 20 48 a9 00 08 5b 68 28 08
>3a1d18		e2 20 48 a9 00 48 ab 68 28 c2 10 da e2 20 a7 00
>3a1d28		d0 03 4c cf 1d 30 33 c9 20 d0 03 4c c9 1d c9 3a
>3a1d38		b0 04 c9 30 b0 56 c9 26 f0 52 c9 22 d0 03 4c e2
>3a1d48		1d c9 5b b0 07 c9 41 90 03 4c ee 1d c9 7b b0 07
>3a1d58		c9 61 90 03 4c ee 1d 4c cf 1d c9 8f f0 40 c9 90
>3a1d68		f0 41 20 a7 0c c9 30 d0 0c 20 8e 1c a2 23 08 20
>3a1d78		ab 19 4c 24 1d c9 00 d0 4e a7 00 a6 21 e0 ff 7f
>3a1d88		f0 05 20 c8 1a b0 12 20 28 1a 80 35 c2 20 20 42
>3a1d98		5a a2 23 08 20 ab 19 80 83 20 b8 1c 80 dd 20 28
>3a1da8		1a 80 1e e2 20 a4 21 c0 ff 7f f0 46 a4 21 b9 01
>3a1db8		00 c9 01 f0 3d c9 8f f0 05 20 b8 1c 80 ee 20 51
>3a1dc8		1a 20 1d 21 4c 24 1d a6 21 e0 ff 7f b0 24 bd 01
>3a1dd8		00 c9 01 f0 1d 20 b8 1c 80 ed 20 18 1c a2 23 08
>3a1de8		20 ab 19 4c 24 1d 20 8d 1b a2 23 08 20 ab 19 4c
>3a1df8		24 1d a2 23 08 20 e9 19 fa 28 60 08 0b 8b 08 e2
>3a1e08		20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08 5b
>3a1e18		68 28 c2 30 a9 fd 5f 85 33 ab 2b 28 60 08 0b 08
>3a1e28		c2 20 48 a9 00 08 5b 68 28 c2 30 92 33 c6 33 c6
>3a1e38		33 2b 28 60 08 c2 30 29 ff 00 20 25 1e 28 60 08
>3a1e48		0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 e6 33 e6
>3a1e58		33 b2 33 2b 28 60 8b 0b 08 08 c2 20 48 a9 00 08
>3a1e68		5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 20 85
>3a1e78		23 a9 00 00 85 25 e2 20 a9 00 85 27 85 ea a9 3a
>3a1e88		85 e9 c2 20 a9 b8 1e 85 e7 20 83 53 c2 20 a5 d7
>3a1e98		85 23 a5 d9 85 25 e2 20 a9 00 85 27 85 ea a9 3a
>3a1ea8		85 e9 c2 20 a9 bc 1e 85 e7 20 83 53 28 2b ab 60
>3a1eb8		45 52 52 00 45 52 4c 00 e2 20 c2 10 20 d7 03 af
>3a1ec8		d3 08 00 0a c2 20 29 ff 00 a8 08 e2 20 48 a9 3a
>3a1ed8		48 ab 68 28 be 12 1f 20 64 04 c2 20 a5 d7 f0 27
>3a1ee8		a2 42 1f 20 64 04 08 e2 20 48 a9 00 48 ab 68 28
>3a1ef8		c2 20 af d7 08 00 8f 23 08 00 a9 00 00 8f 25 08
>3a1f08		00 20 1e 46 20 d7 03 4c c0 27 46 1f 49 1f 4f 1f
>3a1f18		5c 1f 6a 1f 78 1f 8b 1f a1 1f b1 1f c0 1f cd 1f
>3a1f28		de 1f ed 1f fa 1f 08 20 17 20 28 20 41 20 55 20
>3a1f38		69 20 7f 20 93 20 ae 20 c6 20 20 61 74 00 4f 4b
>3a1f48		00 42 72 65 61 6b 00 53 79 6e 74 61 78 20 65 72
>3a1f58		72 6f 72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72
>3a1f68		79 00 54 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>3a1f78		56 61 72 69 61 62 6c 65 20 6e 6f 74 20 66 6f 75
>3a1f88		6e 64 00 4c 69 6e 65 20 6e 75 6d 62 65 72 20 6e
>3a1f98		6f 74 20 66 6f 75 6e 64 00 53 74 61 63 6b 20 75
>3a1fa8		6e 64 65 72 66 6c 6f 77 00 53 74 61 63 6b 20 6f
>3a1fb8		76 65 72 66 6c 6f 77 00 4f 75 74 20 6f 66 20 72
>3a1fc8		61 6e 67 65 00 49 6c 6c 65 67 61 6c 20 61 72 67
>3a1fd8		75 6d 65 6e 74 00 46 69 6c 65 20 6e 6f 74 20 66
>3a1fe8		6f 75 6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62 65
>3a1ff8		72 00 4d 61 74 68 20 6f 76 65 72 66 6c 6f 77 00
>3a2008		4d 61 74 68 20 75 6e 64 65 72 66 6c 6f 77 00 44
>3a2018		69 76 69 73 69 6f 6e 20 62 79 20 7a 65 72 6f 00
>3a2028		55 6e 61 62 6c 65 20 74 6f 20 72 65 61 64 20 64
>3a2038		69 72 65 63 74 6f 72 79 00 55 6e 61 62 6c 65 20
>3a2048		74 6f 20 6c 6f 61 64 20 66 69 6c 65 00 55 6e 61
>3a2058		62 6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c 65
>3a2068		00 55 6e 61 62 6c 65 20 74 6f 20 64 65 6c 65 74
>3a2078		65 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74
>3a2088		20 66 69 6e 64 20 66 69 6c 65 00 43 6f 75 6c 64
>3a2098		20 6e 6f 74 20 75 70 64 61 74 65 20 64 69 72 65
>3a20a8		63 74 6f 72 79 00 43 6f 75 6c 64 20 6e 6f 74 20
>3a20b8		63 6f 70 79 20 74 68 65 20 66 69 6c 65 00 41 72
>3a20c8		67 75 6d 65 6e 74 20 6f 75 74 73 69 64 65 20 64
>3a20d8		6f 6d 61 69 6e 00 08 0b 08 c2 20 48 a9 00 08 5b
>3a20e8		68 28 e2 20 a9 00 85 d2 2b 28 60 0b 08 08 c2 20
>3a20f8		48 a9 00 08 5b 68 28 08 c2 20 a9 c0 1e 8f d4 08
>3a2108		00 e2 20 a9 3a 8f d6 08 00 28 20 c5 44 20 06 40
>3a2118		64 31 28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a2128		28 c2 20 18 a5 00 69 01 00 85 00 e2 20 a5 02 69
>3a2138		00 85 02 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a2148		68 28 e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02
>3a2158		80 05 20 1d 21 80 ed 2b 28 60 08 e2 20 a7 00 f0
>3a2168		09 c9 3a f0 05 20 1d 21 80 f3 28 60 08 e2 20 64
>3a2178		36 a7 00 f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f f0
>3a2188		1a c9 9e f0 1a c9 a0 f0 16 20 1d 21 80 e3 20 fa
>3a2198		21 c2 20 a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea c6
>3a21a8		36 30 30 80 e4 a5 35 30 06 a5 36 f0 02 80 da 20
>3a21b8		1d 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a21c8		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>3a21d8		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a21e8		02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>3a21f8		d4 08 08 c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a 65
>3a2208		0c 85 1a a5 1c 69 00 00 85 1c a0 02 00 b7 1a 85
>3a2218		d7 18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02
>3a2228		28 60 08 e2 20 48 20 3e 21 68 e2 20 c7 00 d0 08
>3a2238		20 1d 21 20 3e 21 28 60 08 c2 20 48 a9 00 08 5b
>3a2248		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a2258		5e 1e e2 20 dc d4 08 08 e2 20 20 3e 21 e2 20 a7
>3a2268		00 f0 10 c9 3a f0 0c c5 37 f0 05 20 1d 21 80 ef
>3a2278		28 38 60 28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0
>3a2288		0d c9 3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a
>3a2298		60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20 f8
>3a22a8		14 20 8b 19 e2 20 a9 00 85 dc 22 3c 11 00 b0 4b
>3a22b8		a7 00 c9 3a d0 03 20 1d 21 20 3e 21 a7 00 d0 03
>3a22c8		4c 4d 23 20 e2 04 b0 52 a7 00 10 10 20 a7 0c 85
>3a22d8		0c c9 20 d0 03 4c 3b 23 a5 d2 f0 51 08 c2 20 48
>3a22e8		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>3a22f8		29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9
>3a2308		00 08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2 20 29
>3a2318		ff 00 20 5e 1e e2 20 dc d4 08 20 cf 44 4c 4d 23
>3a2328		08 e2 20 48 a9 00 48 ab 68 28 6c 2f 08 a5 0c c9
>3a2338		10 d0 a9 a7 00 20 84 0c c2 20 85 2f 20 8b 19 20
>3a2348		1d 21 20 28 23 ab 2b 28 60 08 58 20 de 20 20 03
>3a2358		1e e2 20 9c 8a 0f c2 20 a5 1a 85 00 a5 1c 85 02
>3a2368		4c 8f 23 08 c2 20 a0 02 00 b7 1a 85 d7 e2 20 a5
>3a2378		dc c9 03 f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2
>3a2388		20 a5 1c 69 00 85 02 c2 20 20 99 22 e2 20 a5 dc
>3a2398		c9 03 f0 f3 c9 00 d0 31 e2 20 20 3e 21 a7 00 f0
>3a23a8		28 c9 3a f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a23b8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>3a23c8		20 dc d4 08 20 1d 21 80 be 28 60 08 58 e2 20 a9
>3a23d8		80 85 d2 9c 8a 0f 20 03 1e c2 30 64 31 a0 02 00
>3a23e8		b7 1a f0 29 20 6b 23 e2 20 a5 dc c9 01 f0 1e c9
>3a23f8		02 f0 ea c9 03 f0 e6 c2 20 a0 00 00 18 a5 1a 77
>3a2408		1a 85 1a e2 20 a5 1c 69 00 85 1c 80 d0 e2 20 a9
>3a2418		00 85 d2 28 60 08 c2 30 c2 20 a9 00 00 85 08 a9
>3a2428		36 00 85 0a c2 20 a0 02 00 b7 08 f0 31 c5 23 f0
>3a2438		1e b0 2b c2 20 a0 00 00 18 a5 08 77 08 85 0c e2
>3a2448		20 a5 0a 69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2
>3a2458		20 a5 08 85 1a e2 20 a5 0a 85 1c 28 38 60 28 18
>3a2468		60 08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08
>3a2478		e2 20 a5 0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00
>3a2488		85 0c e2 20 a5 0e 69 00 85 0e c2 20 18 a5 08 69
>3a2498		01 00 85 08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60
>3a24a8		08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5
>3a24b8		0e c5 02 f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2
>3a24c8		20 a5 0e e9 00 85 0e c2 20 38 a5 08 e9 01 00 85
>3a24d8		08 e2 20 a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00
>3a24e8		00 c2 20 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00
>3a24f8		85 0e c2 20 18 a5 d9 69 04 00 85 00 e2 20 a5 db
>3a2508		69 00 85 02 a0 00 00 c2 20 38 a5 d9 f7 08 85 d9
>3a2518		e2 20 a5 db e9 00 85 db 20 69 24 20 c5 44 28 60
>3a2528		08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a0 02 00
>3a2538		97 d9 18 a5 d9 69 04 00 85 08 e2 20 a5 db 69 00
>3a2548		85 0a e2 20 a0 00 00 b7 1a 97 08 f0 03 c8 80 f7
>3a2558		c2 20 98 18 69 05 00 85 0c c2 20 a0 00 00 a5 0c
>3a2568		97 d9 c2 20 18 a5 d9 65 0c 85 0c e2 20 a5 db 69
>3a2578		00 85 db c2 20 a5 0c 85 d9 c2 20 a0 00 00 a9 00
>3a2588		00 97 d9 c8 c0 05 00 d0 f8 20 c5 44 28 60 0b 08
>3a2598		08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 00 00 85
>3a25a8		08 a9 36 00 85 0a a0 02 00 b7 08 f0 1d c5 d7 f0
>3a25b8		25 b0 1d a0 00 00 18 a5 08 77 08 85 0c a5 0a 69
>3a25c8		00 00 85 0a a5 0c 85 08 80 dc a9 00 00 28 2b 60
>3a25d8		a9 01 00 28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9
>3a25e8		05 00 85 10 a0 00 00 e2 20 b7 1a f0 07 c2 20 e6
>3a25f8		10 c8 80 f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5
>3a2608		d9 69 04 00 85 0c a5 db 69 00 00 85 0e 18 a5 d9
>3a2618		65 10 85 d9 a5 db 69 00 00 85 db 18 a5 d9 69 04
>3a2628		00 85 08 a5 db 69 00 00 85 0a 20 a8 24 c2 20 a5
>3a2638		10 a0 00 00 97 00 a5 d7 a0 02 00 97 00 18 a5 00
>3a2648		69 04 00 85 00 a5 02 69 00 00 85 02 a0 00 00 e2
>3a2658		20 b7 1a 97 00 f0 03 c8 80 f7 20 c5 44 28 60 08
>3a2668		c2 30 85 d7 20 96 25 c9 00 00 f0 2c c9 01 00 f0
>3a2678		22 c2 20 a5 08 48 a5 0a 48 20 e5 24 68 85 0a 68
>3a2688		85 08 a5 1a 85 00 a5 1c 85 02 20 3e 21 e2 20 a7
>3a2698		00 f0 0a 20 e4 25 80 05 a5 d7 20 28 25 28 60 0b
>3a26a8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a2
>3a26b8		00 00 bd 00 4f f0 03 e8 80 f8 86 0c c2 30 8a c9
>3a26c8		02 00 90 12 3a 18 69 00 4f aa 18 65 8f a8 a5 0c
>3a26d8		3a 8b 44 00 00 ab c2 20 a6 55 a0 00 4f a5 8f 8b
>3a26e8		54 00 3a ab e2 20 a5 0c c9 02 90 18 a6 8f a9 22
>3a26f8		9d 00 4f e8 bd 00 4f d0 fa a9 22 9d 00 4f a9 00
>3a2708		e8 9d 00 4f 28 2b 60 da 5a 8b 0b 08 08 c2 20 48
>3a2718		a9 00 08 5b 68 28 e2 20 c2 10 ad 00 4f c9 23 f0
>3a2728		0a c9 7c f0 17 28 2b ab 7a fa 60 c2 20 a9 03 00
>3a2738		85 8f a9 55 27 85 55 20 a7 26 80 e9 c2 20 a9 04
>3a2748		00 85 8f a9 59 27 85 55 20 a7 26 80 d8 44 49 52
>3a2758		00 42 52 55 4e 00 8b 08 20 3d 02 08 e2 20 48 a9
>3a2768		3a 48 ab 68 28 a2 6f d2 20 64 04 28 ab 60 08 e2
>3a2778		30 a9 01 20 1c 00 20 db 00 c9 00 f0 f9 c9 0d f0
>3a2788		02 80 f3 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a2798		28 c2 30 64 d7 a9 00 4f 85 1a a9 00 00 85 1c 20
>3a27a8		9c 09 c2 20 a5 d7 d0 05 20 51 23 80 07 20 67 26
>3a27b8		28 2b 38 60 28 2b 18 60 c2 30 a2 ff fe 9a 20 5e
>3a27c8		27 20 08 00 20 0c 00 22 3c 11 00 a9 00 00 20 1c
>3a27d8		00 20 0f 27 20 8d 27 b0 e8 80 e3 08 e2 20 20 a3
>3a27e8		08 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20
>3a27f8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a2808		20 29 ff 00 20 5e 1e e2 20 dc d4 08 20 51 16 80
>3a2818		08 20 72 54 80 03 20 e1 56 28 60 08 e2 20 20 55
>3a2828		08 c9 00 f0 23 c9 01 f0 24 08 c2 20 48 a9 00 08
>3a2838		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a2848		20 5e 1e e2 20 dc d4 08 20 84 54 80 03 20 d6 56
>3a2858		28 60 08 e2 20 20 55 08 c9 00 f0 23 c9 01 f0 24
>3a2868		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a2878		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 20
>3a2888		96 54 80 03 20 77 57 28 60 20 bf 07 20 f0 07 20
>3a2898		2c 57 60 a5 23 8f 1a 01 00 a5 29 8f 18 01 00 af
>3a28a8		1e 01 00 85 23 60 08 c2 30 48 20 bf 07 a5 2d c9
>3a28b8		00 00 d0 0d a5 2b d0 09 da a6 29 20 4a 64 fa 80
>3a28c8		1c 20 f0 07 c2 20 a5 2b 48 a5 29 48 20 d5 62 c2
>3a28d8		20 68 85 29 68 85 2b 20 77 57 20 b4 64 68 28 60
>3a28e8		08 20 51 06 20 82 06 c2 20 a5 23 25 29 85 23 a5
>3a28f8		25 25 2b 85 25 28 60 08 20 51 06 20 82 06 c2 20
>3a2908		a5 23 05 29 85 23 a5 25 05 2b 85 25 28 60 08 20
>3a2918		51 06 c2 20 a5 23 49 ff ff 85 23 a5 25 49 ff ff
>3a2928		85 25 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>3a2938		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a2948		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>3a2958		e2 20 dc d4 08 20 d9 17 80 08 20 97 55 80 03 20
>3a2968		0c 5d 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>3a2978		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a2988		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>3a2998		e2 20 dc d4 08 20 f0 17 80 08 20 b8 55 80 03 20
>3a29a8		21 5d 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>3a29b8		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a29c8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>3a29d8		e2 20 dc d4 08 20 07 18 80 08 20 e5 55 80 03 20
>3a29e8		36 5d 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>3a29f8		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a2a08		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>3a2a18		e2 20 dc d4 08 20 1e 18 80 08 20 03 56 80 03 20
>3a2a28		75 5d 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>3a2a38		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a2a48		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>3a2a58		e2 20 dc d4 08 20 35 18 80 08 20 21 56 80 03 20
>3a2a68		60 5d 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>3a2a78		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a2a88		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>3a2a98		e2 20 dc d4 08 20 4c 18 80 08 20 4e 56 80 03 20
>3a2aa8		4b 5d 28 60 08 e2 20 a5 27 c9 00 f0 2d c9 01 f0
>3a2ab8		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a2ac8		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>3a2ad8		e2 20 a5 26 49 80 85 26 80 16 c2 20 a5 23 49 ff
>3a2ae8		ff 85 23 a5 25 49 ff ff 85 25 e6 23 d0 02 e6 25
>3a2af8		28 60 08 e2 20 20 0c 1d 20 63 07 20 ae 05 a5 23
>3a2b08		0a 0a 0a 0a 05 29 48 a9 2c 20 2a 22 20 0c 1d 20
>3a2b18		63 07 20 ae 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c
>3a2b28		20 2a 22 20 0c 1d 20 63 07 20 ae 05 a5 23 0a 0a
>3a2b38		0a 0a 05 29 48 af 0e 08 af 09 0c 8f 0e 08 af 68
>3a2b48		8f 00 08 af 68 8f 02 08 af 68 8f 04 08 af af 0e
>3a2b58		08 af 29 f7 8f 0e 08 af 20 62 21 28 60 08 e2 20
>3a2b68		20 0c 1d 20 63 07 20 ae 05 a5 23 0a 0a 0a 0a 05
>3a2b78		29 48 a9 2c 20 2a 22 20 0c 1d 20 63 07 20 ae 05
>3a2b88		a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 2a 22 20 0c
>3a2b98		1d 20 51 06 20 e4 05 c2 20 a5 23 85 92 a5 29 85
>3a2ba8		23 20 ae 05 e2 20 a5 23 0a 0a 0a 0a 05 29 48 c2
>3a2bb8		20 a5 92 85 23 20 ae 05 e2 20 a5 23 0a 0a 0a 0a
>3a2bc8		05 29 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 0f
>3a2bd8		08 af 68 8f 0a 08 af 68 8f 09 08 af 68 8f 06 08
>3a2be8		af af 0e 08 af 29 f7 8f 0e 08 af 20 62 21 28 60
>3a2bf8		08 e2 20 48 20 0c 1d 20 63 07 e2 20 a5 23 29 0f
>3a2c08		0a 0a 0a 0a 83 01 a9 2c 20 2a 22 20 0c 1d 20 63
>3a2c18		07 a5 23 29 0f 03 01 8f 1e 00 00 e2 20 68 28 60
>3a2c28		08 c2 20 f4 00 00 e2 20 20 0c 1d 20 63 07 a5 23
>3a2c38		83 01 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5 23 83
>3a2c48		02 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5 23 8f 0d
>3a2c58		00 af a3 02 8f 0e 00 af a3 01 8f 0f 00 af c2 20
>3a2c68		68 28 60 08 c2 20 f4 00 00 e2 20 20 0c 1d 20 51
>3a2c78		06 a5 23 f0 16 a9 01 8f 04 00 af a9 20 8f 08 00
>3a2c88		af 8f 09 00 af 22 2c 11 00 80 0a a9 00 8f 04 00
>3a2c98		af 22 2c 11 00 a9 2c 85 37 20 5f 22 90 39 20 1d
>3a2ca8		21 20 0c 1d 20 63 07 a5 23 83 01 a9 2c 20 2a 22
>3a2cb8		20 0c 1d 20 63 07 a5 23 83 02 a9 2c 20 2a 22 20
>3a2cc8		0c 1d 20 63 07 a5 23 8f 05 00 af a3 02 8f 06 00
>3a2cd8		af a3 01 8f 07 00 af c2 20 68 28 60 08 c2 20 3b
>3a2ce8		38 e9 05 00 1b e2 20 20 0c 1d 20 63 07 a5 23 c9
>3a2cf8		0a 90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2d08		0a 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>3a2d18		d4 08 83 01 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5
>3a2d28		23 83 02 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5 23
>3a2d38		83 03 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5 23 83
>3a2d48		04 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5 23 83 05
>3a2d58		a9 af 85 a0 a3 01 0a c2 20 29 ff 00 aa bf 9c 2d
>3a2d68		3a 85 9e e2 20 a3 02 c2 20 29 ff 00 0a 0a 18 65
>3a2d78		9e 85 9e e2 20 a0 02 00 a3 03 97 9e a0 01 00 a3
>3a2d88		04 97 9e a0 00 00 a3 05 97 9e c2 20 3b 18 69 05
>3a2d98		00 1b 28 60 00 20 00 24 00 28 00 2c 00 30 00 34
>3a2da8		00 38 00 3c 40 1f 80 1f da 5a 08 20 0c 1d 20 51
>3a2db8		06 c2 20 a5 23 89 00 01 d0 17 af 00 00 af 89 00
>3a2dc8		01 f0 0e e2 20 a9 00 8f 01 00 af a9 01 8f 01 00
>3a2dd8		af c2 20 a5 23 8f 00 00 af e2 20 a5 24 c2 20 29
>3a2de8		03 00 0a aa c2 20 bf 37 2e 3a 8f 10 f0 3a bf 3f
>3a2df8		2e 3a 8f 12 f0 3a af 10 f0 3a 8f 08 01 00 af 12
>3a2e08		f0 3a 8f 0a 01 00 af 0c 01 00 8f 14 f0 3a e2 20
>3a2e18		af 0e 01 00 8f 16 f0 3a 22 2c 11 00 c2 20 af 1a
>3a2e28		00 00 aa af 1c 00 00 a8 20 20 00 28 7a fa 60 80
>3a2e38		02 20 03 40 01 90 01 e0 01 58 02 f0 00 2c 01 50
>3a2e48		00 64 00 28 00 32 00 3c 00 4b 00 1e 00 32 00 48
>3a2e58		00 5c 00 20 00 2a 00 34 00 43 00 16 00 34 00 da
>3a2e68		08 c2 30 c9 02 00 b0 1c 0a 0a aa bf 00 f0 3a 85
>3a2e78		9e bf 02 f0 3a 85 a0 c9 f0 00 b0 08 c9 b0 00 90
>3a2e88		03 28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2e98		a9 09 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>3a2ea8		dc d4 08 da 08 c2 30 c9 02 00 b0 17 0a 0a aa bf
>3a2eb8		08 f0 3a 85 9e bf 0a f0 3a 85 a0 c9 40 00 b0 03
>3a2ec8		28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2ed8		09 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>3a2ee8		d4 08 08 c2 30 3b 38 e9 07 00 1b 20 0c 1d 20 63
>3a2ef8		07 c2 20 a5 23 c9 02 00 b0 59 83 01 e2 20 a9 2c
>3a2f08		20 2a 22 20 0c 1d 20 63 07 a5 23 83 03 a9 2c 20
>3a2f18		2a 22 20 0c 1d 20 63 07 a3 01 0a 0a 0a aa a3 03
>3a2f28		d0 05 a5 23 0a 80 04 a5 23 38 2a 9f 00 01 af c2
>3a2f38		20 a9 2c 00 85 37 20 5f 22 b0 37 c2 20 08 c2 20
>3a2f48		a9 00 00 85 23 a9 b0 00 85 25 e2 20 a9 00 85 27
>3a2f58		28 80 27 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2f68		09 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>3a2f78		d4 08 c2 20 20 1d 21 20 0c 1d c2 20 a3 01 0a 0a
>3a2f88		aa a5 23 9f 00 f0 3a 9f 08 f0 3a 83 04 a5 25 9f
>3a2f98		02 f0 3a 38 e9 b0 00 9f 0a f0 3a 83 06 a3 01 0a
>3a2fa8		0a 0a aa e2 20 a3 04 9f 01 01 af a3 05 9f 02 01
>3a2fb8		af a3 06 9f 03 01 af a9 00 9f 04 01 af 9f 05 01
>3a2fc8		af c2 30 3b 18 69 07 00 1b 28 60 08 c2 20 48 a9
>3a2fd8		00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29
>3a2fe8		ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20 20 0c 1d
>3a2ff8		20 63 07 a5 23 20 ab 2e c2 20 a5 9e 8f 05 04 af
>3a3008		af 14 f0 3a 8f 08 04 af e2 20 a5 a0 8f 07 04 af
>3a3018		af 16 f0 3a 8f 0a 04 af a9 00 8f 01 04 af a9 85
>3a3028		8f 00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af
>3a3038		28 60 08 c2 20 a5 59 cf 10 f0 3a 90 1f 08 c2 20
>3a3048		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>3a3058		20 29 ff 00 20 5e 1e e2 20 dc d4 08 c2 30 a5 5d
>3a3068		cf 12 f0 3a b0 d7 8f 08 01 00 af 10 f0 3a 8f 0a
>3a3078		01 00 18 af 0c 01 00 65 59 85 0c af 0e 01 00 69
>3a3088		00 00 85 0e 18 a5 0c 65 9e 85 0c a5 0e 65 a0 85
>3a3098		0e e2 20 a5 55 87 0c 28 60 c2 20 a9 01 00 85 dd
>3a30a8		38 a5 61 e5 59 85 69 10 0b 49 ff ff 1a 85 69 a9
>3a30b8		ff ff 85 dd a9 01 00 85 df 38 a5 65 e5 5d 85 6d
>3a30c8		10 0b 49 ff ff 1a 85 6d a9 ff ff 85 df a5 6d c9
>3a30d8		01 00 d0 19 a5 69 c9 01 00 d0 10 20 3a 30 a5 61
>3a30e8		85 59 a5 65 85 5d 20 3a 30 80 5b a5 6d c5 69 b0
>3a30f8		04 a5 69 80 06 a5 6d 49 ff ff 1a 48 0a 68 6a 85
>3a3108		71 20 3a 30 a5 59 c5 61 d0 06 a5 5d c5 65 f0 36
>3a3118		a5 71 85 75 a5 69 49 ff ff 1a c5 75 10 10 f0 0e
>3a3128		38 a5 71 e5 6d 85 71 18 a5 59 65 dd 85 59 a5 75
>3a3138		c5 6d 10 cd f0 cb 18 a5 71 65 69 85 71 18 a5 5d
>3a3148		65 df 85 5d 80 bb 60 08 c2 20 3b 38 e9 06 00 1b
>3a3158		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>3a3168		48 ab 68 28 c2 30 20 0c 1d 20 63 07 83 01 a9 2c
>3a3178		00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 03 a9 2c
>3a3188		00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 05 a9 2c
>3a3198		00 20 2a 22 20 0c 1d 20 63 07 a5 23 85 55 a3 03
>3a31a8		85 59 a3 05 85 5d a3 01 20 67 2e 20 3a 30 c2 20
>3a31b8		3b 18 69 06 00 1b 28 60 08 c2 20 3b 38 e9 0a 00
>3a31c8		1b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a31d8		00 48 ab 68 28 c2 30 20 0c 1d 20 63 07 83 01 a9
>3a31e8		2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 03 a9
>3a31f8		2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 05 a9
>3a3208		2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 07 a9
>3a3218		2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 09 a9
>3a3228		2c 00 20 2a 22 20 0c 1d 20 63 07 a5 23 85 55 a3
>3a3238		03 85 59 a3 05 85 5d a3 07 85 61 a3 09 85 65 a3
>3a3248		01 20 67 2e 20 a1 30 c2 20 3b 18 69 0a 00 1b 28
>3a3258		60 08 c2 20 3b 38 e9 0c 00 1b 08 c2 20 48 a9 00
>3a3268		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>3a3278		20 0c 1d 20 63 07 83 01 a9 2c 00 20 2a 22 20 0c
>3a3288		1d 20 51 06 a5 23 83 03 a9 2c 00 20 2a 22 20 0c
>3a3298		1d 20 51 06 a5 23 83 05 a9 2c 00 20 2a 22 20 0c
>3a32a8		1d 20 51 06 a5 23 83 07 a9 2c 00 20 2a 22 20 0c
>3a32b8		1d 20 51 06 a5 23 83 09 a9 2c 00 20 2a 22 20 0c
>3a32c8		1d 20 63 07 a5 23 83 0b a3 01 20 ab 2e a9 07 00
>3a32d8		8f 00 04 af c2 20 a3 05 8f 00 01 00 af 10 f0 3a
>3a32e8		8f 02 01 00 18 af 04 01 00 63 03 85 0c e2 20 af
>3a32f8		06 01 00 69 00 85 0e c2 20 18 a5 9e 65 0c 8f 05
>3a3308		04 af e2 20 a5 a0 65 0e 8f 07 04 af c2 20 38 a3
>3a3318		07 e3 03 85 0c 8f 08 04 af 38 af 10 f0 3a 8f 0e
>3a3328		04 af 38 a3 09 e3 05 8f 0a 04 af e2 20 a3 0b 8f
>3a3338		01 04 af af 00 04 af 09 80 8f 00 04 af af 01 04
>3a3348		af 30 fa a9 00 8f 00 04 af c2 20 3b 18 69 0c 00
>3a3358		1b 28 60 08 c2 20 c9 40 00 b0 13 0a 0a 0a 18 69
>3a3368		00 0c 85 9e a9 af 00 69 00 00 85 a0 28 60 08 c2
>3a3378		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a3388		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20
>3a3398		3b 38 e9 03 00 1b c2 30 20 0c 1d 20 63 07 a5 23
>3a33a8		83 01 a9 2c 00 20 2a 22 e2 20 20 0c 1d 20 63 07
>3a33b8		a5 23 c9 08 b0 56 83 03 a9 2c 20 2a 22 20 0c 1d
>3a33c8		20 51 06 c2 20 38 a5 23 e9 00 00 85 23 a5 25 e9
>3a33d8		b0 00 85 25 30 36 c2 20 a3 01 aa 20 5b 33 a5 23
>3a33e8		a0 01 00 97 9e e2 20 a5 25 c8 c8 97 9e bf 18 f0
>3a33f8		3a 29 f1 85 0c a3 03 0a 29 0e 05 0c 87 9e 9f 18
>3a3408		f0 3a c2 20 3b 18 69 03 00 1b 28 60 08 c2 20 48
>3a3418		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>3a3428		29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20 3b 38
>3a3438		e9 04 00 1b c2 30 20 0c 1d 20 63 07 a5 23 83 01
>3a3448		a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 03
>3a3458		a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a3 01 20 5b
>3a3468		33 a3 03 a0 04 00 97 9e a5 23 a0 06 00 97 9e c2
>3a3478		20 3b 18 69 04 00 1b 28 60 08 c2 20 3b 38 e9 03
>3a3488		00 1b c2 30 20 0c 1d 20 63 07 a5 23 83 01 a9 2c
>3a3498		00 20 2a 22 e2 20 20 0c 1d 20 51 06 a5 23 d0 04
>3a34a8		83 03 80 04 a9 01 83 03 a9 2c 85 37 20 5f 22 b0
>3a34b8		20 c2 30 a3 01 aa 20 5b 33 e2 20 bf 18 f0 3a 29
>3a34c8		fe 85 0c a3 03 29 01 05 0c 9f 18 f0 3a 87 9e 80
>3a34d8		36 c2 30 20 1d 21 20 0c 1d 20 63 07 a5 23 c9 08
>3a34e8		00 b0 2e 0a 0a 0a 0a 85 0c a3 01 aa 20 5b 33 e2
>3a34f8		20 a3 03 29 01 05 0c 85 0c bf 18 f0 3a 29 8e 05
>3a3508		0c 87 9e 9f 18 f0 3a c2 20 3b 18 69 03 00 1b 28
>3a3518		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a3528		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>3a3538		08 c2 20 c9 04 00 b0 19 8d 00 01 a9 04 00 8d 02
>3a3548		01 18 ad 04 01 69 80 02 85 9e a9 af 00 85 a0 28
>3a3558		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a3568		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>3a3578		08 c2 20 c9 04 00 b0 19 8d 00 01 a9 0c 00 8d 02
>3a3588		01 18 ad 04 01 69 00 02 85 9e a9 af 00 85 a0 28
>3a3598		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a35a8		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>3a35b8		08 c2 20 3b 38 e9 06 00 1b c2 20 20 0c 1d 20 63
>3a35c8		07 a5 23 83 01 a9 2c 00 20 2a 22 20 0c 1d 20 63
>3a35d8		07 a5 23 83 03 a9 2c 00 20 2a 22 20 0c 1d 20 63
>3a35e8		07 a5 23 83 05 a9 2c 00 20 2a 22 20 0c 1d 20 51
>3a35f8		06 a3 01 20 38 35 a5 23 87 9e e2 20 38 a5 25 e9
>3a3608		b0 a0 02 00 97 9e a3 05 d0 0d e2 20 a3 03 29 07
>3a3618		a0 03 00 97 9e 80 0d e2 20 a3 03 29 07 09 08 a0
>3a3628		03 00 97 9e c2 20 3b 18 69 06 00 1b 28 60 08 c2
>3a3638		20 3b 38 e9 06 00 1b c2 20 20 0c 1d 20 63 07 a5
>3a3648		23 83 01 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a5
>3a3658		23 83 03 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a5
>3a3668		23 83 05 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a3
>3a3678		01 20 78 35 a5 23 a0 01 00 97 9e e2 20 38 a5 25
>3a3688		e9 b0 c8 c8 97 9e c2 20 a3 03 a0 04 00 97 9e a3
>3a3698		05 a0 06 00 97 9e c2 20 3b 18 69 06 00 1b 28 60
>3a36a8		08 c2 20 f4 00 00 c2 20 20 0c 1d 20 63 07 a5 23
>3a36b8		83 01 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a3 01
>3a36c8		20 78 35 a5 23 d0 06 e2 20 a9 00 80 04 e2 20 a9
>3a36d8		01 e2 20 a0 00 00 97 9e c2 20 68 28 60 08 c2 20
>3a36e8		3b 38 e9 04 00 1b c2 20 20 0c 1d 20 63 07 a5 23
>3a36f8		83 01 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23
>3a3708		83 03 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a3 01
>3a3718		20 78 35 a5 23 a0 0a 00 97 9e a3 03 a0 08 00 97
>3a3728		9e c2 20 3b 18 69 04 00 1b 28 60 0b 08 08 c2 20
>3a3738		48 a9 00 08 5b 68 28 e2 20 a9 00 8f 58 f0 3a af
>3a3748		5c f0 3a c9 b0 b0 1c 8f 24 04 af af 5b f0 3a 8f
>3a3758		23 04 af af 5a f0 3a 8f 22 04 af a9 10 8f 58 f0
>3a3768		3a 80 17 38 e9 b0 8f 04 04 af af 5b f0 3a 8f 03
>3a3778		04 af af 5a f0 3a 8f 02 04 af af 59 f0 3a d0 3c
>3a3788		af 58 f0 3a f0 1b af 5d f0 3a 8f 28 04 af af 5e
>3a3798		f0 3a 8f 29 04 af af 5f f0 3a 8f 2a 04 af 82 8b
>3a37a8		00 af 5d f0 3a 8f 08 04 af af 5e f0 3a 8f 09 04
>3a37b8		af af 5f f0 3a 8f 0a 04 af 82 70 00 af 58 f0 3a
>3a37c8		09 01 8f 58 f0 3a 89 10 f0 32 af 60 f0 3a 8f 28
>3a37d8		04 af af 61 f0 3a 8f 29 04 af af 62 f0 3a 8f 2a
>3a37e8		04 af af 63 f0 3a 8f 2b 04 af af 64 f0 3a 8f 2c
>3a37f8		04 af af 65 f0 3a 8f 2d 04 af 80 30 af 60 f0 3a
>3a3808		8f 08 04 af af 61 f0 3a 8f 09 04 af af 62 f0 3a
>3a3818		8f 0a 04 af af 63 f0 3a 8f 0b 04 af af 64 f0 3a
>3a3828		8f 0c 04 af af 65 f0 3a 8f 0d 04 af e2 20 af 69
>3a3838		f0 3a c9 b0 b0 20 8f 27 04 af af 68 f0 3a 8f 26
>3a3848		04 af af 67 f0 3a 8f 25 04 af af 58 f0 3a 09 20
>3a3858		8f 58 f0 3a 80 17 38 e9 b0 8f 07 04 af af 68 f0
>3a3868		3a 8f 06 04 af af 67 f0 3a 8f 05 04 af af 66 f0
>3a3878		3a d0 3e af 58 f0 3a 89 20 f0 1b af 6a f0 3a 8f
>3a3888		28 04 af af 6b f0 3a 8f 29 04 af af 6c f0 3a 8f
>3a3898		2a 04 af 82 8b 00 af 6a f0 3a 8f 08 04 af af 6b
>3a38a8		f0 3a 8f 09 04 af af 6c f0 3a 8f 0a 04 af 82 70
>3a38b8		00 af 58 f0 3a 09 02 8f 58 f0 3a 89 20 f0 32 af
>3a38c8		6d f0 3a 8f 28 04 af af 6e f0 3a 8f 29 04 af af
>3a38d8		6f f0 3a 8f 2a 04 af af 70 f0 3a 8f 2b 04 af af
>3a38e8		71 f0 3a 8f 2e 04 af af 72 f0 3a 8f 2f 04 af 80
>3a38f8		30 af 6d f0 3a 8f 08 04 af af 6e f0 3a 8f 09 04
>3a3908		af af 6f f0 3a 8f 0a 04 af af 70 f0 3a 8f 0b 04
>3a3918		af af 71 f0 3a 8f 0e 04 af af 72 f0 3a 8f 0f 04
>3a3928		af af 58 f0 3a 29 30 f0 43 c9 10 f0 76 c9 20 d0
>3a3938		03 82 8a 00 af 58 f0 3a 29 03 f0 23 c9 03 f0 23
>3a3948		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>3a3958		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 a9
>3a3968		01 80 02 a9 03 8f 20 04 af 82 7d 00 af 58 f0 3a
>3a3978		29 03 f0 23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b
>3a3988		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>3a3998		5e 1e e2 20 dc d4 08 a9 01 80 02 a9 03 8f 00 04
>3a39a8		af 80 34 af 58 f0 3a 29 01 0a 09 11 8f 20 04 af
>3a39b8		af 58 f0 3a 29 02 09 11 8f 00 04 af 80 19 af 58
>3a39c8		f0 3a 29 02 09 21 8f 20 04 af af 58 f0 3a 29 01
>3a39d8		0a 09 21 8f 00 04 af af 00 04 af 09 80 8f 00 04
>3a39e8		af af 58 f0 3a 29 30 f0 0f af 20 04 af 09 80 8f
>3a39f8		20 04 af ea ea ea ea ea af 01 04 af 89 80 d0 f8
>3a3a08		a9 00 8f 20 04 af 8f 00 04 af 28 2b 60 0b 08 e2
>3a3a18		20 c2 10 a9 00 a2 00 00 8f 59 f0 3a e8 e0 1a 00
>3a3a28		d0 f6 20 7e 22 c9 e6 f0 23 c9 e7 f0 5e 08 c2 20
>3a3a38		48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2
>3a3a48		20 29 ff 00 20 5e 1e e2 20 dc d4 08 20 2a 22 20
>3a3a58		0c 1d 20 51 06 c2 20 a5 23 8f 5a f0 3a e2 20 a5
>3a3a68		25 8f 5c f0 3a a9 2c 20 2a 22 20 0c 1d 20 51 06
>3a3a78		c2 20 a5 23 8f 5d f0 3a e2 20 a5 25 8f 5f f0 3a
>3a3a88		e2 20 a9 00 8f 59 f0 3a 82 74 00 20 2a 22 20 0c
>3a3a98		1d 20 51 06 c2 20 a5 23 8f 5a f0 3a e2 20 a5 25
>3a3aa8		8f 5c f0 3a a9 2c 20 2a 22 20 0c 1d 20 0d 07 c2
>3a3ab8		20 a5 23 8f 60 f0 3a 8d 00 01 a9 2c 00 20 2a 22
>3a3ac8		20 0c 1d 20 0d 07 c2 20 a5 23 8f 62 f0 3a 8d 02
>3a3ad8		01 a9 2c 00 20 2a 22 20 0c 1d 20 0d 07 c2 20 a5
>3a3ae8		23 8f 64 f0 3a c2 20 ad 04 01 8f 5d f0 3a e2 20
>3a3af8		ad 06 01 8f 5f f0 3a e2 20 a9 01 8f 59 f0 3a e2
>3a3b08		20 a9 9c 20 2a 22 20 7e 22 c9 e6 f0 23 c9 e7 f0
>3a3b18		5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3b28		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>3a3b38		20 2a 22 20 0c 1d 20 51 06 c2 20 a5 23 8f 67 f0
>3a3b48		3a e2 20 a5 25 8f 69 f0 3a a9 2c 20 2a 22 20 0c
>3a3b58		1d 20 51 06 c2 20 a5 23 8f 6a f0 3a e2 20 a5 25
>3a3b68		8f 6c f0 3a e2 20 a9 00 8f 66 f0 3a 82 74 00 20
>3a3b78		2a 22 20 0c 1d 20 51 06 c2 20 a5 23 8f 67 f0 3a
>3a3b88		e2 20 a5 25 8f 69 f0 3a a9 2c 20 2a 22 20 0c 1d
>3a3b98		20 0d 07 c2 20 a5 23 8f 6d f0 3a 8d 00 01 a9 2c
>3a3ba8		00 20 2a 22 20 0c 1d 20 0d 07 c2 20 a5 23 8f 6f
>3a3bb8		f0 3a 8d 02 01 a9 2c 00 20 2a 22 20 0c 1d 20 0d
>3a3bc8		07 c2 20 a5 23 8f 71 f0 3a c2 20 ad 04 01 8f 6a
>3a3bd8		f0 3a e2 20 ad 06 01 8f 6c f0 3a e2 20 a9 01 8f
>3a3be8		66 f0 3a c2 20 af 5d f0 3a cf 6a f0 3a d0 14 e2
>3a3bf8		20 af 5f f0 3a cf 6c f0 3a d0 08 c2 20 20 33 37
>3a3c08		28 2b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3c18		0a 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>3a3c28		d4 08 08 c2 30 20 0c 1d 20 63 07 a5 23 48 a9 2c
>3a3c38		00 20 2a 22 20 0c 1d 20 63 07 a4 23 fa 20 20 00
>3a3c48		28 60 08 20 3e 21 e2 20 a7 00 d0 03 4c f2 3c c9
>3a3c58		3a d0 03 4c f2 3c c9 22 d0 0b 20 18 1c 20 00 46
>3a3c68		a9 3b 20 2a 22 20 e2 04 90 44 20 20 54 90 3f a9
>3a3c78		3f 20 18 00 a9 20 20 18 00 20 10 00 e2 20 a5 ea
>3a3c88		c9 02 f0 49 c9 00 d0 03 82 84 00 c9 01 f0 5d 08
>3a3c98		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>3a3ca8		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2
>3a3cb8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a3cc8		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 c2 20 a9
>3a3cd8		00 4c 85 23 a9 00 00 85 25 e2 20 a9 02 85 27 c2
>3a3ce8		20 20 83 53 a9 0d 00 20 18 00 28 60 c2 20 a5 00
>3a3cf8		85 40 a5 02 85 42 a9 00 4c 85 00 a9 00 00 85 02
>3a3d08		20 42 5a c2 20 a5 40 85 00 a5 42 85 02 80 d0 c2
>3a3d18		20 a5 00 85 40 a5 02 85 42 a9 00 4c 85 00 a9 00
>3a3d28		00 85 02 20 d8 08 c2 20 a5 40 85 00 a5 42 85 02
>3a3d38		80 ad 08 20 3e 21 e2 20 a7 00 f0 47 c9 3a f0 43
>3a3d48		20 e2 04 90 40 20 20 54 90 3b 20 01 15 20 14 00
>3a3d58		e2 20 a0 00 00 97 16 a9 00 c8 97 16 c2 20 a5 16
>3a3d68		85 23 a5 18 85 25 e2 20 a9 02 85 27 20 83 53 20
>3a3d78		3e 21 a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 1d
>3a3d88		21 80 b0 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3d98		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>3a3da8		20 dc d4 08 08 20 0c 1d 20 51 06 e2 20 a9 5c 85
>3a3db8		a2 c2 20 a5 23 85 a3 e2 20 a5 25 85 a5 e2 20 a9
>3a3dc8		2c 85 37 20 5f 22 90 41 20 1d 21 20 0c 1d 20 0d
>3a3dd8		07 c2 20 a5 23 85 55 e2 20 a9 2c 85 37 20 5f 22
>3a3de8		90 27 20 1d 21 20 0c 1d 20 0d 07 c2 20 a5 23 85
>3a3df8		59 e2 20 a9 2c 85 37 20 5f 22 90 0d 20 1d 21 20
>3a3e08		0c 1d 20 0d 07 c2 20 a4 23 a6 59 a5 55 0b 8b 08
>3a3e18		22 a2 08 00 28 ab 2b 20 62 21 28 60 08 c2 20 48
>3a3e28		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>3a3e38		29 ff 00 20 5e 1e e2 20 dc d4 08 08 e2 20 20 3e
>3a3e48		21 20 20 54 90 64 a9 8f 20 2a 22 a9 01 20 28 1a
>3a3e58		a2 01 00 a9 00 8f 00 4d 00 20 0c 1d 20 51 06 c2
>3a3e68		20 a5 23 9f 00 4d 00 e2 20 af 00 4d 00 1a 8f 00
>3a3e78		4d 00 30 55 e8 e8 20 3e 21 a7 00 c9 2c f0 25 c9
>3a3e88		90 d0 27 20 1d 21 20 9e 66 c2 20 a5 c0 85 23 e2
>3a3e98		20 a5 c2 85 25 64 26 a5 ea 09 80 85 ea 85 27 20
>3a3ea8		83 53 28 60 20 1d 21 4c 61 3e 08 c2 20 48 a9 00
>3a3eb8		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a3ec8		00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08
>3a3ed8		5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00
>3a3ee8		20 5e 1e e2 20 dc d4 08 08 20 3e 21 e2 20 a7 00
>3a3ef8		f0 28 c9 3a f0 24 20 e2 04 90 21 20 20 54 90 1c
>3a3f08		20 43 3f 20 83 53 20 3e 21 a7 00 f0 0d c9 3a f0
>3a3f18		09 c9 2c d0 07 20 1d 21 80 cf 28 60 08 c2 20 48
>3a3f28		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>3a3f38		29 ff 00 20 5e 1e e2 20 dc d4 08 08 a5 02 85 42
>3a3f48		a5 00 85 40 a5 1c 85 46 a5 1a 85 44 c2 20 a5 3a
>3a3f58		d0 04 a5 38 f0 4e a5 38 85 00 a5 3a 85 02 a5 3c
>3a3f68		85 1a a5 3e 85 1c e2 20 a7 00 f0 53 c9 3a f0 4f
>3a3f78		c9 2c d0 03 20 1d 21 20 3e 21 a7 00 c9 22 f0 4e
>3a3f88		20 fb 04 b0 4e 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3f98		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>3a3fa8		20 dc d4 08 c2 20 a9 00 00 85 1a a9 36 00 85 1c
>3a3fb8		18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02 e2
>3a3fc8		20 a9 80 85 35 a9 ab 85 37 20 74 21 80 a9 20 18
>3a3fd8		1c 80 03 20 0a 1b c2 20 a5 00 85 38 a5 02 85 3a
>3a3fe8		a5 1a 85 3c a5 1c 85 3e a5 44 85 1a a5 46 85 1c
>3a3ff8		a5 40 85 00 a5 42 85 02 28 60 20 62 21 60 64 38
>3a4008		64 3a 64 3c 64 3e 60 20 24 00 60 20 0c 1d c2 20
>3a4018		a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0 22 20 1d
>3a4028		21 20 0c 1d c2 20 a5 26 d0 35 68 85 08 68 85 0a
>3a4038		c2 20 a5 23 87 08 e2 20 a0 02 00 a5 25 97 08 60
>3a4048		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>3a4058		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08
>3a4068		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08
>3a4078		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 20 0c
>3a4088		1d c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0
>3a4098		19 20 1d 21 20 0c 1d c2 20 a5 25 d0 2c 68 85 08
>3a40a8		68 85 0a c2 20 a5 23 87 08 60 08 c2 20 48 a9 00
>3a40b8		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a40c8		00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08
>3a40d8		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>3a40e8		20 5e 1e e2 20 dc d4 08 20 0c 1d c2 20 a5 25 48
>3a40f8		a5 23 48 e2 20 a7 00 c9 2c d0 1f 20 1d 21 20 0c
>3a4108		1d e2 20 a5 24 d0 32 c2 20 a5 25 d0 2c 68 85 08
>3a4118		68 85 0a e2 20 a5 23 87 08 60 08 c2 20 48 a9 00
>3a4128		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a4138		00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08
>3a4148		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>3a4158		20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a4168		68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20
>3a4178		5e 1e e2 20 dc d4 08 08 e2 20 a7 00 f0 05 20 1d
>3a4188		21 80 f7 28 60 08 28 60 08 28 60 08 28 60 08 c2
>3a4198		20 a5 1c 20 25 1e a5 1a 20 25 1e a5 02 48 a5 00
>3a41a8		48 20 62 21 a5 02 20 25 1e a5 00 20 25 1e 68 85
>3a41b8		00 68 85 02 20 3e 21 20 20 54 b0 1f 08 c2 20 48
>3a41c8		a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00 c2 20
>3a41d8		29 ff 00 20 5e 1e e2 20 dc d4 08 e2 20 a5 ea 20
>3a41e8		3c 1e a5 e9 20 3c 1e c2 20 a5 e7 20 25 1e 20 3e
>3a41f8		21 e2 20 a7 00 c9 8a d0 6a a5 ea c9 00 f0 04 c9
>3a4208		01 f0 00 20 1d 21 20 0c 1d 20 83 53 e2 20 a9 9c
>3a4218		20 2a 22 20 0c 1d c2 20 a5 27 20 25 1e a5 25 20
>3a4228		25 1e a5 23 20 25 1e e2 20 a9 9d 85 37 20 5f 22
>3a4238		90 1b 20 1d 21 20 0c 1d e2 20 a5 27 20 25 1e c2
>3a4248		20 a5 25 20 25 1e a5 23 20 25 1e 80 14 c2 20 a9
>3a4258		00 00 20 25 1e a9 00 00 20 25 1e a9 01 00 20 25
>3a4268		1e 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4278		02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>3a4288		d4 08 08 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2
>3a4298		20 48 a9 00 08 5b 68 28 c2 30 a4 33 c8 c8 c2 20
>3a42a8		b9 0c 00 85 e7 b9 0e 00 e2 20 85 e9 b9 10 00 85
>3a42b8		ea c2 20 5a 20 21 52 7a c2 20 b9 00 00 85 29 b9
>3a42c8		02 00 85 2b e2 20 b9 04 00 85 2d c2 20 5a 20 e3
>3a42d8		27 20 83 53 7a c2 20 b9 06 00 85 29 b9 08 00 85
>3a42e8		2b e2 20 b9 0a 00 85 2d c2 20 b9 02 00 30 0a 20
>3a42f8		6c 2a 20 1a 06 f0 28 80 08 20 2c 2a 20 1a 06 f0
>3a4308		1e c2 20 b9 12 00 85 00 b9 14 00 85 02 b9 16 00
>3a4318		85 1a b9 18 00 85 1c e2 20 a9 03 85 dc 80 17 a2
>3a4328		23 08 20 e9 19 c2 20 18 a5 33 69 1a 00 85 33 a5
>3a4338		35 69 00 00 85 35 ab 28 60 08 a5 1a 48 a5 1c 48
>3a4348		20 3e 21 20 d8 08 a5 23 f0 26 20 1d 24 90 42 e2
>3a4358		20 a9 02 85 dc 20 62 21 c2 20 68 20 25 1e 68 20
>3a4368		25 1e a5 02 20 25 1e a5 00 20 25 1e e6 31 28 60
>3a4378		68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a4388		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>3a4398		08 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a43a8		06 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>3a43b8		d4 08 08 c2 30 a5 31 f0 1e 20 47 1e 85 00 20 47
>3a43c8		1e 85 02 20 47 1e 85 1a 20 47 1e 85 1c c6 31 e2
>3a43d8		20 a9 03 85 dc 28 60 08 c2 20 48 a9 00 08 5b 68
>3a43e8		28 e2 20 a9 07 8f d3 08 00 c2 20 29 ff 00 20 5e
>3a43f8		1e e2 20 dc d4 08 08 20 0c 1d 20 1a 06 f0 1c e2
>3a4408		20 a9 97 20 2a 22 20 d8 08 20 1a 06 f0 12 20 1d
>3a4418		24 90 2c e2 20 a9 02 85 dc 80 03 20 62 21 28 60
>3a4428		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>3a4438		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08
>3a4448		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d3 08
>3a4458		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 e2
>3a4468		20 a9 01 85 dc 28 60 08 20 3e 21 20 d8 08 a5 23
>3a4478		f0 0d 20 1d 24 90 27 e2 20 a9 02 85 dc 28 60 08
>3a4488		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a4498		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2
>3a44a8		20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d3 08 00
>3a44b8		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 20 8b 19
>3a44c8		20 ab 10 20 20 51 60 08 a7 00 10 03 20 1d 21 20
>3a44d8		20 54 b0 03 4c 46 45 e2 20 a5 ea 48 a5 e9 48 a5
>3a44e8		e8 48 a5 e7 48 20 7e 22 c9 8f d0 0e a9 8f 20 2a
>3a44f8		22 a9 00 8f 00 4d 00 20 0d 1b 20 3e 21 e2 20 a7
>3a4508		00 c9 8a f0 03 4c 46 45 20 1d 21 20 0c 1d 68 85
>3a4518		e7 68 85 e8 68 85 e9 68 85 ea 29 80 f0 1b 20 93
>3a4528		51 90 3a c2 20 a0 09 00 b7 08 85 c0 e2 20 c8 c8
>3a4538		b7 08 85 c2 20 8a 68 80 03 20 83 53 28 60 08 c2
>3a4548		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a4558		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20
>3a4568		48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00 c2
>3a4578		20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 e2 20 20
>3a4588		7e 22 c9 00 f0 6d 20 0c 1d e2 20 a5 27 c9 ff f0
>3a4598		1b c9 02 d0 05 20 00 46 80 12 c9 00 d0 05 20 1e
>3a45a8		46 80 09 c9 01 d0 4f 20 31 46 80 00 20 3e 21 a7
>3a45b8		00 f0 40 c9 3a f0 3c c9 2c f0 23 c9 3b f0 24 08
>3a45c8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a45d8		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 a9 09
>3a45e8		20 18 00 20 1d 21 20 3e 21 a7 00 f0 09 c9 3a f0
>3a45f8		05 80 93 20 d7 03 28 60 08 8b 08 c2 20 48 a9 00
>3a4608		08 5b 68 28 e2 20 a0 00 00 b7 23 f0 06 20 18 00
>3a4618		c8 80 f6 ab 28 60 08 c2 20 20 60 15 a5 16 85 23
>3a4628		a5 18 85 25 20 00 46 28 60 08 20 e9 5d c2 20 a5
>3a4638		16 85 23 a5 18 85 25 20 00 46 28 60 08 e2 20 85
>3a4648		b5 4a 4a 4a 4a 29 0f 18 69 30 97 16 c8 a5 b5 29
>3a4658		0f 18 69 30 97 16 c8 28 60 e2 20 a9 8f 20 2a 22
>3a4668		08 20 0c 1d e2 20 c2 10 af 0e 08 af 09 08 8f 0e
>3a4678		08 af 20 01 15 a0 00 00 af 06 08 af 20 44 46 a9
>3a4688		2f 97 16 c8 af 09 08 af 20 44 46 a9 2f 97 16 c8
>3a4698		af 0f 08 af 20 44 46 af 0a 08 af 20 44 46 a9 00
>3a46a8		97 16 af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5 16
>3a46b8		85 23 a5 18 85 25 e2 20 a9 02 85 27 28 e2 20 20
>3a46c8		1d 21 60 e2 20 a9 8f 20 2a 22 08 20 0c 1d e2 20
>3a46d8		c2 10 af 0e 08 af 09 08 8f 0e 08 af 20 01 15 a0
>3a46e8		00 00 af 04 08 af 29 7f 20 44 46 a9 3a 97 16 c8
>3a46f8		af 02 08 af 20 44 46 a9 3a 97 16 c8 af 00 08 af
>3a4708		20 44 46 a9 00 97 16 af 0e 08 af 29 f7 8f 0e 08
>3a4718		af c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>3a4728		27 28 e2 20 20 1d 21 60 e2 20 a9 8f 20 2a 22 08
>3a4738		20 0c 1d e2 20 a9 01 85 27 a9 03 8f 00 e2 af a9
>3a4748		01 8f 01 e2 af c2 30 af 84 e8 af 8f 08 e2 af af
>3a4758		84 e8 af 29 ff 7f 8f 0a e2 af a9 ff ff 8f 0c e2
>3a4768		af a9 ff 7f 8f 0e e2 af ea ea ea af 08 e2 af 85
>3a4778		23 af 0a e2 af 85 25 28 e2 20 20 1d 21 60 e2 20
>3a4788		a9 8f 20 2a 22 08 20 0c 1d 22 28 10 00 e2 20 85
>3a4798		23 64 24 64 25 64 26 a9 00 85 27 28 e2 20 20 1d
>3a47a8		21 60 e2 20 a9 8f 20 2a 22 08 c2 30 20 0c 1d 20
>3a47b8		e3 06 c2 20 a5 25 48 a5 23 48 20 3e 21 e2 20 a7
>3a47c8		00 c9 2c f0 03 4c 21 48 20 1d 21 20 0c 1d 20 0d
>3a47d8		07 c2 20 a5 23 48 20 3e 21 e2 20 a7 00 c9 2c f0
>3a47e8		03 4c 21 48 20 1d 21 20 0c 1d 20 0d 07 c2 20 a5
>3a47f8		23 85 8f e2 20 a5 25 85 91 c2 20 68 85 29 a9 00
>3a4808		00 85 2b 68 85 23 68 85 25 e2 20 a9 02 85 27 20
>3a4818		59 17 e2 20 20 1d 21 28 60 08 c2 20 48 a9 00 08
>3a4828		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a4838		20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a4848		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a4858		5e 1e e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 08 c2
>3a4868		30 20 0c 1d e2 20 a5 27 c9 02 f0 03 4c e3 48 c2
>3a4878		20 a5 25 48 a5 23 48 20 3e 21 e2 20 a7 00 c9 2c
>3a4888		f0 03 4c 02 49 20 1d 21 20 0c 1d e2 20 a5 27 c9
>3a4898		00 d0 48 c2 20 a5 23 85 8f c2 20 68 85 23 68 85
>3a48a8		25 e2 20 a9 02 85 27 e2 20 a0 00 00 b7 23 f0 03
>3a48b8		c8 80 f9 c2 20 98 38 e5 8f 30 09 85 29 a9 00 00
>3a48c8		85 2b 80 07 a9 00 00 85 29 85 2b e2 20 a9 00 85
>3a48d8		2d 20 59 17 e2 20 20 1d 21 28 60 08 c2 20 48 a9
>3a48e8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a48f8		ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00
>3a4908		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a4918		00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08
>3a4928		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>3a4938		20 5e 1e e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 08
>3a4948		c2 30 20 0c 1d e2 20 a5 27 c9 02 f0 03 4c ac 49
>3a4958		c2 20 a5 25 48 a5 23 48 20 3e 21 e2 20 a7 00 c9
>3a4968		2c f0 03 4c cb 49 20 1d 21 20 0c 1d e2 20 a5 27
>3a4978		c9 00 d0 30 c2 20 a5 23 85 8f c2 20 a9 00 00 85
>3a4988		29 a9 00 00 85 2b e2 20 a9 00 85 2d c2 20 68 85
>3a4998		23 68 85 25 e2 20 a9 02 85 27 20 59 17 e2 20 20
>3a49a8		1d 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a49b8		a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>3a49c8		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a49d8		02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>3a49e8		d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a49f8		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>3a4a08		08 e2 20 a9 8f 20 2a 22 20 0c 1d c2 10 e2 20 a5
>3a4a18		27 c9 02 d0 23 c2 20 a5 00 85 40 a5 02 85 42 a5
>3a4a28		23 85 00 a5 25 85 02 20 d8 08 a5 40 85 00 a5 42
>3a4a38		85 02 e2 20 20 1d 21 60 08 c2 20 48 a9 00 08 5b
>3a4a48		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>3a4a58		5e 1e e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 08 20
>3a4a68		0c 1d c2 10 e2 20 a5 27 c9 00 d0 1a 20 60 15 c2
>3a4a78		20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28
>3a4a88		e2 20 20 1d 21 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4a98		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>3a4aa8		e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 08 20 0c 1d
>3a4ab8		20 e3 06 c2 20 64 0c 64 0e e2 30 a0 00 b7 23 c9
>3a4ac8		20 f0 04 c9 24 d0 03 c8 80 f3 b7 23 20 0c 05 90
>3a4ad8		1e c2 20 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e 06
>3a4ae8		0c 26 0e e2 20 20 2d 05 05 0c 85 0c c8 80 db c2
>3a4af8		20 a5 0c 85 23 a5 0e 85 25 e2 20 a9 00 85 27 28
>3a4b08		e2 20 20 1d 21 60 e2 20 a9 8f 20 2a 22 08 20 0c
>3a4b18		1d 20 51 06 20 01 15 e2 30 a0 ff a9 00 97 16 88
>3a4b28		a5 23 29 0f aa bf 00 d0 3a 97 16 88 a5 23 29 f0
>3a4b38		4a 4a 4a 4a aa bf 00 d0 3a 97 16 88 a5 24 85 23
>3a4b48		a5 25 85 24 a5 26 85 25 a9 00 85 26 a5 23 d0 d0
>3a4b58		a5 24 d0 cc a5 25 d0 c8 98 38 65 16 85 23 a5 17
>3a4b68		85 24 a5 18 85 25 a5 19 85 26 a9 02 85 27 28 e2
>3a4b78		20 20 1d 21 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4b88		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>3a4b98		20 dc d4 08 e2 20 a9 8f 20 2a 22 20 0c 1d e2 20
>3a4ba8		a5 27 c9 02 d0 1f 8b a5 25 48 ab c2 10 a6 23 20
>3a4bb8		ed 15 ab 84 23 c2 20 64 25 e2 20 a9 00 85 27 e2
>3a4bc8		20 20 1d 21 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4bd8		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>3a4be8		20 dc d4 08 e2 20 a9 8f 20 2a 22 20 0c 1d 20 51
>3a4bf8		06 e2 20 a5 25 c9 b0 90 10 c9 f0 b0 0c 8b 48 ab
>3a4c08		a6 23 22 44 11 00 ab 80 04 e2 20 a7 23 85 23 64
>3a4c18		24 64 25 64 26 e2 20 20 1d 21 60 08 c2 20 48 a9
>3a4c28		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a4c38		ff 00 20 5e 1e e2 20 dc d4 08 e2 20 a9 8f 20 2a
>3a4c48		22 20 0c 1d 20 51 06 e2 20 a5 25 c9 b0 90 22 c9
>3a4c58		f0 b0 1e 8b 48 ab a6 23 da 22 44 11 00 85 0c fa
>3a4c68		e8 da 22 44 11 00 85 0d fa e8 22 44 11 00 ab 80
>3a4c78		0d c2 20 a7 23 85 0c e2 20 a0 02 00 b7 23 85 25
>3a4c88		64 26 c2 20 a5 0c 85 23 e2 20 20 1d 21 60 08 c2
>3a4c98		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a4ca8		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 e2 20 a9
>3a4cb8		8f 20 2a 22 20 0c 1d 20 51 06 e2 20 a5 25 c9 b0
>3a4cc8		90 1d c9 f0 b0 19 8b 48 ab a6 23 da 22 44 11 00
>3a4cd8		85 23 fa e8 22 44 11 00 85 24 ab c2 20 80 06 c2
>3a4ce8		20 a7 23 85 23 64 25 e2 20 20 1d 21 60 08 c2 20
>3a4cf8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a4d08		20 29 ff 00 20 5e 1e e2 20 dc d4 08 e2 20 a9 8f
>3a4d18		20 2a 22 20 0c 1d e2 20 a5 27 c9 00 d0 24 20 01
>3a4d28		15 a5 23 87 16 a9 00 a0 01 00 97 16 c2 20 a5 16
>3a4d38		85 23 a5 18 85 25 e2 20 a9 02 85 27 e2 20 20 1d
>3a4d48		21 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a4d58		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>3a4d68		08 e2 20 a9 8f 20 2a 22 20 0c 1d e2 20 a5 27 c9
>3a4d78		02 d0 14 a7 23 85 23 64 24 64 25 64 26 a9 00 85
>3a4d88		27 e2 20 20 1d 21 60 08 c2 20 48 a9 00 08 5b 68
>3a4d98		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e
>3a4da8		1e e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 20 0c 1d
>3a4db8		e2 20 a5 27 c9 00 d0 39 e2 20 a5 26 d0 52 a5 25
>3a4dc8		d0 4e a5 24 d0 4a c2 10 20 01 15 a4 23 e2 20 a9
>3a4dd8		00 97 16 88 30 07 a9 20 97 16 88 10 fb a9 02 85
>3a4de8		27 c2 20 a5 16 85 23 a5 18 85 25 e2 20 20 1d 21
>3a4df8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a4e08		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>3a4e18		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>3a4e28		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 e2
>3a4e38		20 a9 8f 20 2a 22 20 0c 1d e2 20 a5 27 c9 00 d0
>3a4e48		39 e2 20 a5 26 d0 52 a5 25 d0 4e a5 24 d0 4a c2
>3a4e58		10 20 01 15 a4 23 e2 20 a9 00 97 16 88 30 07 a9
>3a4e68		09 97 16 88 10 fb a9 02 85 27 c2 20 a5 16 85 23
>3a4e78		a5 18 85 25 e2 20 20 1d 21 60 08 c2 20 48 a9 00
>3a4e88		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a4e98		00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08
>3a4ea8		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>3a4eb8		20 5e 1e e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 20
>3a4ec8		0c 1d e2 20 a5 27 c9 00 f0 23 c9 01 f0 3e 08 c2
>3a4ed8		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a4ee8		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 c2 20 a5
>3a4ef8		25 10 21 49 ff ff 85 25 a5 23 49 ff ff 18 69 01
>3a4f08		00 85 23 a5 25 69 00 00 85 25 80 08 e2 20 a5 26
>3a4f18		29 7f 85 26 e2 20 20 1d 21 60 e2 20 a9 8f 20 2a
>3a4f28		22 20 0c 1d e2 20 a5 27 c9 00 d0 25 c2 20 a5 25
>3a4f38		30 12 d0 04 a5 23 f0 13 a9 00 00 85 25 a9 01 00
>3a4f48		85 23 80 07 a9 ff ff 85 25 85 23 e2 20 20 1d 21
>3a4f58		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a4f68		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>3a4f78		e2 20 a9 8f 20 2a 22 20 0c 1d 20 51 06 e2 20 20
>3a4f88		1d 21 60 e2 20 a9 8f 20 2a 22 20 0c 1d 20 bf 07
>3a4f98		20 49 62 e2 20 20 1d 21 60 e2 20 a9 8f 20 2a 22
>3a4fa8		20 0c 1d 20 bf 07 20 78 62 e2 20 20 1d 21 60 e2
>3a4fb8		20 a9 8f 20 2a 22 20 0c 1d 20 bf 07 20 a7 62 e2
>3a4fc8		20 20 1d 21 60 e2 20 a9 8f 20 2a 22 20 0c 1d 20
>3a4fd8		bf 07 20 d5 62 e2 20 20 1d 21 60 e2 20 a9 8f 20
>3a4fe8		2a 22 20 0c 1d 20 bf 07 20 fe 63 e2 20 20 1d 21
>3a4ff8		60 e2 20 a9 8f 20 2a 22 20 0c 1d 20 bf 07 20 d4
>3a5008		63 e2 20 20 1d 21 60 e2 20 a9 8f 20 2a 22 20 0c
>3a5018		1d 20 bf 07 20 20 64 e2 20 20 1d 21 60 e2 20 a9
>3a5028		8f 20 2a 22 20 0c 1d 20 bf 07 20 b4 64 e2 20 20
>3a5038		1d 21 60 e2 20 a9 8f 20 2a 22 20 0c 1d 20 bf 07
>3a5048		20 36 65 e2 20 20 1d 21 60 00 ea 60 08 0b 08 c2
>3a5058		20 48 a9 00 08 5b 68 28 c2 30 c2 20 a9 00 00 85
>3a5068		d9 e2 20 a9 36 85 db c2 30 a9 00 00 a0 00 00 97
>3a5078		d9 a0 02 00 97 d9 a0 04 00 97 d9 20 f3 20 2b 28
>3a5088		60 8b 08 c2 20 a9 00 00 85 1a a9 36 00 85 1c 20
>3a5098		f3 20 20 d3 23 28 ab 60 08 c2 20 64 55 a9 ff 7f
>3a50a8		85 59 20 d7 03 20 7e 22 29 ff 00 c9 00 00 f0 2c
>3a50b8		c9 81 00 f0 1a 20 3e 21 20 d8 08 a5 23 85 55 20
>3a50c8		7e 22 29 ff 00 c9 00 00 f0 12 c9 81 00 d0 2a 20
>3a50d8		2a 22 20 3e 21 20 d8 08 a5 23 85 59 a5 1c 48 a5
>3a50e8		1a 48 a5 02 48 a5 00 48 20 8b 18 68 85 00 68 85
>3a50f8		02 68 85 1a 68 85 1c 28 60 08 c2 20 48 a9 00 08
>3a5108		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a5118		20 5e 1e e2 20 dc d4 08 08 08 c2 20 48 a9 00 08
>3a5128		5b 68 28 c2 20 64 e4 64 e7 e2 20 64 e6 64 e9 64
>3a5138		ea c2 20 38 a5 d9 69 04 00 85 e1 e2 20 a5 db 69
>3a5148		00 85 e3 28 60 c9 5f f0 1a c9 3a b0 04 c9 30 b0
>3a5158		12 c9 5b b0 04 c9 41 b0 0a c9 7b b0 04 c9 61 b0
>3a5168		02 18 60 38 60 08 e2 20 c2 10 a0 00 00 b7 0c f0
>3a5178		0a d7 e7 d0 13 c8 c0 08 00 d0 f2 b7 e7 20 56 05
>3a5188		20 4d 51 b0 03 28 38 60 28 18 60 08 e2 20 c2 10
>3a5198		a0 00 00 a2 00 00 b7 e7 f0 0b 20 56 05 9f 00 4e
>3a51a8		00 c8 e8 80 f1 a9 00 9f 00 4e 00 c2 20 a9 00 4e
>3a51b8		85 e7 e2 20 a9 00 85 e9 c2 20 a5 e4 85 08 d0 06
>3a51c8		e2 20 a5 e6 f0 4d e2 20 a5 e6 85 0a a5 ea a0 00
>3a51d8		00 d7 08 d0 17 c2 20 18 a5 08 69 01 00 85 0c e2
>3a51e8		20 a5 0a 69 00 85 0e 20 6d 51 b0 2a a0 0d 00 c2
>3a51f8		20 b7 08 85 0c c8 c8 e2 20 b7 08 85 0e d0 06 c2
>3a5208		20 a5 0c f0 0e c2 20 a5 0c 85 08 e2 20 a5 0e 85
>3a5218		0a 80 b9 28 18 60 28 38 60 08 20 93 51 b0 1f 08
>3a5228		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08
>3a5238		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 c2 30
>3a5248		a0 09 00 b7 08 85 23 c8 c8 b7 08 85 25 e2 20 a0
>3a5258		00 00 b7 08 85 27 28 60 08 c2 20 18 a5 e1 69 10
>3a5268		00 85 08 e2 20 a5 e3 69 00 85 0a c5 bc 90 27 c2
>3a5278		20 a5 08 c5 ba 90 1f 08 c2 20 48 a9 00 08 5b 68
>3a5288		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5e
>3a5298		1e e2 20 dc d4 08 c2 20 a5 e1 85 c0 e2 20 a5 e3
>3a52a8		85 c2 c2 20 a5 08 85 e1 e2 20 a5 0a 85 e3 28 60
>3a52b8		08 e2 20 a5 27 c5 ea f0 33 a5 ea c9 00 d0 05 20
>3a52c8		51 06 80 2f c9 01 d0 05 20 bf 07 80 26 08 c2 20
>3a52d8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a52e8		20 29 ff 00 20 5e 1e e2 20 dc d4 08 c9 02 d0 03
>3a52f8		20 f3 16 c2 10 20 60 52 c2 30 18 a5 c0 69 01 00
>3a5308		85 08 e2 20 a5 c2 69 00 85 0a a0 00 00 a9 00 97
>3a5318		08 c8 c0 08 00 d0 f8 a0 00 00 b7 e7 f0 10 20 56
>3a5328		05 20 4d 51 90 08 97 08 c8 c0 08 00 d0 ec c2 20
>3a5338		a0 09 00 a5 23 97 c0 a5 25 c8 c8 97 c0 a5 e4 a0
>3a5348		0d 00 97 c0 c8 c8 e2 20 a5 e6 97 c0 c2 20 a5 c0
>3a5358		85 e4 e2 20 a5 c2 85 e6 e2 20 a0 00 00 a5 27 97
>3a5368		c0 c9 02 f0 02 28 60 c2 20 a5 23 85 c0 e2 20 a5
>3a5378		25 85 c2 20 0f 13 20 24 13 80 ea 08 c2 30 a5 e4
>3a5388		d0 06 e2 20 a5 e6 f0 05 20 93 51 b0 05 20 b8 52
>3a5398		80 4e e2 20 a5 27 c5 ea f0 33 a5 ea c9 00 d0 05
>3a53a8		20 51 06 80 2c c9 01 d0 05 20 bf 07 80 23 08 c2
>3a53b8		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a53c8		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 c9 02 f0
>3a53d8		11 c2 30 a0 09 00 a5 23 97 08 c8 c8 a5 25 97 08
>3a53e8		28 60 20 f3 16 a0 09 00 b7 08 85 c0 c8 c8 e2 20
>3a53f8		b7 08 85 c2 20 0f 13 20 43 13 e2 20 a5 27 c9 02
>3a5408		f0 02 80 cd c2 20 a5 23 85 c0 e2 20 a5 25 85 c2
>3a5418		20 0f 13 20 24 13 80 b9 08 20 3e 21 e2 20 a7 00
>3a5428		20 e2 04 90 42 c2 20 a5 00 85 e7 e2 20 a5 02 85
>3a5438		e9 20 1d 21 a7 00 f0 0d c9 24 f0 14 c9 25 f0 09
>3a5448		20 4d 51 b0 ec a9 01 80 0c 20 1d 21 a9 00 80 05
>3a5458		20 1d 21 a9 02 85 ea 20 7e 22 c9 8f d0 06 a5 ea
>3a5468		09 80 85 ea 28 38 60 28 18 60 08 c2 20 18 a5 23
>3a5478		65 29 85 23 a5 25 65 2b 85 25 28 60 08 c2 20 38
>3a5488		a5 23 e5 29 85 23 a5 25 e5 2b 85 25 28 60 08 c2
>3a5498		20 3b 38 e9 0a 00 1b c2 30 a9 00 00 83 01 83 03
>3a54a8		83 05 83 07 83 09 a5 25 10 18 a9 00 80 83 01 a5
>3a54b8		25 49 ff ff 85 25 a5 23 49 ff ff 1a 85 23 d0 02
>3a54c8		e6 25 a5 2b 10 1a a3 01 49 00 80 83 01 a5 2b 49
>3a54d8		ff ff 85 2b a5 29 49 ff ff 1a 85 29 d0 02 e6 2b
>3a54e8		a5 25 f0 04 a5 2b d0 5a a5 23 8f 00 01 00 a5 29
>3a54f8		8f 02 01 00 af 04 01 00 83 03 af 06 01 00 83 05
>3a5508		a5 25 8f 00 01 00 a5 29 8f 02 01 00 18 af 04 01
>3a5518		00 63 05 83 05 af 06 01 00 63 07 83 07 a5 23 8f
>3a5528		00 01 00 a5 2b 8f 02 01 00 18 af 04 01 00 63 05
>3a5538		83 05 af 06 01 00 63 07 83 07 a3 07 f0 23 a3 09
>3a5548		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0d
>3a5558		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>3a5568		08 c2 30 a3 01 10 16 a3 05 49 ff ff 83 05 a3 03
>3a5578		49 ff ff 1a 83 03 d0 05 a3 05 1a 83 05 a3 03 85
>3a5588		23 a3 05 85 25 c2 20 3b 18 69 0a 00 1b 28 60 08
>3a5598		c2 20 a5 23 c5 29 a5 25 e5 2b 50 03 49 00 80 30
>3a55a8		06 64 23 64 25 80 07 a9 ff ff 85 23 85 25 28 60
>3a55b8		08 c2 20 a5 23 c5 29 d0 0c a5 25 c5 2b d0 06 64
>3a55c8		23 64 25 80 16 a5 29 c5 23 a5 2b e5 25 50 03 49
>3a55d8		00 80 10 eb a9 ff ff 85 23 85 25 28 60 08 c2 20
>3a55e8		a5 2b c5 25 d0 0f a5 29 c5 23 d0 09 a9 ff ff 85
>3a55f8		23 85 25 80 04 64 23 64 25 28 60 08 c2 20 a5 2b
>3a5608		c5 25 d0 0c a5 29 c5 23 d0 06 64 23 64 25 80 07
>3a5618		a9 ff ff 85 23 85 25 28 60 08 c2 20 a5 23 c5 29
>3a5628		d0 0f a5 25 c5 2b d0 09 a9 ff ff 85 23 85 25 80
>3a5638		13 a5 29 c5 23 a5 2b e5 25 50 03 49 00 80 30 e8
>3a5648		64 23 64 25 28 60 08 c2 20 a5 23 c5 29 d0 0f a5
>3a5658		25 c5 2b d0 09 a9 ff ff 85 23 85 25 80 13 a5 23
>3a5668		c5 29 a5 25 e5 2b 50 03 49 00 80 30 e8 64 23 64
>3a5678		25 28 60 08 c2 20 8f 12 01 00 8a 8f 10 01 00 af
>3a5688		16 01 00 aa af 14 01 00 28 60 08 e2 20 a9 03 8f
>3a5698		00 e2 af a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2
>3a56a8		af a5 25 8f 0a e2 af a9 00 00 8f 0c e2 af a9 00
>3a56b8		01 8f 0e e2 af ea ea ea ea ea ea af 08 e2 af 85
>3a56c8		23 af 0a e2 af 85 25 a9 01 00 85 27 28 60 08 e2
>3a56d8		20 a9 40 8f 00 e2 af 80 09 08 e2 20 a9 48 8f 00
>3a56e8		e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af
>3a56f8		a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e
>3a5708		e2 af ea ea ea e2 20 af 06 e2 af 29 07 d0 10 c2
>3a5718		20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60 20
>3a5728		c2 57 80 f9 08 e2 20 a9 01 8f 01 e2 af a9 00 8f
>3a5738		00 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2
>3a5748		af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea
>3a5758		e2 20 af 05 e2 af 29 17 d0 10 c2 20 af 08 e2 af
>3a5768		85 23 af 0a e2 af 85 25 28 60 20 c2 57 80 f9 08
>3a5778		e2 20 a9 00 8f 01 e2 af a9 00 8f 00 e2 af c2 20
>3a5788		a5 23 8f 08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c
>3a5798		e2 af a5 2b 8f 0e e2 af ea ea ea e2 20 af 04 e2
>3a57a8		af 29 07 d0 10 c2 20 af 08 e2 af 85 23 af 0a e2
>3a57b8		af 85 25 28 60 20 c2 57 80 f9 e2 20 89 01 f0 20
>3a57c8		00 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0c 8f
>3a57d8		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>3a57e8		89 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a57f8		a9 0d 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>3a5808		dc d4 08 89 04 f0 1f 08 c2 20 48 a9 00 08 5b 68
>3a5818		28 e2 20 a9 0e 8f d3 08 00 c2 20 29 ff 00 20 5e
>3a5828		1e e2 20 dc d4 08 60 08 e2 20 a9 00 8f 01 e2 af
>3a5838		a9 02 8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9
>3a5848		00 00 8f 0e e2 af a5 23 8f 08 e2 af a5 25 8f 0a
>3a5858		e2 af ea ea ea e2 20 af 04 e2 af 89 07 f0 01 00
>3a5868		c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60
>3a5878		08 e2 20 a9 01 8f 01 e2 af a9 02 8f 00 e2 af c2
>3a5888		20 a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af a5
>3a5898		23 8f 08 e2 af a5 25 8f 0a e2 af ea ea ea af 08
>3a58a8		e2 af 85 23 af 0a e2 af 85 25 28 60 08 c2 20 a5
>3a58b8		23 d0 0a a5 25 29 ff 7f d0 03 28 38 60 28 18 60
>3a58c8		08 e2 20 38 e9 30 20 7a 05 c2 20 29 ff 00 18 65
>3a58d8		23 85 23 a5 25 69 00 00 85 25 28 60 08 e2 20 c9
>3a58e8		30 90 04 c9 3a 90 1c c9 61 90 04 c9 67 90 0a c9
>3a58f8		41 90 04 c9 47 90 07 80 31 38 e9 57 80 08 38 e9
>3a5908		37 80 03 38 e9 30 06 23 26 24 26 25 26 26 06 23
>3a5918		26 24 26 25 26 26 06 23 26 24 26 25 26 26 06 23
>3a5928		26 24 26 25 26 26 05 23 85 23 28 60 08 e2 20 c9
>3a5938		30 f0 06 c9 31 f0 0a 80 0f c2 20 06 23 26 25 80
>3a5948		07 c2 20 38 26 23 26 25 28 60 08 e2 30 a5 61 f0
>3a5958		0d aa a5 69 d0 15 a9 00 8f 01 e2 af 80 15 e2 20
>3a5968		a9 03 8f 01 e2 af ea ea ea 80 62 e2 20 a9 01 8f
>3a5978		01 e2 af e2 20 a9 43 8f 00 e2 af c2 20 a9 00 10
>3a5988		8f 08 e2 af a9 00 00 8f 0a e2 af c2 20 a9 00 a0
>3a5998		8f 0c e2 af a9 00 00 8f 0e e2 af ea ea ea ca f0
>3a59a8		2c af 08 e2 af 8f 0c 08 00 af 0a e2 af 8f 0e 08
>3a59b8		00 e2 20 a9 42 8f 00 e2 af c2 20 af 0c 08 00 8f
>3a59c8		08 e2 af af 0e 08 00 8f 0a e2 af 80 be c2 20 af
>3a59d8		08 e2 af 85 23 af 0a e2 af 85 25 e2 20 a9 01 85
>3a59e8		27 28 60 08 c2 20 a5 5d 85 23 a5 5f 85 25 20 04
>3a59f8		5c c2 20 a5 23 85 29 a5 25 85 2b c2 20 a5 59 85
>3a5a08		23 a5 5b 85 25 20 2c 57 c2 20 a5 55 85 29 a5 57
>3a5a18		85 2b 20 e1 56 c2 20 a5 23 85 29 a5 25 85 2b 20
>3a5a28		52 59 20 77 57 c2 20 a5 65 f0 07 a5 25 09 00 80
>3a5a38		85 25 e2 20 a9 01 85 27 28 60 5a 08 c2 30 64 23
>3a5a48		64 25 64 55 64 57 64 65 64 59 64 5b a9 01 00 85
>3a5a58		5d 64 5f 64 61 64 63 64 69 e2 20 a0 00 00 b7 00
>3a5a68		c9 2b f0 33 c9 2d f0 2b c9 26 f0 3a 20 fb 04 90
>3a5a78		03 82 ac 00 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a5a88		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>3a5a98		dc d4 08 a9 01 85 65 c8 b7 00 c9 26 f0 08 20 fb
>3a5aa8		04 90 d1 82 7a 00 c8 b7 00 c9 68 f0 0e c9 48 f0
>3a5ab8		0a c9 62 f0 4c c9 42 f0 48 80 b9 c8 b7 00 20 0c
>3a5ac8		05 b0 02 80 af 20 e4 58 c8 b7 00 20 0c 05 b0 f5
>3a5ad8		e2 20 a5 65 f0 11 c2 20 38 a9 00 00 e5 23 85 23
>3a5ae8		a9 00 00 e5 25 85 25 e2 20 a9 00 85 27 c2 20 18
>3a5af8		98 65 00 85 00 a5 02 69 00 00 85 02 e2 20 28 7a
>3a5b08		60 c8 b7 00 c9 30 f0 07 c9 31 f0 03 82 65 ff 20
>3a5b18		34 59 c8 b7 00 c9 30 f0 f6 c9 31 f0 f2 82 b0 ff
>3a5b28		20 c8 58 c8 b7 00 c9 2e f0 08 20 fb 04 b0 f1 82
>3a5b38		9e ff c2 20 20 04 5c c2 20 a5 23 85 55 a5 25 85
>3a5b48		57 64 23 64 25 e2 20 80 36 20 c8 58 c2 20 a5 5f
>3a5b58		8f 00 01 00 a9 0a 00 8f 02 01 00 af 04 01 00 85
>3a5b68		5f a5 5d 8f 00 01 00 a9 0a 00 8f 02 01 00 af 04
>3a5b78		01 00 85 5d af 06 01 00 18 65 5f 85 5f e2 20 c8
>3a5b88		b7 00 c9 65 f0 24 c9 45 f0 20 20 fb 04 b0 ba c2
>3a5b98		20 20 04 5c c2 20 a5 23 85 59 a5 25 85 5b 64 23
>3a5ba8		64 25 20 eb 59 e2 20 82 43 ff c2 20 20 04 5c c2
>3a5bb8		20 a5 23 85 59 a5 25 85 5b 64 23 64 25 e2 20 c8
>3a5bc8		b7 00 c9 2b f0 10 c9 2d f0 08 20 fb 04 b0 12 82
>3a5bd8		a2 fe a9 01 85 69 c8 b7 00 20 fb 04 b0 03 82 93
>3a5be8		fe 20 c8 58 c8 b7 00 20 fb 04 b0 f5 c2 20 a5 23
>3a5bf8		85 61 a5 25 85 63 20 eb 59 82 f1 fe 08 20 92 56
>3a5c08		28 60 08 c2 20 a9 01 5f 85 29 a9 3a 00 85 2b e2
>3a5c18		20 a9 01 85 2d c2 20 20 dd 5c c9 ff ff d0 0c a9
>3a5c28		00 00 8d 23 08 8d 25 08 82 a1 00 f4 00 00 f4 00
>3a5c38		00 f4 00 00 e2 20 ad 26 08 29 80 83 01 ad 25 08
>3a5c48		2a ad 26 08 2a 83 02 a9 00 83 06 ad 25 08 09 80
>3a5c58		83 05 ad 24 08 83 04 ad 23 08 83 03 a3 02 c9 96
>3a5c68		f0 3a 90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a5c78		a9 0d 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>3a5c88		dc d4 08 c2 20 a3 05 4a 83 05 a3 03 6a 83 03 e2
>3a5c98		20 a3 02 1a 83 02 c9 96 f0 02 80 e7 a3 01 f0 1b
>3a5ca8		c2 20 a3 03 49 ff ff 18 69 01 00 8d 23 08 a3 05
>3a5cb8		49 ff ff 69 00 00 8d 25 08 80 0c c2 20 a3 03 8d
>3a5cc8		23 08 a3 05 8d 25 08 c2 20 68 68 68 e2 20 a9 00
>3a5cd8		8d 27 08 28 60 da 08 c2 20 a5 25 48 a5 23 48 20
>3a5ce8		d6 56 20 b4 58 b0 11 a5 25 89 00 80 d0 05 a9 01
>3a5cf8		00 80 08 a9 ff ff 80 03 a9 00 00 fa 86 23 fa 86
>3a5d08		25 28 fa 60 08 c2 30 20 dd 5c c9 ff ff d0 05 20
>3a5d18		2d 06 80 03 20 3f 06 28 60 08 c2 30 20 dd 5c c9
>3a5d28		01 00 d0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2
>3a5d38		30 20 dd 5c c9 00 00 d0 05 20 2d 06 80 03 20 3f
>3a5d48		06 28 60 08 c2 30 20 dd 5c c9 01 00 f0 05 20 2d
>3a5d58		06 80 03 20 3f 06 28 60 08 c2 30 20 dd 5c c9 ff
>3a5d68		ff f0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2 30
>3a5d78		20 dd 5c c9 00 00 f0 05 20 2d 06 80 03 20 3f 06
>3a5d88		28 60 08 e2 20 97 23 c8 a9 00 97 23 28 60 da 08
>3a5d98		e2 20 c9 80 90 0a 48 a9 2d 20 8a 5d 68 49 ff 1a
>3a5da8		c2 30 29 ff 00 c9 64 00 90 0e a2 64 00 20 7b 56
>3a5db8		18 69 30 00 20 8a 5d 8a a2 0a 00 20 7b 56 18 69
>3a5dc8		30 00 20 8a 5d 8a 18 69 30 00 20 8a 5d 28 fa 60
>3a5dd8		08 e2 20 c2 10 a0 00 00 b7 23 f0 03 c8 80 f9 28
>3a5de8		60 08 e2 20 c2 10 f4 00 00 f4 00 00 f4 00 00 20
>3a5df8		b4 58 90 19 20 01 15 e2 20 a0 00 00 a9 20 97 16
>3a5e08		c8 a9 30 97 16 c8 a9 00 97 16 82 ce 00 e2 20 a5
>3a5e18		26 10 08 29 7f 85 26 a9 01 83 01 c2 20 a9 00 00
>3a5e28		83 03 c2 20 af fd 5e 3a 85 29 af ff 5e 3a 85 2b
>3a5e38		20 dd 5c 89 00 80 d0 12 20 78 58 a3 03 1a 83 03
>3a5e48		20 dd 5c c9 ff ff f0 12 80 ee 20 2f 58 a3 03 3a
>3a5e58		83 03 20 dd 5c c9 ff ff f0 f0 e2 30 a5 25 0a a5
>3a5e68		26 2a 83 05 38 a9 96 e3 05 aa f0 0f a5 25 09 80
>3a5e78		85 25 46 25 66 24 66 23 ca d0 f7 c2 10 e2 20 64
>3a5e88		26 a9 00 85 27 a3 01 f0 11 c2 20 38 a9 00 00 e5
>3a5e98		23 85 23 a9 00 00 e5 25 85 25 20 60 15 c2 20 a5
>3a5ea8		16 85 23 a5 18 85 25 20 d8 5d e2 20 c8 a9 00 97
>3a5eb8		23 88 88 b7 23 c8 97 23 c0 02 00 d0 f4 a9 2e 97
>3a5ec8		23 e2 20 18 a3 03 69 05 83 06 f0 19 20 d8 5d a9
>3a5ed8		45 20 8a 5d a3 06 20 96 5d 80 0a c2 20 a5 16 85
>3a5ee8		23 a5 18 85 25 e2 20 a9 02 85 27 c2 20 3b 18 69
>3a5ef8		06 00 1b 28 60 00 50 c3 47 00 00 80 3f f3 04 b5
>3a5f08		3f f3 04 35 3f e2 20 a9 48 8f 00 e2 af c2 20 bd
>3a5f18		00 00 8f 08 e2 af bd 02 00 8f 0a e2 af 88 e8 e8
>3a5f28		e8 e8 e2 20 a9 00 8f 01 e2 af c2 20 af 23 08 00
>3a5f38		8f 0c e2 af af 25 08 00 8f 0e e2 af ea ea ea af
>3a5f48		08 e2 af 48 af 0a e2 af 8f 0a e2 af 68 8f 08 e2
>3a5f58		af e2 20 a9 02 8f 01 e2 af c2 20 bd 00 00 8f 0c
>3a5f68		e2 af bd 02 00 8f 0e e2 af ea ea ea 88 f0 14 af
>3a5f78		08 e2 af 48 af 0a e2 af 8f 0a e2 af 68 8f 08 e2
>3a5f88		af 80 9b af 08 e2 af 8f 23 08 00 af 0a e2 af 8f
>3a5f98		25 08 00 60 e2 20 a9 00 8f 00 e2 af a9 00 8f 01
>3a5fa8		e2 af c2 20 a5 23 8f 08 e2 af 8f 0c e2 af af 25
>3a5fb8		08 00 8f 0a e2 af 8f 0e e2 af ea ea ea af 08 e2
>3a5fc8		af 85 23 af 0a e2 af 85 25 60 e2 20 a9 00 8f 00
>3a5fd8		e2 af a9 01 8f 01 e2 af c2 20 a5 23 8f 0c e2 af
>3a5fe8		af 25 08 00 8f 0e e2 af af 26 66 3a 8f 08 e2 af
>3a5ff8		af 28 66 3a 8f 0a e2 af ea ea ea af 08 e2 af 85
>3a6008		23 af 0a e2 af 85 25 60 a2 00 00 a5 23 c5 29 a5
>3a6018		25 e5 2b 90 1e a5 23 8f 08 e2 af a5 25 8f 0a e2
>3a6028		af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25
>3a6038		e8 80 d8 60 e2 20 a5 26 10 09 29 7f 85 26 a9 01
>3a6048		48 80 03 a9 00 48 a9 40 8f 00 e2 af a9 02 8f 01
>3a6058		e2 af c2 30 af 8e 66 3a 85 29 8f 0c e2 af af 90
>3a6068		66 3a 85 2b 8f 0e e2 af 20 10 60 e2 20 68 c2 20
>3a6078		f0 1e a5 23 8f 08 e2 af a5 25 8f 0a e2 af ea ea
>3a6088		ea af 08 e2 af 85 23 af 0a e2 af 29 ff 7f 85 25
>3a6098		60 5a a2 00 00 a0 00 00 a5 23 df 92 66 3a a5 25
>3a60a8		ff 94 66 3a 90 2c bf 8e 66 3a 8f 08 e2 af bf 90
>3a60b8		66 3a 8f 0a e2 af a5 23 8f 0c e2 af a5 25 8f 0e
>3a60c8		e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85
>3a60d8		25 38 98 2a a8 e8 e8 e8 e8 e0 0c 00 d0 ba 98 aa
>3a60e8		7a 60 08 c2 30 48 da 20 9c 5f 8b e2 20 a9 3a 48
>3a60f8		ab c2 20 a2 ce 65 5a a0 05 00 20 0d 5f 7a a9 01
>3a6108		00 8f 27 08 00 ab fa 68 28 60 08 c2 30 48 da a5
>3a6118		23 85 29 a5 25 85 2b 20 9c 5f 8b e2 20 a9 3a 48
>3a6128		ab c2 20 a2 e2 65 5a a0 05 00 20 0d 5f 7a ab 20
>3a6138		77 57 fa 68 28 60 08 c2 30 48 da a5 23 85 29 a5
>3a6148		25 85 2b 20 9c 5f 8b e2 20 a9 3a 48 ab c2 20 a2
>3a6158		f6 65 5a a0 05 00 20 0d 5f 7a ab 20 77 57 fa 68
>3a6168		28 60 08 c2 30 48 da e2 20 a9 40 8f 00 e2 af a9
>3a6178		02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f
>3a6188		0a e2 af af 26 66 3a 8f 0c e2 af af 28 66 3a 8f
>3a6198		0e e2 af ea ea ea af 08 e2 af 85 0c af 0a e2 af
>3a61a8		85 0e e2 20 a9 48 8f 00 e2 af c2 20 ea ea ea af
>3a61b8		08 e2 af 85 10 af 0a e2 af 85 12 e2 20 a9 01 8f
>3a61c8		01 e2 af c2 20 a5 0c 8f 08 e2 af a5 0e 8f 0a e2
>3a61d8		af a5 10 8f 0c e2 af a5 12 8f 0e e2 af ea ea ea
>3a61e8		af 08 e2 af 85 23 af 0a e2 af 85 25 e2 20 a9 08
>3a61f8		8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f 08
>3a6208		e2 af a5 25 8f 0a e2 af ea ea ea af 08 e2 af 85
>3a6218		29 af 0a e2 af 85 2b 20 9c 5f 8b e2 20 a9 3a 48
>3a6228		ab c2 20 a2 0a 66 5a a0 08 00 20 0d 5f 7a a9 01
>3a6238		00 8f 27 08 00 8f 2d 08 00 20 77 57 ab fa 68 28
>3a6248		60 08 c2 30 48 da 20 3c 60 20 99 60 da 8a 29 01
>3a6258		00 d0 05 20 12 61 80 03 20 ea 60 fa 8a 29 04 00
>3a6268		f0 0a e2 20 a5 26 09 80 85 26 c2 20 fa 68 28 60
>3a6278		08 c2 30 48 da 20 3c 60 20 99 60 da 8a 29 01 00
>3a6288		d0 05 20 ea 60 80 03 20 12 61 fa 8a 29 02 00 f0
>3a6298		0a e2 20 a5 26 09 80 85 26 c2 20 fa 68 28 60 08
>3a62a8		c2 30 48 da 20 3c 60 20 99 60 20 3e 61 8a 29 01
>3a62b8		00 f0 03 20 d2 5f 8a e2 20 4a 4a 69 00 29 01 f0
>3a62c8		06 a5 26 09 80 85 26 c2 20 fa 68 28 60 08 c2 30
>3a62d8		48 da 5a a5 25 10 1f 08 c2 20 48 a9 00 08 5b 68
>3a62e8		28 e2 20 a9 17 8f d3 08 00 c2 20 29 ff 00 20 5e
>3a62f8		1e e2 20 dc d4 08 c2 30 a5 23 cf 26 66 3a a5 25
>3a6308		cf 28 66 3a b0 04 20 d2 5f 18 a9 00 00 a8 2a 48
>3a6318		e2 20 a9 00 8f 00 e2 af a9 01 8f 01 e2 af c2 20
>3a6328		af 7e 66 3a 85 29 8f 0c e2 af af 80 66 3a 85 2b
>3a6338		8f 0e e2 af 20 10 60 8a f0 07 0a 0a 0a 0a 0a 0a
>3a6348		a8 af 82 66 3a 85 29 8f 0c e2 af af 84 66 3a 85
>3a6358		2b 8f 0e e2 af 20 10 60 8a f0 0b 0a 0a 0a 0a 85
>3a6368		29 18 98 65 29 a8 af 86 66 3a 85 29 8f 0c e2 af
>3a6378		af 88 66 3a 85 2b 8f 0e e2 af 20 10 60 8a f0 09
>3a6388		0a 0a 85 29 18 98 65 29 a8 af 8a 66 3a 85 29 8f
>3a6398		0c e2 af af 8c 66 3a 85 2b 8f 0e e2 af 20 10 60
>3a63a8		86 29 18 98 65 29 a8 20 6a 61 a5 23 85 29 a5 25
>3a63b8		85 2b 98 85 23 64 25 20 04 5c 20 e1 56 68 d0 07
>3a63c8		a5 25 09 00 80 85 25 7a fa 68 28 60 08 c2 30 48
>3a63d8		da a5 23 85 29 a5 25 85 2b 20 9c 5f 8b e2 20 a9
>3a63e8		3a 48 ab c2 20 a2 2e 66 a0 05 00 20 0d 5f ab 20
>3a63f8		77 57 fa 68 28 60 08 c2 30 48 da 20 d4 63 af 96
>3a6408		66 3a 85 29 af 98 66 3a 85 2b 20 d6 56 a5 25 49
>3a6418		00 80 85 25 fa 68 28 60 08 c2 30 48 da a5 23 85
>3a6428		29 a5 25 85 2b 20 9c 5f 8b e2 20 a9 3a 48 ab c2
>3a6438		20 a2 42 66 a0 05 00 20 0d 5f ab 20 77 57 fa 68
>3a6448		28 60 c2 20 a5 23 85 29 a5 25 85 2b c2 20 af 26
>3a6458		66 3a 85 23 af 28 66 3a 85 25 8a f0 30 4a aa 90
>3a6468		03 20 77 57 c2 20 a5 25 48 a5 23 48 c2 20 a5 29
>3a6478		85 23 a5 2b 85 25 20 9c 5f c2 20 a5 23 85 29 a5
>3a6488		25 85 2b c2 20 68 85 23 68 85 25 80 cd 60 08 c2
>3a6498		30 48 da 8b e2 20 a9 3a 48 ab c2 20 a2 56 66 5a
>3a64a8		a0 0a 00 20 0d 5f 7a ab fa 68 28 60 08 c2 30 48
>3a64b8		da 5a a5 23 05 25 d0 10 c2 20 af 26 66 3a 85 23
>3a64c8		af 28 66 3a 85 25 80 61 a5 25 29 00 80 a8 f0 07
>3a64d8		a5 25 29 ff 7f 85 25 c2 20 a5 25 48 a5 23 48 20
>3a64e8		51 06 a6 23 20 bf 07 c2 20 a5 23 85 29 a5 25 85
>3a64f8		2b c2 20 68 85 23 68 85 25 20 d6 56 20 96 64 c2
>3a6508		20 a5 25 48 a5 23 48 c2 20 af 8a 66 3a 85 23 af
>3a6518		8c 66 3a 85 25 20 4a 64 c2 20 68 85 29 68 85 2b
>3a6528		20 77 57 98 f0 03 20 d2 5f 7a fa 68 28 60 08 c2
>3a6538		30 48 a5 25 10 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a6548		e2 20 a9 17 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>3a6558		e2 20 dc d4 08 c2 30 05 23 f0 68 c2 20 af 2a 66
>3a6568		3a 85 29 af 2c 66 3a 85 2b e2 20 a9 01 85 2d c2
>3a6578		20 c2 20 a5 25 48 a5 23 48 20 2c 57 a5 25 c5 2b
>3a6588		d0 09 a5 23 45 29 29 f8 ff f0 30 20 e1 56 c2 20
>3a6598		af 2a 66 3a 85 29 af 2c 66 3a 85 2b 20 2c 57 c2
>3a65a8		20 a5 23 85 29 a5 25 85 2b c2 20 68 85 23 68 85
>3a65b8		25 c2 20 a5 25 48 a5 23 48 80 be c2 20 68 85 29
>3a65c8		68 85 2b 68 28 60 01 0d d0 37 61 0b b6 ba ab aa
>3a65d8		2a 3d 00 00 00 bf 00 00 80 3f 1d ef 38 36 01 0d
>3a65e8		50 b9 89 88 08 3c ab aa 2a be 00 00 80 3f a4 27
>3a65f8		b3 3c d1 0d 5d 3d 89 88 08 3e ab aa aa 3e 00 00
>3a6608		80 3f 89 88 88 3d d9 89 9d 3d 8c 2e ba 3d 39 8e
>3a6618		e3 3d 25 49 12 3e cd cc 4c 3e ab aa aa 3e 00 00
>3a6628		80 3f 00 00 00 40 8e e3 f8 3c 6e db 36 3d 9a 99
>3a6638		99 3d ab aa 2a 3e 00 00 80 3f 39 8e e3 3d 25 49
>3a6648		12 be cd cc 4c 3e ab aa aa be 00 00 80 3f 1d ef
>3a6658		38 36 01 0d d0 37 01 0d 50 39 61 0b b6 3a 89 88
>3a6668		08 3c ab aa 2a 3d ab aa 2a 3e 00 00 00 3f 00 00
>3a6678		80 3f 00 00 80 3f c1 2c a1 6d 5f 97 07 4b 81 64
>3a6688		5a 42 54 f8 2d 40 db 0f c9 40 db 0f 49 40 db 0f
>3a6698		c9 3f db 0f 49 3f 08 20 0f 13 c2 20 a9 01 00 85
>3a66a8		23 a9 00 00 85 25 e2 20 af 00 4d 00 c2 20 29 ff
>3a66b8		00 85 8f a8 a2 01 00 c2 20 bf 00 4d 00 85 29 a9
>3a66c8		00 00 85 2b e2 20 a9 00 85 2d c2 20 20 5a 28 e8
>3a66d8		e8 88 d0 e3 c2 20 a9 04 00 85 29 a9 00 00 85 2b
>3a66e8		20 5a 28 e2 20 af 00 4d 00 85 0c a9 00 85 0d c2
>3a66f8		20 06 0c 38 a5 23 65 0c 85 23 a5 25 69 00 00 85
>3a6708		25 d0 29 e2 20 a5 ea 09 80 a6 23 20 d3 10 e2 20
>3a6718		af 00 4d 00 87 c0 a0 01 00 a2 00 00 e2 20 bf 01
>3a6728		4d 00 97 c0 e4 8f f0 23 e8 c8 80 f0 08 c2 20 48
>3a6738		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>3a6748		29 ff 00 20 5e 1e e2 20 dc d4 08 e2 20 38 a5 c0
>3a6758		67 c0 85 08 a5 c1 69 00 85 09 a5 c2 69 00 85 0a
>3a6768		64 0b c2 20 a0 05 00 b7 c3 85 0c e2 20 c8 c8 b7
>3a6778		c3 85 0e 64 0f e2 20 a9 00 87 08 c2 20 18 a5 08
>3a6788		69 01 00 85 08 a5 0a 69 00 00 85 0a c5 0e d0 e5
>3a6798		a5 08 c5 0c d0 df 28 60 08 c2 20 64 08 64 0a e2
>3a67a8		20 af 00 4d 00 85 8f 64 90 a2 01 00 e2 20 a7 c0
>3a67b8		c5 8f f0 22 a6 8f 00 08 c2 20 48 a9 00 08 5b 68
>3a67c8		28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 5e
>3a67d8		1e e2 20 dc d4 08 c9 01 f0 3a a0 01 00 e2 20 bf
>3a67e8		00 4d 00 85 23 64 24 64 25 64 26 b7 c0 85 29 64
>3a67f8		2a 64 2b 64 2c a5 23 c5 29 b0 68 20 5a 28 c2 20
>3a6808		18 a5 08 65 23 85 08 a5 0a 65 25 85 0a e8 e8 c8
>3a6818		c4 8f d0 c9 e2 20 18 bf 00 4d 00 85 90 65 08 85
>3a6828		08 a5 09 69 00 85 09 c2 20 a5 0a 69 00 00 85 0a
>3a6838		c2 20 06 08 26 0a 06 08 26 0a e2 20 38 a5 08 65
>3a6848		8f 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69 00 00
>3a6858		85 0a 18 a5 08 65 c0 85 08 e2 20 a5 0a 65 c2 85
>3a6868		0a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a6878		09 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>3a6888		d4 08 08 20 0f 13 e2 20 a0 00 00 b7 c3 29 7f c9
>3a6898		02 d0 05 20 e3 06 80 10 c9 00 d0 05 20 51 06 80
>3a68a8		07 c9 01 d0 2b 20 bf 07 a5 27 48 c2 20 a5 25 48
>3a68b8		a5 23 48 20 a0 67 68 85 23 68 85 25 e2 20 68 85
>3a68c8		27 c2 20 a5 23 87 08 a0 02 00 a5 25 97 08 28 60
>3a68d8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a68e8		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08
>3a68f8		20 0f 13 f4 00 00 f4 00 00 e2 20 48 20 a0 67 e2
>3a6908		20 68 c2 20 68 68 c2 20 a7 08 85 23 a0 02 00 b7
>3a6918		08 85 25 e2 20 a0 00 00 b7 c3 29 7f 85 27 20 63
>3a6928		18 28 60 da 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a6938		c2 30 a5 25 89 f0 ff d0 29 89 0f 00 d0 0c a5 23
>3a6948		89 00 fc d0 05 20 1e 46 80 2e a2 0a 00 46 25 66
>3a6958		23 ca d0 f9 20 1e 46 e2 20 a9 4b 20 18 00 c2 20
>3a6968		80 16 a2 14 00 46 25 66 23 ca d0 f9 20 1e 46 e2
>3a6978		20 a9 4d 20 18 00 c2 20 28 2b fa 60 0b 08 c2 30
>3a6988		a9 00 00 8f b6 08 00 8f b8 08 00 e2 20 20 7e 22
>3a6998		c9 00 f0 08 20 0c 1d 20 e3 06 80 11 c2 20 a9 00
>3a69a8		00 85 23 85 25 e2 20 a9 02 85 27 c2 20 20 e5 6a
>3a69b8		22 08 11 00 b0 22 20 96 6b 08 c2 20 48 a9 00 08
>3a69c8		5b 68 28 e2 20 a9 10 8f d3 08 00 c2 20 29 ff 00
>3a69d8		20 5e 1e e2 20 dc d4 08 20 d7 03 08 c2 20 48 a9
>3a69e8		20 03 5b 68 28 e2 20 a0 00 00 b7 18 d0 03 82 a9
>3a69f8		00 c9 e5 d0 03 82 96 00 a0 0b 00 b7 18 89 08 f0
>3a6a08		03 82 a9 00 89 02 f0 03 82 83 00 29 0f c9 0f d0
>3a6a18		03 82 7a 00 a0 00 00 b7 18 20 18 00 c8 c0 08 00
>3a6a28		d0 f5 a9 20 20 18 00 a0 08 00 b7 18 20 18 00 c8
>3a6a38		c0 0b 00 d0 f5 a9 09 20 18 00 a0 0b 00 b7 18 89
>3a6a48		10 d0 1e c2 20 a0 1c 00 b7 18 8f 23 08 00 c8 c8
>3a6a58		b7 18 8f 25 08 00 e2 20 a9 00 8f 27 08 00 20 2b
>3a6a68		69 a9 09 20 18 00 a0 0b 00 b7 18 89 08 d0 1c 89
>3a6a78		01 f0 05 a9 52 20 18 00 89 04 f0 05 a9 53 20 18
>3a6a88		00 89 10 f0 05 a9 44 20 18 00 ea 20 d7 03 20 ee
>3a6a98		03 22 0c 11 00 90 03 82 41 ff 20 96 6b 08 c2 20
>3a6aa8		48 a9 00 08 5b 68 28 20 62 21 28 2b 60 08 c2 20
>3a6ab8		48 a9 20 03 5b 68 28 e2 20 29 0f c9 0f f0 cf a9
>3a6ac8		5b 20 18 00 a0 00 00 b7 18 c9 20 f0 09 20 18 00
>3a6ad8		c8 c0 08 00 d0 f1 a9 5d 20 18 00 80 ae 0b 08 08
>3a6ae8		c2 20 48 a9 20 03 5b 68 28 c2 30 a9 73 f2 85 20
>3a6af8		a9 3a 00 85 22 a0 00 00 e2 20 a9 00 97 20 c8 c0
>3a6b08		1e 00 d0 f8 c2 20 a9 73 f0 8f 81 f2 3a a9 3a 00
>3a6b18		8f 83 f2 3a af 23 08 00 8f 75 f2 3a af 25 08 00
>3a6b28		8f 77 f2 3a 28 2b 60 08 c2 30 20 3e 21 20 0c 1d
>3a6b38		20 e3 06 20 e5 6a e2 20 a9 2c 85 37 20 5f 22 b0
>3a6b48		0f c2 20 a9 ff ff 8f 54 03 00 8f 56 03 00 80 17
>3a6b58		20 1d 21 20 0c 1d 20 51 06 c2 20 a5 23 8f 54 03
>3a6b68		00 a5 25 8f 56 03 00 22 18 11 00 b0 1f 08 c2 20
>3a6b78		48 a9 00 08 5b 68 28 e2 20 a9 11 8f d3 08 00 c2
>3a6b88		20 29 ff 00 20 5e 1e e2 20 dc d4 08 28 60 8b 0b
>3a6b98		08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a6ba8		00 48 ab 68 28 e2 20 af 2e 03 00 85 23 a9 00 85
>3a6bb8		24 85 25 85 26 a9 00 85 27 85 ea a9 3a 85 e9 c2
>3a6bc8		20 a9 f9 6b 85 e7 20 83 53 e2 20 af 20 03 00 85
>3a6bd8		23 a9 00 85 24 85 25 85 26 a9 00 85 27 85 ea a9
>3a6be8		3a 85 e9 c2 20 a9 01 6c 85 e7 20 83 53 28 2b ab
>3a6bf8		60 44 4f 53 53 54 41 54 00 42 49 4f 53 53 54 41
>3a6c08		54 00 08 c2 30 20 3e 21 20 0c 1d 20 e3 06 a5 23
>3a6c18		8f 60 03 00 a5 25 8f 62 03 00 a9 ff ff 8f 54 03
>3a6c28		00 8f 56 03 00 22 24 11 00 b0 25 20 5e 1e 20 96
>3a6c38		6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f
>3a6c48		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>3a6c58		20 5e 1e 28 60 08 c2 30 20 3e 21 20 0c 1d 20 e3
>3a6c68		06 20 e5 6a a9 00 00 8f 54 03 00 a9 01 00 8f 56
>3a6c78		03 00 20 54 50 22 18 11 00 b0 22 20 96 6b 08 c2
>3a6c88		20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d3 08 00
>3a6c98		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 20 96 6b
>3a6ca8		c2 20 a2 12 00 18 bf 73 f2 3a 69 00 00 85 92 bf
>3a6cb8		75 f2 3a 69 01 00 85 94 e2 20 a9 00 87 92 c2 20
>3a6cc8		a9 00 00 85 7a a9 01 00 85 7c a2 00 00 e2 20 a7
>3a6cd8		7a f0 2a c9 0d f0 12 c9 0a f0 04 9d 00 4f e8 c2
>3a6ce8		20 e6 7a d0 e8 e6 7c 80 e4 e2 20 a9 00 9d 00 4f
>3a6cf8		20 8d 27 c2 20 e6 7a d0 d1 e6 7c 80 cd e0 00 00
>3a6d08		f0 0a e2 20 a9 00 9d 00 4f 20 8d 27 28 60 08 c2
>3a6d18		30 20 3e 21 20 0c 1d 20 e3 06 20 e5 6a e2 20 a9
>3a6d28		2c 20 2a 22 c2 20 20 0c 1d 20 51 06 a5 23 8f 50
>3a6d38		03 00 a5 25 8f 52 03 00 e2 20 a9 2c c2 20 20 2a
>3a6d48		22 20 0c 1d 20 51 06 a5 23 8f 58 03 00 a5 25 8f
>3a6d58		5a 03 00 22 1c 11 00 b0 22 20 96 6b 08 c2 20 48
>3a6d68		a9 00 08 5b 68 28 e2 20 a9 12 8f d3 08 00 c2 20
>3a6d78		29 ff 00 20 5e 1e e2 20 dc d4 08 20 96 6b 28 60
>3a6d88		da 5a 08 a2 00 00 a0 00 00 e2 20 b7 23 9d 00 04
>3a6d98		f0 04 e8 c8 80 f5 28 7a fa 60 08 c2 30 20 3e 21
>3a6da8		20 0c 1d 20 e3 06 20 e5 6a a9 00 00 85 a6 e2 20
>3a6db8		a9 01 85 a8 a9 20 85 b4 c2 20 a9 00 00 85 ab a9
>3a6dc8		ff ff 85 a9 c2 20 a9 00 00 85 55 85 57 a9 ff ff
>3a6dd8		85 59 a9 ff 7f 85 5b 20 8b 18 e2 20 a9 80 85 b4
>3a6de8		c2 20 c6 ab 18 a9 00 00 8f 50 03 00 65 ab 8f 58
>3a6df8		03 00 a9 01 00 8f 52 03 00 69 00 00 8f 5a 03 00
>3a6e08		22 1c 11 00 b0 22 20 96 6b 08 c2 20 48 a9 00 08
>3a6e18		5b 68 28 e2 20 a9 12 8f d3 08 00 c2 20 29 ff 00
>3a6e28		20 5e 1e e2 20 dc d4 08 20 96 6b 28 60 08 c2 30
>3a6e38		20 3e 21 20 0c 1d 20 e3 06 20 88 6d 22 04 11 00
>3a6e48		b0 22 20 96 6b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a6e58		20 a9 13 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>3a6e68		20 dc d4 08 20 96 6b 28 60 da 08 e2 20 c9 61 90
>3a6e78		08 c9 7b b0 04 29 df 80 13 c9 20 90 13 a2 00 00
>3a6e88		df 9c 6e 3a f0 0a e8 e0 0f 00 d0 f4 28 38 fa 6b
>3a6e98		28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c 3d 3e 3f 5c 5b
>3a6ea8		5d 7c 22 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a6eb8		20 0c 1d 20 e3 06 20 88 6d 22 10 11 00 b0 22 20
>3a6ec8		96 6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 14
>3a6ed8		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>3a6ee8		08 e2 20 a9 2c 20 2a 22 c2 20 20 0c 1d 20 e3 06
>3a6ef8		ad 38 03 85 08 ad 3a 03 85 0a e2 20 a2 00 00 a9
>3a6f08		20 95 7e e8 e0 0b 00 d0 f8 a2 00 00 a0 00 00 b7
>3a6f18		23 f0 76 c9 2e f0 39 22 71 6e 3a b0 1f 08 c2 20
>3a6f28		48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2
>3a6f38		20 29 ff 00 20 5e 1e e2 20 dc d4 08 95 7e c8 e8
>3a6f48		c0 08 00 d0 ca b7 23 f0 40 c9 2e f0 03 c8 80 f5
>3a6f58		c8 a2 08 00 b7 23 f0 31 22 71 6e 3a b0 22 20 96
>3a6f68		6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>3a6f78		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>3a6f88		95 7e c8 e8 c0 0c 00 d0 cb a2 00 00 a0 00 00 b5
>3a6f98		7e 97 08 e8 c8 c0 0b 00 d0 f5 22 14 11 00 b0 22
>3a6fa8		20 96 6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a6fb8		15 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>3a6fc8		d4 08 20 96 6b 28 60 08 08 c2 20 48 a9 00 08 5b
>3a6fd8		68 28 c2 30 20 0c 1d 20 e3 06 a5 23 8f 64 03 00
>3a6fe8		a5 25 8f 66 03 00 e2 20 a9 2c 20 2a 22 c2 20 20
>3a6ff8		0c 1d 20 e3 06 a5 23 8f 68 03 00 a5 25 8f 6a 03
>3a7008		00 22 30 11 00 b0 1f 08 c2 20 48 a9 00 08 5b 68
>3a7018		28 e2 20 a9 16 8f d3 08 00 c2 20 29 ff 00 20 5e
>3a7028		1e e2 20 dc d4 08 28 60 5c ed 89 3a 5c 3e 88 3a
>3a7038		5c ee 89 3a 5c 6a 79 3a 5c c7 79 3a 5c fa 78 3a
>3a7048		5c 80 78 3a 5c fd 7d 3a 5c eb 74 3a 5c 18 78 3a
>3a7058		5c d3 77 3a 5c 5d 77 3a 5c fc 88 3a 5c f9 75 3a
>3a7068		5c 49 74 3a 5c 77 89 3a 5c 27 75 3a 5c f0 89 3a
>3a7078		5c e9 89 3a 5c 16 77 3a 5c f1 89 3a 18 fb 58 5c
>3a7088		8b 70 3a c2 30 22 49 74 3a 20 08 00 20 0c 00 8b
>3a7098		e2 20 a9 00 48 ab a2 00 4f 20 65 05 ab 22 34 70
>3a70a8		3a 22 3c 70 3a 80 e2 08 8b e2 20 a9 3a 48 ab c2
>3a70b8		10 a2 c2 70 20 64 04 ab 28 6b 41 20 3c 73 74 61
>3a70c8		72 74 3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d 20
>3a70d8		20 41 73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67
>3a70e8		72 61 6d 0d 0d 43 20 3c 73 74 61 72 74 31 3e 20
>3a70f8		3c 73 74 61 72 74 32 3e 20 5b 6c 65 6e 20 28 31
>3a7108		20 69 66 20 62 6c 61 6e 6b 29 5d 0d 20 20 43 6f
>3a7118		6d 70 61 72 65 20 74 6f 20 73 65 63 74 69 6f 6e
>3a7128		73 20 6f 66 20 6d 65 6d 6f 72 79 0d 0d 44 20 3c
>3a7138		73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44
>3a7148		69 73 61 73 73 65 6d 62 6c 65 20 61 20 70 72 6f
>3a7158		67 72 61 6d 0d 0d 46 20 3c 73 74 61 72 74 3e 20
>3a7168		3c 65 6e 64 3e 20 3c 62 79 74 65 3e 0d 20 20 46
>3a7178		69 6c 6c 20 61 20 62 6c 6f 63 6b 20 6f 66 20 6d
>3a7188		65 6d 6f 72 79 20 77 69 74 68 20 61 20 62 79 74
>3a7198		65 0d 0d 47 20 5b 61 64 64 72 65 73 73 5d 0d 20
>3a71a8		20 53 74 61 72 74 20 65 78 65 63 75 74 69 6f 6e
>3a71b8		20 61 74 20 61 20 6c 6f 63 61 74 69 6f 6e 0d 0d
>3a71c8		4a 20 5b 61 64 64 72 65 73 73 5d 20 2d 20 4a 75
>3a71d8		6d 70 20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e
>3a71e8		20 69 6e 20 6d 65 6d 6f 72 79 0d 20 20 4a 75 6d
>3a71f8		70 20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20
>3a7208		69 6e 20 6d 65 6d 6f 72 79 0d 0d 48 20 3c 73 74
>3a7218		61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65
>3a7228		3e 20 5b 62 79 74 65 5d 2e 2e 0d 20 20 48 75 6e
>3a7238		74 20 66 6f 72 20 76 61 6c 75 65 73 20 69 6e 20
>3a7248		6d 65 6d 6f 72 79 0d 0d 4c 20 20 20 20 20 4c 4f
>3a7258		41 44 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>3a7268		22 20 5b 64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d
>3a7278		4d 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d
>3a7288		20 20 44 75 6d 70 20 74 68 65 20 76 61 6c 75 65
>3a7298		20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 52 20 2d 20
>3a72a8		44 69 73 70 6c 61 79 20 74 68 65 20 76 61 6c 75
>3a72b8		65 73 20 6f 66 20 74 68 65 20 72 65 67 69 73 74
>3a72c8		65 72 73 0d 0d 3b 20 3c 50 43 3e 20 3c 41 3e 20
>3a72d8		3c 58 3e 20 3c 59 3e 20 3c 53 50 3e 20 3c 44 42
>3a72e8		52 3e 20 3c 44 50 3e 20 3c 4e 56 4d 58 44 49 5a
>3a72f8		43 3e 0d 20 20 43 68 61 6e 67 65 20 74 68 65 20
>3a7308		63 6f 6e 74 65 6e 74 73 20 6f 66 20 74 68 65 20
>3a7318		72 65 67 69 73 74 65 72 73 0d 0d 53 20 20 20 20
>3a7328		20 53 41 56 45 20 20 20 20 20 20 20 20 20 22 46
>3a7338		69 6c 65 22 20 3c 73 74 61 72 74 3e 20 3c 65 6e
>3a7348		64 3e 0d 54 20 3c 73 74 61 72 74 3e 20 3c 65 6e
>3a7358		64 3e 20 3c 64 65 73 74 69 6e 61 74 69 6f 6e 3e
>3a7368		0d 20 20 54 72 61 6e 73 66 65 72 20 28 63 6f 70
>3a7378		79 29 20 64 61 74 61 20 77 69 74 68 69 6e 20 6d
>3a7388		65 6d 6f 72 79 0d 0d 57 20 3c 62 79 74 65 3e 0d
>3a7398		20 20 53 65 74 20 74 68 65 20 72 65 67 69 73 74
>3a73a8		65 72 20 77 69 64 74 68 20 66 6c 61 67 73 20 66
>3a73b8		6f 72 20 74 68 65 20 64 69 73 61 73 73 65 6d 62
>3a73c8		6c 65 72 0d 0d 58 20 2d 20 52 65 74 75 72 6e 20
>3a73d8		74 6f 20 42 41 53 49 43 0d 0d 3e 20 3c 73 74 61
>3a73e8		72 74 3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65
>3a73f8		5d 2e 2e 2e 0d 20 20 45 64 69 74 20 64 61 74 61
>3a7408		20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20
>3a7418		44 69 73 70 6c 61 79 20 61 20 73 68 6f 72 74 20
>3a7428		68 65 6c 70 20 73 63 72 65 65 6e 0d 0d 00 08 08
>3a7438		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 0d 85 4e 28
>3a7448		6b 20 3d 02 08 e2 20 48 a9 3a 48 ab 68 28 a2 2e
>3a7458		8a 20 64 04 e2 20 a9 3b 20 18 00 a9 20 20 18 00
>3a7468		c2 30 08 e2 20 48 a9 00 48 ab 68 28 a0 03 00 a2
>3a7478		42 02 20 e7 03 c2 20 a9 20 00 20 18 00 af 44 02
>3a7488		00 20 74 04 a9 20 00 20 18 00 af 46 02 00 20 74
>3a7498		04 a9 20 00 20 18 00 af 48 02 00 20 74 04 a9 20
>3a74a8		00 20 18 00 af 4a 02 00 20 74 04 a9 20 00 20 18
>3a74b8		00 af 4e 02 00 20 8e 04 a9 20 00 20 18 00 a9 20
>3a74c8		00 20 18 00 af 4c 02 00 20 74 04 a9 20 00 20 18
>3a74d8		00 08 e2 20 ad 4f 02 22 47 87 3a 28 20 d7 03 20
>3a74e8		d7 03 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a74f8		20 a5 15 87 0d e2 20 a5 0f c5 13 d0 0e c2 20 a5
>3a7508		0d c5 11 d0 06 20 d7 03 2b 28 6b c2 20 18 a5 0d
>3a7518		69 01 00 85 0d e2 20 a5 0e 69 00 85 0e 80 d0 08
>3a7528		0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 0f c5
>3a7538		17 90 45 c2 20 a5 0d c5 15 90 3d e2 20 a7 0d 87
>3a7548		15 a5 0f c5 13 d0 0b c2 20 a5 0d c5 11 d0 03 4c
>3a7558		de 75 c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e
>3a7568		69 00 85 0e c2 20 18 a5 15 69 01 00 85 15 e2 20
>3a7578		a5 16 69 00 85 16 80 c3 c2 20 38 a5 11 e5 0d 85
>3a7588		19 e2 20 a5 13 e5 0f 85 1b c2 20 18 a5 19 65 15
>3a7598		85 15 e2 20 a5 1b 65 17 85 17 e2 20 a7 11 87 15
>3a75a8		a5 13 c5 0f d0 0a c2 20 a5 11 c5 0d d0 02 80 26
>3a75b8		c2 20 38 a5 11 e9 01 00 85 11 e2 20 a5 12 e9 00
>3a75c8		85 12 c2 20 38 a5 15 e9 01 00 85 15 e2 20 a5 16
>3a75d8		e9 00 85 16 80 c4 20 d7 03 2b 28 6b 08 e2 20 c9
>3a75e8		21 90 0b c9 7f 90 04 c9 a0 90 03 28 38 6b 28 18
>3a75f8		6b 08 8b 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>3a7608		a9 00 8f b6 08 00 a5 31 c9 02 b0 16 c9 01 90 20
>3a7618		c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00
>3a7628		85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12
>3a7638		c2 20 18 a5 32 69 00 01 85 11 e2 20 a5 34 69 00
>3a7648		85 13 e2 20 a0 00 00 c2 20 a5 32 85 19 e2 20 a5
>3a7658		34 85 1b e2 20 a7 19 22 e4 75 3a b0 02 a9 3f 99
>3a7668		7e 08 c2 20 18 a5 19 69 01 00 85 19 e2 20 a5 1b
>3a7678		69 00 85 1b c8 c0 08 00 90 db a9 00 99 7e 08 a9
>3a7688		3e 20 18 00 a9 20 20 18 00 e2 20 a5 34 20 8e 04
>3a7698		a9 3a 20 18 00 c2 20 a5 32 20 74 04 c2 20 a9 08
>3a76a8		00 85 47 e2 20 a9 20 20 18 00 a7 32 20 8e 04 22
>3a76b8		26 87 3a e2 20 c6 47 d0 ea a9 20 20 18 00 a9 20
>3a76c8		20 18 00 08 e2 20 48 a9 00 48 ab 68 28 a2 7e 08
>3a76d8		20 64 04 20 d7 03 20 ee 03 a5 34 c5 13 90 0f c2
>3a76e8		20 a5 32 c5 11 90 07 20 d7 03 2b ab 28 6b 4c 4a
>3a76f8		76 08 8d 92 08 e2 20 bd 00 00 99 00 00 ad 92 08
>3a7708		f0 0a c8 e8 e8 e8 e8 ce 92 08 80 eb 28 6b 08 0b
>3a7718		8b 08 c2 20 48 a9 48 08 5b 68 28 08 e2 20 48 a9
>3a7728		00 48 ab 68 28 c2 30 a5 0d 85 32 a5 0f 85 34 e2
>3a7738		20 a5 31 3a 85 47 a2 59 08 a0 7e 08 22 f9 76 3a
>3a7748		a0 00 00 b9 7e 08 87 32 22 26 87 3a c8 c4 47 d0
>3a7758		f2 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b
>3a7768		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>3a7778		a5 31 3a 3a 85 47 a2 5d 08 a0 7e 08 22 f9 76 3a
>3a7788		c2 20 a5 0d 85 32 a5 0f 85 34 c2 20 a5 34 c5 13
>3a7798		d0 06 a5 32 c5 11 f0 2c e2 20 a0 00 00 b7 32 d9
>3a77a8		7e 08 d0 1a c8 c4 47 d0 f4 c2 20 a5 32 85 4a a5
>3a77b8		34 85 4c 22 d0 81 3a e2 20 a9 20 20 18 00 22 26
>3a77c8		87 3a 80 c6 20 d7 03 ab 2b 28 6b 08 c2 20 48 a9
>3a77d8		48 08 5b 68 28 e2 20 a5 31 f0 0e c2 30 a5 0d 8f
>3a77e8		40 02 00 a5 0f 8f 42 02 00 af 46 02 00 aa af 48
>3a77f8		02 00 a8 af 4a 02 00 1b af 4c 02 00 5b e2 20 a9
>3a7808		3a 48 a9 78 48 a9 13 48 4c 4a 78 ea 5c 04 00 3a
>3a7818		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0 c9
>3a7828		c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46
>3a7838		02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02
>3a7848		00 5b e2 20 af 4e 02 00 48 ab a9 5c 8f a2 08 00
>3a7858		af 42 02 00 8f a5 08 00 af 41 02 00 8f a4 08 00
>3a7868		af 40 02 00 8f a3 08 00 af 4f 02 00 48 c2 20 af
>3a7878		44 02 00 28 5c a2 08 00 08 0b 8b 08 e2 20 48 a9
>3a7888		3a 48 ab 68 28 08 c2 20 48 a9 48 08 5b 68 28 c2
>3a7898		10 e2 20 a5 31 c9 02 f0 0c c9 03 d0 11 c2 20 a5
>3a78a8		15 85 47 80 11 c2 20 a9 01 00 85 47 80 08 a2 f2
>3a78b8		89 20 64 04 80 35 a5 0d 85 4a a5 0f 85 4c a0 00
>3a78c8		00 e2 20 a7 4a d7 11 f0 09 22 d0 81 3a a9 20 20
>3a78d8		18 00 c2 20 18 a5 4a 69 01 00 85 4a a5 4c 69 00
>3a78e8		00 85 4c c8 c4 47 d0 d9 20 d7 03 20 d7 03 ab 2b
>3a78f8		28 6b 08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08
>3a7908		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0 4f a6
>3a7918		0d 8e 40 02 a6 0f 8e 42 02 c9 01 f0 41 a6 11 8e
>3a7928		44 02 c9 02 f0 38 a6 15 8e 46 02 c9 03 f0 2f a6
>3a7938		19 8e 48 02 c9 04 f0 26 a6 1d 8e 4a 02 c9 05 f0
>3a7948		1d e2 10 a6 21 8e 4e 02 c9 06 f0 12 c2 10 a6 25
>3a7958		8e 4c 02 c9 07 f0 07 e2 10 a6 29 8e 4f 02 ab 2b
>3a7968		28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a7978		20 c2 10 a2 00 00 bf 5f 8a 3a f0 18 c7 08 f0 03
>3a7988		e8 80 f3 c2 20 8a 0a aa bf a0 79 3a 8f 2f 08 00
>3a7998		22 c4 79 3a ab 2b 28 6b 40 70 48 70 4c 70 50 70
>3a79a8		54 70 58 70 5c 70 60 70 64 70 68 70 44 70 6c 70
>3a79b8		70 70 74 70 36 74 78 70 7c 70 af 70 6c 2f 08 08
>3a79c8		8b 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31
>3a79d8		c9 02 b0 03 4c 6d 7b c2 20 a5 0d 85 32 a5 0f 85
>3a79e8		34 c2 20 22 6f 7d 3a c9 ff ff f0 10 85 54 e2 20
>3a79f8		a5 31 c9 03 f0 36 a9 13 85 4f 80 4c 20 d7 03 08
>3a7a08		e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 a4 7b 20 64
>3a7a18		04 4c 6d 7b 20 d7 03 08 e2 20 48 a9 3a 48 ab 68
>3a7a28		28 c2 10 a2 b3 7b 20 64 04 4c 6d 7b e2 20 22 a5
>3a7a38		7d 3a c9 ff f0 de 85 4f c9 03 f0 62 c9 0b f0 5e
>3a7a48		c9 13 f0 04 c9 08 f0 00 22 9d 7c 3a b0 03 4c 36
>3a7a58		7b 87 32 22 26 87 3a 08 e2 20 48 a9 00 48 ab 68
>3a7a68		28 c2 20 a5 32 85 56 a5 34 85 58 e2 20 a5 4f c9
>3a7a78		12 f0 6c c9 16 f0 68 c9 14 f0 7c 29 3f c9 02 d0
>3a7a88		03 4c 64 7b c2 20 29 ff 00 aa e2 20 bf 6c 86 3a
>3a7a98		c9 03 f0 57 c9 02 f0 5f c9 01 f0 67 80 71 c2 20
>3a7aa8		a5 54 c9 e4 82 f0 26 c9 48 83 f0 2a c9 c8 82 f0
>3a7ab8		1c c9 cc 82 f0 17 c9 d4 82 f0 12 c9 bc 82 f0 0d
>3a7ac8		c9 d0 82 f0 08 c9 b8 82 f0 03 4c 50 7a e2 20 a9
>3a7ad8		12 85 4f 4c 50 7a e2 20 a9 16 85 4f 4c 50 7a 22
>3a7ae8		e0 7b 3a 90 60 c9 02 f0 0e 80 18 a0 02 00 b9 98
>3a7af8		08 97 56 22 26 87 3a a0 01 00 b9 98 08 97 56 22
>3a7b08		26 87 3a a0 00 00 b9 98 08 97 56 22 26 87 3a e2
>3a7b18		20 a9 41 20 18 00 a9 20 20 18 00 a6 32 86 4a a6
>3a7b28		34 86 4c 22 d0 81 3a a9 20 20 18 00 80 37 20 d7
>3a7b38		03 08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 71 7b
>3a7b48		20 64 04 80 20 20 d7 03 08 e2 20 48 a9 3a 48 ab
>3a7b58		68 28 c2 10 a2 c1 7b 20 64 04 80 09 a5 4f 29 c0
>3a7b68		d0 95 4c 0b 7b 2b ab 28 6b 41 64 64 72 65 73 73
>3a7b78		69 6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66
>3a7b88		69 6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e
>3a7b98		73 74 72 75 63 74 69 6f 6e 2e 0d 00 42 61 64 20
>3a7ba8		6d 6e 65 6d 6f 6e 69 63 2e 0d 00 42 61 64 20 6f
>3a7bb8		70 65 72 61 6e 64 2e 0d 00 52 65 6c 61 74 69 76
>3a7bc8		65 20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20
>3a7bd8		6c 61 72 67 65 2e 0d 00 08 0b 08 c2 20 48 a9 48
>3a7be8		08 5b 68 28 e2 20 a5 4f c9 12 f0 0a c2 20 18 a5
>3a7bf8		32 69 02 00 80 08 c2 20 18 a5 32 69 01 00 85 4a
>3a7c08		a5 34 69 00 00 85 4c 38 a5 50 e5 4a 85 50 a5 52
>3a7c18		e5 4c 85 52 e2 20 a5 4f c9 16 f0 1e a5 50 30 0c
>3a7c28		a5 51 d0 2a a5 52 d0 26 a9 01 80 26 a5 51 c9 ff
>3a7c38		d0 1c a5 52 c9 ff d0 16 80 18 a5 51 30 06 a5 52
>3a7c48		d0 0c 80 0e a5 52 c9 ff d0 04 a9 02 80 04 2b 28
>3a7c58		18 6b 2b 28 38 6b 08 0b c2 10 da 08 c2 20 48 a9
>3a7c68		48 08 5b 68 28 e2 20 a2 00 00 df 00 d0 3a f0 08
>3a7c78		e8 e0 10 00 f0 1b 80 f2 c2 20 06 50 26 52 06 50
>3a7c88		26 52 06 50 26 52 06 50 26 52 e2 20 8a 05 50 85
>3a7c98		50 fa 2b 28 6b 0b 8b 08 c2 20 48 a9 48 08 5b 68
>3a7ca8		28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 a5 4f 29
>3a7cb8		3f 85 4a c2 30 a2 00 00 a0 00 00 bd 6a 83 f0 1b
>3a7cc8		c5 54 d0 0d e2 20 b9 6c 85 29 3f c5 4a f0 07 c2
>3a7cd8		20 e8 e8 c8 80 e5 98 38 ab 2b 6b 18 ab 2b 6b 08
>3a7ce8		0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 c2 10 a0
>3a7cf8		00 00 64 50 64 52 b7 03 f0 11 c9 64 f0 19 48 b7
>3a7d08		36 85 4a 68 c5 4a d0 0b c8 80 eb b7 36 d0 04 2b
>3a7d18		28 38 6b 2b 28 18 6b e2 20 b7 36 c9 3a b0 04 c9
>3a7d28		30 b0 14 c9 47 b0 04 c9 41 b0 0c c9 67 b0 e4 c9
>3a7d38		61 b0 02 80 de 29 df 22 5e 7c 3a 80 cb 0b 08 c2
>3a7d48		20 48 a9 48 08 5b 68 28 a0 00 00 e2 20 b7 03 f0
>3a7d58		03 c8 80 f9 c2 20 c8 5a 68 18 65 03 85 03 a5 05
>3a7d68		69 00 00 85 05 2b 6b 0b 08 c2 20 48 a9 48 08 5b
>3a7d78		68 28 c2 20 a5 11 85 36 a5 13 85 38 a9 f8 81 85
>3a7d88		03 a9 3a 00 85 05 22 e7 7c 3a b0 0d 22 45 7d 3a
>3a7d98		a7 03 d0 f2 a9 ff ff 80 02 a5 03 2b 6b 08 0b 08
>3a7da8		c2 20 48 a9 48 08 5b 68 28 c2 30 a5 15 85 36 a5
>3a7db8		17 85 38 a9 84 86 85 03 a9 3a 00 85 05 22 e7 7c
>3a7dc8		3a b0 22 22 45 7d 3a c2 20 18 a5 03 69 01 00 85
>3a7dd8		03 a5 05 69 00 00 85 05 e2 20 a7 03 d0 df c2 20
>3a7de8		a9 ff ff 80 0d 22 45 7d 3a e2 20 a7 03 c2 20 29
>3a7df8		ff 00 2b 28 6b 08 8b 0b 08 c2 20 48 a9 48 08 5b
>3a7e08		68 28 e2 20 a9 00 8f b6 08 00 a5 31 c9 02 b0 16
>3a7e18		c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11 e2 20
>3a7e28		a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f
>3a7e38		85 34 80 12 c2 20 18 a5 32 69 00 01 85 11 e2 20
>3a7e48		a5 34 69 00 85 13 22 69 7e 3a e2 20 a5 34 c5 13
>3a7e58		90 f4 c2 20 a5 32 c5 11 90 ec 20 d7 03 2b ab 28
>3a7e68		6b 08 0b e2 20 a9 41 20 18 00 a9 20 20 18 00 08
>3a7e78		c2 20 48 a9 7a 08 5b 68 28 c2 20 a5 00 85 18 e2
>3a7e88		20 a5 02 85 1a 22 d0 81 3a a9 20 20 18 00 c2 20
>3a7e98		18 a5 00 69 01 00 85 18 e2 20 a5 02 69 00 85 1a
>3a7ea8		e2 20 c2 10 a7 00 c9 c2 d0 0b 48 a7 18 49 ff 2f
>3a7eb8		96 08 00 80 0b c9 e2 d0 0c 48 a7 18 0f 96 08 00
>3a7ec8		8f 96 08 00 68 c2 20 29 ff 00 0a aa bf 6a 83 3a
>3a7ed8		aa 22 4a 81 3a e2 20 a7 00 aa bf 6c 85 3a 22 26
>3a7ee8		87 3a 22 f7 7e 3a 20 d7 03 20 ee 03 2b 28 6b 08
>3a7ef8		e2 20 48 29 3f 0a c2 10 aa 68 7c 05 7f 35 7f 50
>3a7f08		7f 57 7f 7c 7f 83 7f 9e 7f c0 7f d1 7f 0e 80 16
>3a7f18		80 27 80 38 80 3f 80 64 80 91 80 fd 7f e2 7f af
>3a7f28		7f 84 80 8e 80 a2 80 d1 80 7f 80 e2 80 a9 28 20
>3a7f38		18 00 22 f9 80 3a a9 2c 20 18 00 a9 58 20 18 00
>3a7f48		a9 29 20 18 00 4c f3 80 22 f9 80 3a 4c f3 80 e2
>3a7f58		20 48 a9 23 20 18 00 68 29 c0 c9 00 f0 0f 4a 4a
>3a7f68		2f 96 08 00 d0 07 22 03 81 3a 4c f3 80 22 f9 80
>3a7f78		3a 4c f3 80 22 03 81 3a 4c f3 80 a9 28 20 18 00
>3a7f88		22 f9 80 3a a9 29 20 18 00 a9 2c 20 18 00 a9 59
>3a7f98		20 18 00 4c f3 80 22 f9 80 3a a9 2c 20 18 00 a9
>3a7fa8		58 20 18 00 4c f3 80 22 f9 80 3a a9 2c 20 18 00
>3a7fb8		a9 59 20 18 00 4c f3 80 22 03 81 3a a9 2c 20 18
>3a7fc8		00 a9 59 20 18 00 4c f3 80 22 03 81 3a a9 2c 20
>3a7fd8		18 00 a9 58 20 18 00 4c f3 80 a9 28 20 18 00 22
>3a7fe8		03 81 3a a9 2c 20 18 00 a9 58 20 18 00 a9 29 20
>3a7ff8		18 00 4c f3 80 a9 28 20 18 00 22 f9 80 3a a9 29
>3a8008		20 18 00 4c f3 80 a9 41 20 18 00 4c f7 80 22 f9
>3a8018		80 3a a9 2c 20 18 00 a9 53 20 18 00 4c f3 80 a9
>3a8028		5b 20 18 00 22 f9 80 3a a9 5d 20 18 00 4c f3 80
>3a8038		22 11 81 3a 4c f7 80 a9 28 20 18 00 22 f9 80 3a
>3a8048		a9 2c 20 18 00 a9 53 20 18 00 a9 29 20 18 00 a9
>3a8058		2c 20 18 00 a9 59 20 18 00 4c f3 80 a9 5b 20 18
>3a8068		00 22 f9 80 3a a9 5d 20 18 00 a9 2c 20 18 00 a9
>3a8078		59 20 18 00 4c f3 80 a0 02 00 80 03 a0 01 00 22
>3a8088		77 81 3a 4c f7 80 4c f7 80 22 11 81 3a a9 2c 20
>3a8098		18 00 a9 58 20 18 00 4c f7 80 a9 23 20 18 00 8b
>3a80a8		a5 02 48 ab a6 00 e8 a0 01 00 22 e7 03 3a a9 2c
>3a80b8		20 18 00 a9 23 20 18 00 a6 00 a0 01 00 22 e7 03
>3a80c8		3a ab 22 26 87 3a 4c f3 80 a9 28 20 18 00 22 03
>3a80d8		81 3a a9 29 20 18 00 4c f3 80 a9 5b 20 18 00 22
>3a80e8		03 81 3a a9 5d 20 18 00 4c f3 80 22 26 87 3a 28
>3a80f8		6b 08 e2 20 a7 00 20 8e 04 28 6b 08 c2 30 a7 00
>3a8108		20 74 04 22 26 87 3a 28 6b 08 8b 0b c2 30 5a 08
>3a8118		c2 20 48 a9 7a 08 5b 68 28 08 e2 20 48 a9 00 48
>3a8128		ab 68 28 e2 20 a0 00 00 a7 00 99 92 08 22 26 87
>3a8138		3a c8 c0 03 00 d0 f1 22 d0 81 3a c2 30 7a 2b ab
>3a8148		28 6b 08 8b e2 20 c2 10 08 e2 20 48 a9 3a 48 ab
>3a8158		68 28 bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8
>3a8168		bd 00 00 20 18 00 e8 a9 20 20 18 00 ab 28 6b 08
>3a8178		0b 08 c2 20 48 a9 7a 08 5b 68 28 e2 20 c0 02 00
>3a8188		f0 14 a7 00 85 18 30 06 64 19 64 1a 80 1e a9 ff
>3a8198		85 19 85 1a 80 16 a7 00 85 18 22 26 87 3a a7 00
>3a81a8		85 19 30 04 64 1a 80 04 a9 ff 85 1a c2 20 38 a5
>3a81b8		00 65 18 85 18 e2 20 a5 02 65 1a 85 1a 22 d0 81
>3a81c8		3a 22 26 87 3a 2b 28 6b 08 0b c2 20 48 08 c2 20
>3a81d8		48 a9 48 08 5b 68 28 e2 20 a5 4c 20 8e 04 e2 20
>3a81e8		a9 3a 20 18 00 c2 20 a5 4a 20 74 04 68 2b 28 6b
>3a81f8		4f 52 41 00 41 4e 44 00 45 4f 52 00 41 44 43 00
>3a8208		53 54 41 00 4c 44 41 00 43 4d 50 00 53 42 43 00
>3a8218		41 53 4c 00 52 4f 4c 00 4c 53 52 00 52 4f 52 00
>3a8228		53 54 58 00 4c 44 58 00 44 45 43 00 49 4e 43 00
>3a8238		42 49 54 00 4a 4d 50 00 53 54 59 00 4c 44 59 00
>3a8248		43 50 59 00 43 50 58 00 42 52 4b 00 4a 53 52 00
>3a8258		52 54 49 00 52 54 53 00 50 48 50 00 50 4c 50 00
>3a8268		50 48 41 00 50 4c 41 00 44 45 59 00 54 41 59 00
>3a8278		49 4e 59 00 49 4e 58 00 43 4c 43 00 53 45 43 00
>3a8288		43 4c 49 00 53 45 49 00 54 59 41 00 43 4c 56 00
>3a8298		43 4c 44 00 53 45 44 00 54 58 41 00 54 58 53 00
>3a82a8		54 41 58 00 54 53 58 00 44 45 58 00 4e 4f 50 00
>3a82b8		42 50 4c 00 42 4d 49 00 42 56 43 00 42 56 53 00
>3a82c8		42 43 43 00 42 43 53 00 42 4e 45 00 42 45 51 00
>3a82d8		54 53 42 00 54 52 42 00 53 54 5a 00 42 52 41 00
>3a82e8		50 48 59 00 50 4c 59 00 50 48 58 00 50 4c 58 00
>3a82f8		50 48 44 00 50 4c 44 00 50 48 4b 00 52 54 4c 00
>3a8308		50 48 42 00 50 4c 42 00 57 41 49 00 58 42 41 00
>3a8318		54 43 53 00 54 53 43 00 54 43 44 00 54 44 43 00
>3a8328		54 58 59 00 54 59 58 00 53 54 50 00 58 43 45 00
>3a8338		43 4f 50 00 4a 53 4c 00 57 44 4d 00 50 45 52 00
>3a8348		42 52 4c 00 52 45 50 00 53 45 50 00 4d 56 50 00
>3a8358		4d 56 4e 00 50 45 49 00 50 45 41 00 4a 4d 4c 00
>3a8368		00 00 50 82 f8 81 38 83 f8 81 d8 82 f8 81 18 82
>3a8378		f8 81 60 82 f8 81 18 82 f8 82 d8 82 f8 81 18 82
>3a8388		f8 81 b8 82 f8 81 f8 81 f8 81 dc 82 f8 81 18 82
>3a8398		f8 81 80 82 f8 81 34 82 18 83 dc 82 f8 81 18 82
>3a83a8		f8 81 54 82 fc 81 3c 83 fc 81 38 82 fc 81 1c 82
>3a83b8		fc 81 64 82 fc 81 1c 82 fc 82 38 82 fc 81 1c 82
>3a83c8		fc 81 bc 82 fc 81 fc 81 fc 81 38 82 fc 81 1c 82
>3a83d8		fc 81 84 82 fc 81 30 82 1c 83 38 82 fc 81 1c 82
>3a83e8		fc 81 58 82 00 82 40 83 00 82 54 83 00 82 20 82
>3a83f8		00 82 68 82 00 82 20 82 00 83 3c 82 00 82 20 82
>3a8408		00 82 c0 82 00 82 00 82 00 82 58 83 00 82 20 82
>3a8418		00 82 88 82 00 82 e8 82 20 83 64 83 00 82 20 82
>3a8428		00 82 5c 82 04 82 44 83 04 82 e0 82 04 82 24 82
>3a8438		04 82 6c 82 04 82 24 82 04 83 3c 82 04 82 24 82
>3a8448		04 82 c4 82 04 82 04 82 04 82 e0 82 04 82 24 82
>3a8458		04 82 8c 82 04 82 ec 82 24 83 3c 82 04 82 24 82
>3a8468		04 82 e4 82 08 82 48 83 08 82 40 82 08 82 28 82
>3a8478		08 82 70 82 38 82 a0 82 08 83 40 82 08 82 28 82
>3a8488		08 82 c8 82 08 82 08 82 08 82 40 82 08 82 28 82
>3a8498		08 82 90 82 08 82 a4 82 28 83 e0 82 08 82 e0 82
>3a84a8		08 82 44 82 0c 82 2c 82 0c 82 44 82 0c 82 2c 82
>3a84b8		0c 82 74 82 0c 82 a8 82 0c 83 44 82 0c 82 2c 82
>3a84c8		0c 82 cc 82 0c 82 0c 82 0c 82 44 82 0c 82 2c 82
>3a84d8		0c 82 94 82 0c 82 ac 82 2c 83 44 82 0c 82 2c 82
>3a84e8		0c 82 48 82 10 82 4c 83 10 82 48 82 10 82 30 82
>3a84f8		10 82 78 82 10 82 b0 82 10 83 48 82 10 82 30 82
>3a8508		10 82 d0 82 10 82 10 82 10 82 5c 83 10 82 30 82
>3a8518		10 82 98 82 10 82 f0 82 30 83 64 83 10 82 30 82
>3a8528		10 82 4c 82 14 82 50 83 14 82 4c 82 14 82 34 82
>3a8538		14 82 7c 82 14 82 b4 82 14 83 4c 82 14 82 34 82
>3a8548		14 82 d4 82 14 82 14 82 14 82 60 83 14 82 34 82
>3a8558		14 82 9c 82 14 82 f4 82 34 83 54 82 14 82 34 82
>3a8568		14 82 00 00 13 00 02 09 01 01 01 0a 13 82 08 13
>3a8578		03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 08 13
>3a8588		03 07 07 0e 03 00 0b 09 01 01 01 0a 13 82 08 13
>3a8598		03 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 08 13
>3a85a8		07 07 07 0e 13 00 13 09 14 01 01 0a 13 82 08 13
>3a85b8		03 03 03 0b 12 04 0f 0c 14 05 05 0d 13 06 13 13
>3a85c8		0b 07 07 0b 13 00 16 09 01 01 01 0a 13 82 08 13
>3a85d8		15 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 13 13
>3a85e8		10 07 07 0e 12 00 16 09 01 01 01 0a 13 82 13 13
>3a85f8		03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13
>3a8608		03 07 07 0e 82 00 42 09 01 01 01 0a 13 82 13 13
>3a8618		03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13
>3a8628		07 07 06 0e 42 00 02 09 01 01 01 0a 13 82 13 13
>3a8638		03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 13 13
>3a8648		17 07 07 0e 42 00 02 09 01 01 01 0f 13 82 13 13
>3a8658		03 03 03 0b 12 04 0f 0c 03 05 05 0d 13 06 13 13
>3a8668		10 07 07 0e 01 01 01 02 01 01 02 02 00 01 01 03
>3a8678		01 01 03 01 02 01 01 00 02 02 02 02 41 00 08 64
>3a8688		64 3a 64 64 64 64 2c 58 00 0e 64 64 3a 64 64 64
>3a8698		64 00 0b 64 64 64 64 2c 58 00 07 64 64 64 64 2c
>3a86a8		59 00 06 64 64 64 64 00 03 64 64 2c 58 00 05 64
>3a86b8		64 2c 59 00 11 64 64 2c 53 00 09 64 64 00 01 23
>3a86c8		64 64 64 64 00 c2 23 64 64 2c 23 64 64 00 14 23
>3a86d8		64 64 00 02 28 64 64 2c 53 29 2c 59 00 0c 28 64
>3a86e8		64 64 64 2c 58 29 00 10 28 64 64 64 64 29 00 10
>3a86f8		28 64 64 2c 58 29 00 00 28 64 64 29 2c 59 00 04
>3a8708		28 64 64 29 00 0f 5b 64 64 64 64 5d 00 17 5b 64
>3a8718		64 5d 2c 59 00 0d 5b 64 64 5d 00 0a 00 00 08 c2
>3a8728		20 48 18 af 7a 08 00 69 01 00 8f 7a 08 00 e2 20
>3a8738		af 7c 08 00 69 00 8f 7c 08 00 c2 20 68 28 6b 08
>3a8748		c2 10 e2 20 da a2 08 00 0a b0 08 48 a9 30 20 18
>3a8758		00 80 06 48 a9 31 20 18 00 68 ca d0 eb fa 28 6b
>3a8768		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a7 32 f0 0a
>3a8778		c9 20 d0 06 22 26 87 3a 80 f2 6b 08 08 c2 20 48
>3a8788		a9 48 08 5b 68 28 22 26 87 3a 22 68 87 3a c2 30
>3a8798		a5 31 c2 20 29 ff 00 0a 0a aa a5 32 95 0d a5 34
>3a87a8		95 0f e2 20 a7 32 f0 14 c9 22 f0 06 22 26 87 3a
>3a87b8		80 f2 a9 00 87 32 22 26 87 3a e6 31 28 6b 08 c2
>3a87c8		20 48 a9 48 08 5b 68 28 e2 20 64 4a c2 20 64 50
>3a87d8		64 52 e2 20 a7 32 c9 3a f0 0d 20 0c 05 90 0e 22
>3a87e8		5e 7c 3a a9 01 85 4a 22 26 87 3a 80 e5 a5 4a f0
>3a87f8		16 a5 31 c2 20 29 ff 00 0a 0a aa a5 50 95 0d a5
>3a8808		52 95 0f e2 20 e6 31 6b e2 20 64 31 22 68 87 3a
>3a8818		a7 32 f0 21 c9 22 d0 06 22 83 87 3a 80 0a 22 c6
>3a8828		87 3a a5 31 c9 09 b0 0d a7 32 f0 09 c9 20 f0 dc
>3a8838		20 0c 05 b0 d7 6b 08 0b 08 c2 20 48 a9 48 08 5b
>3a8848		68 28 c2 10 e2 20 a2 31 00 74 00 ca d0 fb a9 00
>3a8858		85 02 85 34 c2 20 a9 00 4f 85 00 85 32 e2 20 22
>3a8868		68 87 3a c9 00 f0 38 c2 20 a5 32 85 08 e2 20 a5
>3a8878		34 85 0a a2 01 00 22 26 87 3a a7 32 d0 06 86 0b
>3a8888		64 31 80 1b c9 20 f0 03 e8 80 eb 86 0b a9 00 87
>3a8898		32 22 26 87 3a a7 08 c9 41 f0 07 22 10 88 3a 2b
>3a88a8		28 6b 22 68 87 3a a7 32 f0 f5 22 c6 87 3a 22 68
>3a88b8		87 3a a7 32 f0 e9 c2 20 a5 32 85 11 e2 20 a5 34
>3a88c8		85 13 22 26 87 3a a7 32 f0 26 c9 20 d0 f4 a9 00
>3a88d8		87 32 e6 31 22 26 87 3a 22 68 87 3a a7 32 f0 bf
>3a88e8		c2 20 a5 32 85 15 e2 20 a5 34 85 17 e6 31 80 af
>3a88f8		e6 31 80 ab 08 c2 10 e2 20 a5 31 d0 0f a2 f2 89
>3a8908		a9 3a 48 ab 20 64 04 20 d7 03 80 61 c2 20 a5 0d
>3a8918		8f 23 08 00 a5 0f 8f 25 08 00 20 e5 6a e2 20 a5
>3a8928		31 c9 01 d0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56
>3a8938		03 00 80 0e c2 20 a5 11 8f 54 03 00 a5 13 8f 56
>3a8948		03 00 22 18 11 00 b0 25 e2 20 a2 18 8a a9 3a 48
>3a8958		ab 20 64 04 af 2e 03 00 20 8e 04 a9 20 20 18 00
>3a8968		af 20 03 00 20 8e 04 20 d7 03 20 d7 03 28 6b 8b
>3a8978		08 c2 10 e2 20 a5 31 c9 03 f0 0f a2 f2 89 a9 3a
>3a8988		48 ab 20 64 04 20 d7 03 80 54 c2 20 a5 0d 8f 23
>3a8998		08 00 a5 0f 8f 25 08 00 20 e5 6a a5 11 8f 50 03
>3a89a8		00 a5 13 8f 52 03 00 a5 15 8f 58 03 00 a5 17 8f
>3a89b8		5a 03 00 22 1c 11 00 b0 25 e2 20 a2 02 8a a9 3a
>3a89c8		48 ab 20 64 04 af 2e 03 00 20 8e 04 a9 20 20 18
>3a89d8		00 af 20 03 00 20 8e 04 20 d7 03 20 d7 03 28 ab
>3a89e8		6b 5c c0 27 3a 6b 00 00 00 00 42 61 64 20 61 72
>3a89f8		67 75 6d 65 6e 74 73 0d 0d 00 55 6e 61 62 6c 65
>3a8a08		20 74 6f 20 73 61 76 65 20 66 69 6c 65 3a 20 00
>3a8a18		55 6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64 20 66
>3a8a28		69 6c 65 3a 20 00 0d 20 20 50 43 20 20 20 20 20
>3a8a38		41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>3a8a48		50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>3a8a58		58 44 49 5a 43 0d 00 41 43 44 46 47 4a 48 4c 4d
>3a8a68		52 3b 53 54 56 57 58 3e 3f 00 18 fb 08 c2 20 48
>3a8a78		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a8a88		c2 30 20 b1 8a a9 ff fe 1b 08 e2 20 48 a9 3a 48
>3a8a98		ab 68 28 a2 77 d2 20 64 04 08 e2 20 48 a9 00 48
>3a8aa8		ab 68 28 4c c0 27 4c ae 8a 08 20 34 03 20 54 50
>3a8ab8		28 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3a8ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1106 times (17696 bytes)...
>3acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>3ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>3ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>3ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>3ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>3ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>3ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>3ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>3ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>3ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>3ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>3ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>3ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>3ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>3ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>3ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>3ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>3ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>3ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>3ad248		4f 53 00 54 41 4e 00 4c 4e 00 41 43 4f 53 00 41
>3ad258		53 49 4e 00 41 54 41 4e 00 45 58 50 00 53 51 52
>3ad268		00 49 4e 4b 45 59 00 0d 52 45 41 44 59 0d 00 43
>3ad278		32 35 36 20 46 6f 65 6e 69 78 20 42 41 53 49 43
>3ad288		38 31 36 20 76 30 2e 32 2e 30 2d 61 6c 70 68 61
>3ad298		2b 34 30 38 0d 00
>3b0000						.align 256
.3b0000						CREDITS_TEXT
>3b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>3b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>3b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>3b004f		20
>3b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>3b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>3b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>3b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>3b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>3b009f		20
>3b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b00ef		20
>3b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b013f		20
>3b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>3b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>3b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>3b0168		6e 79 20 41 6c 6c 61 69 72 65
>3b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>3b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b018a		20 20 20 20 20 20
>3b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>3b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>3b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>3b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b01da		20 20 20 20 20 20
>3b01e0		20				                .text " "
>3b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0229		20 20 20 20 20 20 20
>3b0230		20				                .text " "
>3b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0279		20 20 20 20 20 20 20
>3b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>3b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>3b0298		53 3a
>3b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>3b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>3b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>3b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>3b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>3b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b031d		20 20 20
>3b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>3b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>3b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>3b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>3b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>3b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>3b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>3b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>3b0398		75 73 68
>3b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>3b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>3b03c8		54 68 61 6e 6b 73 3a
>3b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>3b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0407		20 20 20 20 20 20 20 20 20
>3b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>3b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>3b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>3b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>3b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>3b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b045f		20
>3b0460		20				                .text " "
>3b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04a9		20 20 20 20 20 20 20
>3b04b0		20				                .text " "
>3b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04f9		20 20 20 20 20 20 20
>3b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>3b0508		45 53 20 41 55 54 48 4f 52 53 3a
>3b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>3b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b054b		20 20 20 20 20
>3b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>3b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>3b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>3b0578		63 6f 72 65 73 2e 6f 72 67
>3b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>3b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0599		20 20 20 20 20 20 20
>3b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>3b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>3b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>3b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>3b05d8		6d
>3b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>3b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>3b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>3b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>3b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>3b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>3b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>3b063b		20 20 20 20 20
>3b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>3b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>3b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>3b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>3b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b068b		20 20 20 20 20
>3b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>3b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>3b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>3b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>3b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06da		20 20 20 20 20 20
>3b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>3b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>3b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>3b0708		6a 61 64 61 20 47 6f 6d 65 7a
>3b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b072a		20 20 20 20 20 20
>3b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>3b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>3b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>3b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>3b0768		6f 6d
>3b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>3b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>3b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>3b0798		6e 69 78 20 55 29 3a 20 54 42 44
>3b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>3b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07cb		20 20 20 20 20
>3b07d0		20				                .text " "
>3b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0819		20 20 20 20 20 20 20
>3b0820		20				                .text " "
>3b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0869		20 20 20 20 20 20 20
>3b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>3b0878		54 48 41 4e 4b 53 3a
>3b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>3b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b08b7		20 20 20 20 20 20 20 20 20
>3b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>3b08c8		56 61 6e 68 61 72 65 6e
>3b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>3b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0908		20 20 20 20 20 20 20 20
>3b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>3b0918		65 77
>3b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>3b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>3b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>3b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>3b0988		65 66 65 72 65 6e 63 65 73 29
>3b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>3b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b09aa		20 20 20 20 20 20
>3b09b0		20				                .text " "
>3b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b09f9		20 20 20 20 20 20 20
>3b0a00		20				                .text " "
>3b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0a49		20 20 20 20 20 20 20
>3b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0a9f		20
>3b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>3b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>3b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>3b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>3b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>3b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>3b0aec		20 20 20 20
>3b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>3b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>3b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>3b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>3b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>3b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>3b0b3c		20 20 20 20
>3b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>3b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>3b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>3b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>3b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>3b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>3b0b8d		20 20 20
>3b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>3b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>3b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>3b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>3b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>3b0bdd		20 20 20
>3b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>3b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>3b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>3b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>3b0c2d		20 20 20
>3b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0c7f		20
>3b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>3b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c98		53 74 65 66 61 6e 79
>3b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>3b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cc7		20 20 20 20 20 20 20 20 20
>3b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>3b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>3b1768		20 20 20 20 20 20 20 20
>3b1770						.align 256
>3b1800		f4 f4 f4 f4 f4 f4 f4 f4		CREDITS_COLOR   .fill 80 * 60, $F4
>3b1808		f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4
;		...repeated 298 times (4768 bytes)...
>3b2ab8		f4 f4 f4 f4 f4 f4 f4 f4
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
>3e0000						.align 16
>3e0000		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>3e0004		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>3e0008		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>3e000c		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>3e0010		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>3e0014		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>3e0018		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>3e001c		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>3e0020		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>3e0028		00
>3e0029		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>3e0031		00
>3e0032		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>3e003a		00
>3e003b		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>3e0043		00
>3e0044		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>3e004c		00
>3e004d		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>3e0055		00
>3e0056		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>3e005e		00
>3e005f		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>3e0067		00

;******  Processing file: src/SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480

;******  Return to file: src/kernel.asm


;******  Processing file: src/SplashScreenCode/Splashscreen_Text_Display.asm

=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
>3e0068		20 01 3e 00 41 01 3e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>3e0070		57 01 3e 00 65 01 3e 00 7d 01 3e 00 a0 01 3e 00
>3e0080		c4 01 3e 00 d9 01 3e 00
>3e0088		e6 01 3e 00 28 02 3e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>3e0090		6a 02 3e 00 ac 02 3e 00 b6 02 3e 00 df 02 3e 00
>3e00a0		16 03 3e 00 39 03 3e 00
>3e00a8		4b 03 3e 00 8a 03 3e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>3e00b0		9c 03 3e 00 af 03 3e 00 cd 03 3e 00 de 03 3e 00
>3e00c0		f1 03 3e 00
>3e00c4		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>3e00cc		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>3e00dc		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>3e00ec		2d 00 1e 00 48 00
>3e00f2		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>3e00fa		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>3e010a		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>3e011a		35 00 39 00 39 00
=6						leftAlign = 6
>3e0120		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>3e0128		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>3e0138		20 20 20 20 20 20 20 20 00
>3e0141		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>3e0149		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>3e0157		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>3e015f		4e 46 4f 3a 20 00
>3e0165		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>3e016d		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>3e017d		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>3e0185		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>3e0195		20 20 20 20 20 20 20 20 20 20 00
>3e01a0		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>3e01a8		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>3e01b8		20 20 20 20 20 20 20 20 20 20 20 00
>3e01c4		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>3e01cc		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>3e01d9		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>3e01e1		53 29 3a 20 00
>3e01e6		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>3e01ee		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>3e01fe		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>3e020e		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>3e021e		30 30 2f 30 30 2f 30 30 20 00
>3e0228		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533 - GABE - REV:0000 SUBREV:0000 DATE:00/00/00          ", $00
>3e0230		35 33 33 20 2d 20 47 41 42 45 20 2d 20 52 45 56
>3e0240		3a 30 30 30 30 20 53 55 42 52 45 56 3a 30 30 30
>3e0250		30 20 44 41 54 45 3a 30 30 2f 30 30 2f 30 30 20
>3e0260		20 20 20 20 20 20 20 20 20 00
>3e026a		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551 - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00      ", $00
>3e0272		35 35 31 20 2d 20 56 49 43 4b 59 20 49 49 20 2d
>3e0282		20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45 56
>3e0292		3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30 30
>3e02a2		2f 30 30 20 20 20 20 20 20 00
>3e02ac		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>3e02b4		20 00
>3e02b6		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>3e02be		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>3e02ce		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>3e02de		00
>3e02df		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>3e02e7		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>3e02f7		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>3e0307		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>3e0316		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>3e031e		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>3e032e		4c 20 54 52 45 4d 42 4c 41 59 00
>3e0339		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>3e0341		20 4d 45 4e 55 2d 2d 2d 2d 00
>3e034b		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>3e0353		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>3e0363		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>3e0373		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>3e0383		46 41 55 4c 54 20 00
>3e038a		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>3e0392		4f 44 45 3a 20 4f 46 46 20 00
>3e039c		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>3e03a4		41 4c 4c 45 44 3a 20 2d 2d 20 00
>3e03af		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>3e03b7		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>3e03c7		3a 20 4e 4f 20 00
>3e03cd		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3e03d5		00 00 00 00 00 00 00 00 00
>3e03de		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>3e03e6		46 4f 45 4e 49 58 2e 43 4f 4d 00
>3e03f1		20 00				LINE22 .text " ", $00
>3e03f3		03 04 3e 00 13 04 3e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>3e03fb		23 04 3e 00 33 04 3e 00
>3e0403		53 04 3e 00 93 04 3e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>3e040b		93 04 3e 00 00 00 00 00
>3e0413		63 04 3e 00 93 04 3e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>3e041b		83 04 3e 00 00 00 00 00
>3e0423		73 04 3e 00 83 04 3e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>3e042b		83 04 3e 00 00 00 00 00
>3e0433		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>3e043b		00 00 00 00 00 00 00 00
>3e0443		30 01 3e 00 8f 01 3e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>3e044b		b3 01 3e 00 d2 01 3e 00
>3e0453		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>3e045b		4e 49 58 20 46 4d 58 00
>3e0463		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>3e046b		4e 49 58 20 55 2b 20 00
>3e0473		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>3e047b		4e 49 58 20 55 20 20 00
>3e0483		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>3e048b		32 20 42 59 54 45 53 00
>3e0493		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>3e049b		34 20 42 59 54 45 53 00
>3e04a3		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>3e04a7		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src/kernel.asm

>3e04ab						.align 256
.3e0500						SS_MONIKER_LUT
>3e0500		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>3e0508		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>3e0518		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>3e0528		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>3e0538		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>3e0548		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>3e0558		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>3e0568		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>3e0578		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>3e0588		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>3e0598		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>3e05a8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>3e05b8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>3e05c8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>3e05d8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>3e05e8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>3e05f8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>3e0608		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>3e0618		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>3e0628		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>3e0638		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>3e0648		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>3e0658		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>3e0668		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>3e0678		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>3e0688		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>3e0698		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>3e06a8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>3e06b8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>3e06c8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>3e06d8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>3e06e8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>3e06f8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>3e0708		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>3e0718		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>3e0728		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>3e0738		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>3e0748		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>3e0758		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>3e0768		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>3e0778		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>3e0788		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>3e0798		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>3e07a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>3e07b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>3e07c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>3e07d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>3e07e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>3e07f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>3e0808		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>3e0818		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>3e0828		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>3e0838		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>3e0848		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>3e0858		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>3e0868		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>3e0878		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>3e0888		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>3e0898		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>3e08a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>3e08b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>3e08c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>3e08d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>3e08e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>3e08f8		ff ff ff 00 e5 80 80 00
.3e0900						SS_MONIKER
>3e0900		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>3e0908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>3e0f08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e0f18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e0f28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1048		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e1058		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e1068		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1188		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e1198		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>3e11a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e12c8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e12d8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e12e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1408		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1418		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>3e1428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1548		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1558		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1688		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e1698		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e16a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e17c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e17d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e17e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e1828		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>3e1838		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e1908		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>3e1918		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e1928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e1968		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e1978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e1a48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e1a58		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e1a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e1aa8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e1ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e1b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e1b88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1b98		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e1ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e1be8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e1bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e1cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e1cc8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1cd8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e1ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e1d28		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>3e1d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e1d68		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>3e1df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e1e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1e18		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e1e38		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1e58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e1e68		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>3e1e78		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e1e88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1e98		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>3e1ea8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e1eb8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e1ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1ed8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>3e1ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e1f38		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e1f48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1f68		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e1f78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e1fa8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>3e1fb8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>3e1fc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1fd8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>3e1fe8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>3e1ff8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e2008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2018		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>3e2028		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e2038		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e2048		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2058		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>3e2068		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2078		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>3e2088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e20a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>3e20b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e20c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e20d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>3e20e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>3e20f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3e2108		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>3e2118		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>3e2128		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>3e2138		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e2148		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2158		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>3e2168		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>3e2178		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>3e2188		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2198		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>3e21a8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e21b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>3e21c8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>3e21d8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>3e21e8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>3e21f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2218		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e2228		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>3e2238		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e2248		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2258		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e2268		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2278		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2288		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2298		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e22a8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>3e22b8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>3e22c8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>3e22d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e22e8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>3e22f8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2308		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2318		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>3e2328		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>3e2338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2358		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2368		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2378		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2388		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2398		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>3e23a8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e23b8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e23c8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>3e23d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e23e8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>3e23f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e2408		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>3e2418		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2428		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>3e2438		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2448		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2458		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>3e2468		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>3e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2498		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e24a8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e24b8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e24c8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e24d8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e24e8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e24f8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2508		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2528		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>3e2538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2548		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2558		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2568		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2578		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>3e2588		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e2598		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e25a8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>3e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e25c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3e25d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e25e8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e25f8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e2608		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2618		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>3e2628		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2638		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2648		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>3e2688		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2698		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e26a8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e26b8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>3e26c8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e26d8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e26e8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>3e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2708		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>3e2718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2728		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2738		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2748		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2758		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>3e2768		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>3e2778		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2788		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e2798		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e27a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>3e27b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>3e27c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e27d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>3e27e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>3e27f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2808		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>3e2818		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>3e2828		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>3e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2848		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e2858		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e2868		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e2878		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e2888		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e2898		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e28a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e28b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e28c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e28d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>3e28e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>3e28f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>3e2908		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e2918		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>3e2928		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e2938		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e2948		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e2958		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>3e2968		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e2978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2988		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e2998		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e29a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e29b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e29c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>3e29d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e29f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2a08		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>3e2a18		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>3e2a28		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e2a38		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>3e2a48		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e2a58		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e2a68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e2a78		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e2a88		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>3e2a98		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>3e2aa8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2ac8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e2ad8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e2ae8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>3e2af8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e2b08		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>3e2b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b28		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e2b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b48		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>3e2b58		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>3e2b68		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>3e2b78		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>3e2b88		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e2b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2ba8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e2bb8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e2bc8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e2bd8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>3e2be8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e2bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c08		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e2c18		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>3e2c28		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>3e2c38		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e2c48		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e2c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2c68		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e2c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e2c98		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e2ca8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e2cb8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e2cc8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e2cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2ce8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e2cf8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>3e2d08		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e2d18		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>3e2d28		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e2d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2d48		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e2d58		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>3e2d68		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>3e2d78		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e2d88		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>3e2d98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e2da8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e2db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2dc8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e2dd8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e2de8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e2df8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e2e08		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e2e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2e28		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e2e38		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e2e48		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e2e58		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e2e68		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e2e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2e88		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e2e98		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>3e2ea8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>3e2eb8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e2ec8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e2ed8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e2ee8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>3e2ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2f08		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e2f18		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e2f28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e2f38		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e2f48		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e2f58		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e2f68		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e2f78		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e2f88		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e2f98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e2fa8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e2fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2fc8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e2fd8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>3e2fe8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>3e2ff8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e3008		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3018		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3028		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>3e3038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3058		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>3e3068		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>3e3078		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3088		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3098		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e30a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e30b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>3e30c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e30d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e30e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>3e30f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3108		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3118		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e3128		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3138		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>3e3148		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3158		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>3e3168		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3178		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3188		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3198		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>3e31a8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>3e31b8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e31c8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e31d8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>3e31e8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e31f8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>3e3208		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e3218		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3228		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e3238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3248		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e3258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3268		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3278		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>3e3288		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3298		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>3e32a8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e32b8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e32c8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>3e32d8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>3e32e8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e32f8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3308		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3318		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3328		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e3338		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>3e3348		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3358		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3368		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e3378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3388		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>3e3398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e33a8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e33b8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e33c8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e33d8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e33e8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e33f8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3408		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>3e3418		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>3e3428		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3438		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3448		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3458		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>3e3468		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e3478		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>3e3488		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3498		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e34a8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e34b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e34c8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>3e34d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e34e8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e34f8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e3508		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>3e3518		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e3528		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3538		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e3548		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3558		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>3e3568		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3578		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e3588		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3598		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e35a8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e35b8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e35c8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e35d8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e35e8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e35f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3608		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3628		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3638		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e3648		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>3e3658		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>3e3668		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3678		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e3688		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3698		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>3e36a8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e36b8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e36c8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e36d8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>3e36e8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>3e36f8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3708		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3718		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e3728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3748		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e3758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3768		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e3778		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e3788		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e3798		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e37a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>3e37b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>3e37c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e37d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e37e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e37f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>3e3808		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>3e3818		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e3828		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>3e3838		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e3848		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e3858		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e3868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3888		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e3898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e38a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>3e38b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e38c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e38d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>3e38e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e38f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3908		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e3918		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3928		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e3938		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>3e3948		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3e3958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e3968		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>3e3978		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>3e3988		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e3998		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e39a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e39b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e39c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e39d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e39e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3e39f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a08		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e3a18		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e3a28		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e3a38		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a48		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e3a58		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a68		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e3a78		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>3e3a88		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e3a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e3aa8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e3ab8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e3ac8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e3ad8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e3ae8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b08		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e3b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e3b28		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e3b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b48		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e3b58		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e3b68		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e3b78		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e3b88		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3e3b98		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ba8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e3bb8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e3bc8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e3bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e3be8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e3bf8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e3c08		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3e3c18		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e3c28		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3c48		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e3c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e3c68		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3e3c78		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>3e3c88		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>3e3c98		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e3ca8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e3cb8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3cc8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e3cd8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e3ce8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e3cf8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e3d08		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e3d18		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e3d28		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e3d38		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>3e3d48		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e3d58		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e3d68		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e3d88		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e3d98		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>3e3da8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e3db8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>3e3dc8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e3dd8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e3de8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e3df8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3e08		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e3e18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e3e28		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>3e3e38		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>3e3e48		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3e3e58		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>3e3e68		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e3e78		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e3e88		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>3e3e98		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e3ea8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e3ec8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e3ed8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>3e3ee8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e3ef8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3e3f08		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e3f18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e3f28		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e3f38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3f48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e3f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e3f68		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>3e3f78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>3e3f88		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>3e3f98		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>3e3fa8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e3fb8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>3e3fc8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e3fd8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3e3fe8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4008		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4018		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e4028		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4038		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4048		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4058		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4068		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>3e4078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4088		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e40a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>3e40b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>3e40c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>3e40d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>3e40e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e40f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4108		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>3e4118		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>3e4128		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4148		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4158		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4168		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4178		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>3e4188		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4198		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e41a8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e41b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e41c8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e41d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e41e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e41f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3e4208		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4218		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4228		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4238		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4248		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>3e4258		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>3e4268		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4288		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4298		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e42a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>3e42d8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e42e8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e42f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4308		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4328		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4338		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>3e4348		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4358		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4368		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4378		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e4388		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e4398		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e43a8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e43b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e43c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>3e43d8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e43e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e43f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4408		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4418		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4428		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4448		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4468		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4478		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>3e4488		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4498		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>3e44a8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e44b8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e44c8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e44d8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e44e8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>3e44f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4508		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>3e4518		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>3e4528		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4538		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4548		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>3e4558		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4568		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>3e4578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4588		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e45a8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e45b8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>3e45c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e45d8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>3e45e8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e45f8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e4608		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e4618		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4628		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4648		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4658		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>3e4668		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4678		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4688		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>3e4698		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e46a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>3e46b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e46c8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e46d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e46e8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e46f8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e4708		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e4718		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>3e4728		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e4738		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>3e4748		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4758		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e4768		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e4778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4788		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4798		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>3e47a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>3e47b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e47c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>3e47d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e47e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>3e47f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4808		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e4818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4828		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e4838		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e4848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>3e4858		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>3e4868		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>3e4878		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>3e4888		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>3e4898		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e48a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e48b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e48c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e48d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>3e48e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>3e48f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4908		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e4918		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>3e4928		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e4938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4948		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e4958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4968		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>3e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e4988		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>3e4998		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>3e49a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e49b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>3e49c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>3e49d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e49e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e49f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4a08		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4a18		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>3e4a28		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>3e4a38		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>3e4a48		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4a58		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>3e4a68		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4a88		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>3e4a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4aa8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e4ac8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e4ad8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>3e4ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4af8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>3e4b08		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>3e4b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e4b28		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4b48		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4b58		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4b68		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>3e4ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4bc8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>3e4bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e4c08		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4c18		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>3e4c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4c38		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e4c48		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>3e4c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4c68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4c88		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>3e4c98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ca8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e4d08		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>3e4d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e4d58		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>3e4d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d78		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e4d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4da8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4dc8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>3e4dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>3e4e48		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e4e58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e4e98		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e4ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4eb8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e4ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ed8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ee8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e4f88		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>3e4f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e4fd8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>3e4fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5028		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e50c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e50d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5118		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>3e5128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>3e5208		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5218		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>3e5348		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5358		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>3e58f8		00 00 00 00 00 00 00 00
.3e5900						SS_FMX_TXT
>3e5900		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>3e5908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>3e5bb8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e5bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e5c58		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e5c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e5cf8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e5d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e5d98		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e5da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e5df8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e5e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e5e38		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e5e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e5e98		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e5ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e5ed8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e5ee8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e5f28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e5f38		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e5f78		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e5f88		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e5fc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e5fd8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6018		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>3e6028		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6068		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>3e6078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e60b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e60c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e60d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6108		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>3e6118		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6148		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6158		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6168		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e61a8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>3e61b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e61c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e61d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e61e8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e61f8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6208		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6218		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6228		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6248		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>3e6258		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6288		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6298		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>3e62a8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e62b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e62c8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e62d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e62e8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>3e62f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e6328		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>3e6338		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>3e6348		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>3e6358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>3e6368		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>3e6378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6388		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>3e6398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e63a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e63b8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>3e63c8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>3e63d8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>3e63e8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e63f8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e6408		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>3e6418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6428		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>3e6438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6458		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>3e6468		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6478		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6488		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6498		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>3e64a8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>3e64b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e64c8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>3e64d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e64e8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e64f8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6508		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6518		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6528		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6538		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>3e6548		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>3e6558		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6568		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6588		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>3e6598		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e65a8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e65b8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>3e65c8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e65d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e65e8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e65f8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6608		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6628		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>3e6638		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6648		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6658		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>3e6668		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e6678		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e6688		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e66a8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>3e66b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e66c8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>3e66d8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e66e8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e66f8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>3e6708		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e6718		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>3e6728		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6738		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e6748		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>3e6758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6768		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>3e6778		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6788		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6798		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>3e67a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e67b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>3e67c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e67d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>3e67e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>3e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6808		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>3e6818		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6828		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>3e6838		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>3e6848		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e6858		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>3e6868		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e6878		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>3e6888		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>3e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e68a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>3e68b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e68c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>3e68d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e68e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e68f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>3e6908		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>3e6918		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e6928		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6948		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e6958		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e6968		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>3e6978		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e6988		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e6998		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e69a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>3e69b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e69c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e69e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e69f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e6a08		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e6a18		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e6a28		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e6a38		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e6a48		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e6a58		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e6a68		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a98		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e6aa8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ab8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e6ac8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e6ad8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e6ae8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e6af8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e6b08		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>3e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b38		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e6b48		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b58		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e6b68		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>3e6b78		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e6b88		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e6b98		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e6ba8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bd8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e6be8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bf8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e6c08		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>3e6c18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e6c28		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e6c38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e6c48		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c78		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>3e6c88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c98		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e6ca8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>3e6cb8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e6cc8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e6cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e6ce8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d18		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e6d28		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e6d38		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e6d48		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>3e6d58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e6d68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e6d78		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e6d88		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6db8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e6dc8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>3e6dd8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e6de8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e6df8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e6e08		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e6e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e6e28		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e58		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e6e68		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e6e78		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e6e88		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e6e98		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e6ea8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e6eb8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e6ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ed8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e6ef8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e6f08		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e6f18		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e6f28		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e6f38		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e6f48		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e6f58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e6f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6f78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6f88		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>3e6f98		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e6fa8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e6fb8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e6fc8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e6fd8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e6fe8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e6ff8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e7008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7028		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>3e7038		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7048		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>3e7058		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7068		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7078		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e7088		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e7098		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e70a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e70b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e70c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e70d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e70e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e70f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7108		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7118		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e7128		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e7138		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e7148		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7158		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7168		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7178		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7188		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>3e7198		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e71a8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e71b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e71c8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>3e71d8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e71e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e71f8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e7208		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e7218		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7228		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e7238		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e7248		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7258		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7268		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e7278		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7288		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7298		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72a8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>3e72b8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>3e72c8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72d8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e72e8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e72f8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7308		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e7318		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7328		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7348		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e7358		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7378		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7388		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>3e7398		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e73a8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e73b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e73c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e73d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e73e8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>3e73f8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7418		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7428		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>3e7438		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7448		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e7458		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7488		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>3e7498		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e74a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e74b8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e74c8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>3e74d8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e74e8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e74f8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7518		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7528		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>3e7538		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7548		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e7558		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7568		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>3e7578		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7588		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7598		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e75a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e75b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e75c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e75d8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e75e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e75f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7608		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>3e7618		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e7628		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7638		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7668		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7678		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7688		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7698		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e76b8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e76c8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e76d8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e76e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e76f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7708		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7718		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7728		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7738		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e7748		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7758		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>3e7768		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e7778		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e77a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e77b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e77c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e77d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e77e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e77f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>3e7808		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>3e7818		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7838		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7848		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e7858		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e7868		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e7878		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e7888		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e7898		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e78a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>3e78b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e78c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e78d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e78e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e78f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e7908		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e7918		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e7928		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e7938		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e7948		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e7958		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e7968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7988		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e7998		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e79a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e79b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e79c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e79d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e79e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e79f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e7a08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7a28		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e7a38		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e7a48		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e7a58		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e7a68		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e7a78		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>3e7a88		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e7a98		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e7aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ac8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e7ad8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e7ae8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e7af8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>3e7b08		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e7b18		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e7b28		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e7b38		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e7b48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7b68		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e7b78		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e7b88		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e7b98		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e7ba8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e7bb8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e7bc8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e7bd8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e7be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c08		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e7c18		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c28		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e7c38		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c48		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e7c58		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e7c68		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e7c78		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e7c88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ca8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e7cb8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7cc8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e7cd8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ce8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e7cf8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>3e7d08		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e7d18		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>3e7d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d48		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e7d58		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d68		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>3e7d78		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d88		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e7d98		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>3e7da8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e7db8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e7dc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7de8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e7df8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e08		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>3e7e18		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e28		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e7e38		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>3e7e48		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e58		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e7e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e88		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e7e98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ea8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ec8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e7ed8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>3e7ee8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ef8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>3e7f08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f28		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e7f38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f48		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f68		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e7f78		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>3e7f88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f98		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>3e7fa8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7fc8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>3e7fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7fe8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8008		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8018		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>3e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8038		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>3e8048		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8068		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>3e8078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e80a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e80b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e80c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e80d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>3e80e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e80f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8108		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>3e8118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8148		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8158		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8178		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>3e8188		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e81a8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>3e81b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e81e8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>3e81f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8218		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>3e8228		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8248		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>3e8258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8288		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e8298		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e82a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e82b8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>3e82c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e82d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e82e8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>3e82f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8328		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>3e8338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8358		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>3e8368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8388		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>3e8398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e83c8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>3e83d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83f8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>3e8408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8428		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>3e8438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8468		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e8478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8498		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3e84a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e84b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e84c8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e84d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8508		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e8518		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8538		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>3e8548		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e85a8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>3e85b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85d8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e85e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8648		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>3e8658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8678		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>3e8688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e86e8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>3e86f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e8728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8788		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>3e8798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e87c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e8828		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e8838		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e88c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e8968		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>3e8af8		00 00 00 00 00 00 00 00
.3e8b00						SS_UPlus_TXT
>3e8b00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>3e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>3e8bf8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e8c58		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e8cb8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e8d18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e8d68		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>3e8d78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e8dc8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>3e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e8e28		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>3e8e38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e8e88		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>3e8e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e8ee8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>3e8ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e8f48		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>3e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e8fa8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>3e8fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8fe8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>3e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9008		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e9048		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>3e9058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9068		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e90a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>3e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>3e90e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9108		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>3e9118		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9128		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e9138		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e9148		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9158		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9168		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e9178		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9188		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e9198		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>3e91a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e91b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e91c8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e91d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e91e8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e91f8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>3e9208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9218		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9228		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9238		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e9248		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e9258		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e9268		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9288		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9298		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e92a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e92b8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e92c8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e92d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e92e8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e92f8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9308		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9318		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9328		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9348		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3e9358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9368		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9378		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9388		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e93a8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e93b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e93c8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e93d8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e93e8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e93f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9408		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e9418		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e9428		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e9438		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e9448		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9468		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e9478		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e9488		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e9498		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e94a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e94b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e94c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e94d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e94e8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e94f8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9508		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9518		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9528		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9538		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e9548		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e9558		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>3e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9588		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9598		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e95a8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e95b8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>3e95c8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>3e95d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e95e8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e95f8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9608		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e9618		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e9628		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>3e9638		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9648		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9658		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9668		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e9678		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e9688		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>3e9698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e96a8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e96b8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e96c8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e96d8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e96e8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e96f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9708		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e9718		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e9728		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>3e9738		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e9748		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>3e9758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9768		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e9778		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3e9788		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>3e9798		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e97a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>3e97b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e97c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e97d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e97e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>3e97f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e9808		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e9818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e9828		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e9838		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3e9848		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>3e9858		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e9868		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e9878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e9888		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e9898		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e98a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e98b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e98c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>3e98d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e98e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e98f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e9908		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e9918		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e9928		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>3e9938		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e9948		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e9958		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e9968		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e9978		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>3e9988		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e9998		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e99a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e99b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e99c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3e99d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>3e99e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e9a08		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e9a18		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e9a28		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>3e9a38		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e9a68		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e9a78		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e9a88		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>3e9a98		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e9ac8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3e9ad8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e9ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e9af8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b18		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e9b28		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>3e9b38		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e9b48		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e9b58		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3e9b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b78		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e9b88		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3e9b98		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e9ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e9bb8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3e9bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e9be8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>3e9bf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e9c08		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e9c18		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3e9c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c38		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e9c48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>3e9c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3e9c68		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e9c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3e9c88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c98		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e9ca8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3e9cb8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3e9cc8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e9cd8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3e9ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e9d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e9d18		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3e9d28		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3e9d38		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3e9d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d58		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e9d68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e9d78		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e9d88		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3e9d98		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3e9da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9db8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e9dc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e9dd8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>3e9de8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>3e9df8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3e9e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e18		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e9e28		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e9e38		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>3e9e48		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3e9e58		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e78		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e9e88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e9e98		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3e9ea8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3e9eb8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ed8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e9ee8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e9ef8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9f08		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3e9f18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9f28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9f38		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e9f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e9f58		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9f68		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3e9f78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e9fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e9fb8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fc8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>3e9fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea018		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea028		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3ea038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea068		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>3ea078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea088		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea0c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>3ea0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea0e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea128		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>3ea138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>3ea2f8		00 00 00 00 00 00 00 00
.3ea300						SS_U_TXT
>3ea300		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>3ea308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>3ea3b8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea3c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea3f8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3ea478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea4a8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>3ea4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea4e8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>3ea4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea528		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>3ea538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea568		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>3ea578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea5a8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>3ea5b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea5e8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>3ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea628		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>3ea638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea648		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>3ea658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea668		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3ea678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea688		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>3ea698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea6a8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea6c8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>3ea6d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea6e8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3ea6f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea708		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>3ea718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea728		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3ea738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea748		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3ea758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3ea768		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3ea778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea788		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3ea798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3ea7a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3ea7b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea7c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3ea7e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3ea7f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea808		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3ea818		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3ea828		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea848		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3ea858		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3ea868		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3ea878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea888		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>3ea898		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3ea8a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3ea8b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3ea8d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3ea8e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea908		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3ea918		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3ea928		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea948		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3ea958		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3ea968		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea988		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3ea998		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3ea9a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3ea9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea9c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3ea9d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3ea9e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaa08		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3eaa18		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3eaa28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaa48		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eaa58		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eaa68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eaa78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eaa88		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eaa98		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eaaa8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eaab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eaac8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eaad8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eaae8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaaf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eab08		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3eab18		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eab28		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eab38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eab48		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eab58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3eab68		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eab78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eab88		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eab98		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3eaba8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eabb8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eabc8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eabd8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3eabe8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eabf8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eac08		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eac18		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3eac28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eac38		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eac48		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eac58		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eac68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eac78		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eac88		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eac98		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eaca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eacb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eacc8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eacd8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eace8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eacf8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3ead08		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3ead18		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead38		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3ead48		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3ead58		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead78		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3ead88		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>3ead98		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3eada8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eadb8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eadc8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3eadd8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eade8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eadf8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eae08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>3eae18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eae28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eae38		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eae48		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>3eae58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3eae68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eae78		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eae88		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>3eae98		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3eaea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaeb8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eaec8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>3eaed8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3eaee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaef8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eaf08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eaf18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3eaf28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf38		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eaf48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eaf58		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3eaf68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf78		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eaf88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eaf98		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>3eafa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafb8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eafc8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eafd8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3eafe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaff8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eb008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb018		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eb028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb038		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb048		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb058		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb068		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb078		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb088		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb098		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb0a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3eb0c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb0d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb0e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3eb108		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb148		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>3eb158		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eb188		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>3eb198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eb1c8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3eb1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3eb2f8		00 00 00 00 00 00 00 00
.3f0000						FONT_4_BANK0
>3f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3f07f8		00 00 00 00 00 00 00 00
.3f0800						FONT_4_SPLASH
>3f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>3f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>3f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>3f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>3f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>3f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>3f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>3f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>3f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>3f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>3f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>3f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>3f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>3f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>3f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>3f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>3f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>3f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>3f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>3f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>3f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>3f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>3f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>3f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>3f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>3f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>3f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>3f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>3f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>3f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>3f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>3f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>3f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>3f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>3f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>3f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>3f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>3f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>3f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>3f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>3f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>3f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>3f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>3f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>3f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>3f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>3f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>3f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>3f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>3f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>3f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>3f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>3f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>3f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>3f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>3f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>3f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>3f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>3f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>3f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>3f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>3f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>3f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>3f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>3f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>3f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>3f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>3f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>3f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>3f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>3f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>3f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>3f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>3f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>3f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>3f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>3f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>3f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>3f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>3f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>3f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>3f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>3f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>3f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>3f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>3f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>3f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>3f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>3f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>3f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>3f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>3f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>3f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>3f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>3f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>3f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>3f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>3f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>3f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>3f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>3f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>3f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>3f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>3f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>3f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>3f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>3f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>3f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>3f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>3f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>3f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>3f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>3f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>3f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>3f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>3f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>3f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>3f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>3f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>3f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>3f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>3f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>3f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>3f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>3f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>3f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>3f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>3f0ff8		0f 0f 0f 0f f0 f0 f0 00
>3fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
